{"examples": [{"name": "Arrays", "contents": [{"name": "Decorrelation Stretch", "code": "// Decorrelation Stretch\n\nfunction dcs(image, region, scale) {\n  var bandNames = image.bandNames();\n\n  // The axes are numbered, so to make the following code more\n  // readable, give the axes names.\n  var imageAxis = 0;\n  var bandAxis = 1;\n\n  // Compute the mean of each band in the region.\n  var means = image.reduceRegion(ee.Reducer.mean(), region, scale);\n\n  // Create a constant array image from the mean of each band.\n  var meansArray = ee.Image(means.toArray());\n\n  // Collapse the bands of the image into a 1D array per pixel,\n  // with images along the first axis and bands along the second.\n  var arrays = image.toArray();\n\n  // Perform element-by-element subtraction, which centers the\n  // distribution of each band within the region.\n  var centered = arrays.subtract(meansArray);\n\n  // Compute the covariance of the bands within the region.\n  var covar = centered.reduceRegion({\n    reducer: ee.Reducer.centeredCovariance(),\n    geometry: region,\n    scale: scale\n  });\n\n  // Get the 'array' result and cast to an array. Note this is a\n  // single array, not one array per pixel, and represents the\n  // band-to-band covariance within the region.\n  var covarArray = ee.Array(covar.get('array'));\n\n  // Perform an eigen analysis and slice apart the values and vectors.\n  var eigens = covarArray.eigen();\n  var eigenValues = eigens.slice(bandAxis, 0, 1);\n  var eigenVectors = eigens.slice(bandAxis, 1);\n\n  // Rotate by the eigenvectors, scale to a variance of 30, and rotate back.\n  var i = ee.Array.identity(bandNames.length());\n  var variance = eigenValues.sqrt().matrixToDiag();\n  var scaled = i.multiply(30).divide(variance);\n  var rotation = eigenVectors.transpose()\n    .matrixMultiply(scaled)\n    .matrixMultiply(eigenVectors);\n\n  // Reshape the 1-D 'normalized' array, so we can left matrix multiply\n  // with the rotation. This requires embedding it in 2-D space and\n  // transposing.\n  var transposed = centered.arrayRepeat(bandAxis, 1).arrayTranspose();\n\n  // Convert rotated results to 3 RGB bands, and shift the mean to 127.\n  return transposed.matrixMultiply(ee.Image(rotation))\n    .arrayProject([bandAxis])\n    .arrayFlatten([bandNames])\n    .add(127).byte();\n}\n\nvar image = ee.Image('MODIS/006/MCD43A4/2002_07_04');\n\nMap.setCenter(-52.09717, -7.03548, 7);\n\n// View the original bland image.\nvar rgb = [0, 3, 2];\nMap.addLayer(image.select(rgb), {min: -100, max: 2000}, 'Original Image');\n\n// Stretch the values within an interesting region.\nvar region = ee.Geometry.Rectangle(-57.04651, -8.91823, -47.24121, -5.13531);\nMap.addLayer(dcs(image, region, 1000).select(rgb), {}, 'DCS Image');\n\n// Display the region in which covariance stats were computed.\nMap.addLayer(ee.Image().paint(region, 0, 2), {}, 'Region');\n\n", "environment": "[]"}, {"name": "Linear Regression", "code": "// Simple regression of year versus NDVI.\n\n// Define the start date and position to get images covering Montezuma Castle,\n// Arizona, from 2000-2010.\nvar start = '2000-01-01';\nvar end = '2010-01-01';\nvar lng = -111.83533;\nvar lat = 34.57499;\nvar region = ee.Geometry.Point(lng, lat);\n\n// Filter to Landsat 7 images in the given time and place, filter to a regular\n// time of year to avoid seasonal affects, and for each image create the bands\n// we will regress on:\n// 1. A 1, so the resulting array has a column of ones to capture the offset.\n// 2. Fractional year past 2000-01-01.\n// 3. NDVI.\nvar images = ee.ImageCollection('LANDSAT/LE07/C01/T1')\n  .filterDate(start, end)\n  .filter(ee.Filter.dayOfYear(160, 240))\n  .filterBounds(region)\n  .map(function(image) {\n    var date = ee.Date(image.get('system:time_start'));\n    var yearOffset = date.difference(ee.Date(start), 'year');\n    var ndvi = image.normalizedDifference(['B4', 'B3']);\n    return ee.Image(1).addBands(yearOffset).addBands(ndvi).toDouble();\n  });\n\n// Convert to an array. Give the axes names for more readable code.\nvar array = images.toArray();\nvar imageAxis = 0;\nvar bandAxis = 1;\n\n// Slice off the year and ndvi, and solve for the coefficients.\nvar x = array.arraySlice(bandAxis, 0, 2);\nvar y = array.arraySlice(bandAxis, 2);\nvar fit = x.matrixSolve(y);\n\n// Get the coefficient for the year, effectively the slope of the long-term\n// NDVI trend.\nvar slope = fit.arrayGet([1, 0]);\n\nMap.setCenter(lng, lat, 12);\nMap.addLayer(slope, {min: -0.03, max: 0.03}, 'Slope');\n\n", "environment": "[]"}, {"name": "Quality Mosaic", "code": "// Array-based quality mosaic.\n\n// Returns a mosaic built by sorting each stack of pixels by the first band\n// in descending order, and taking the highest quality pixel.\nfunction qualityMosaic(bands) {\n  // Convert to an array, and declare names for the axes and indices along the\n  // band axis.\n  var array = bands.toArray();\n  var imageAxis = 0;\n  var bandAxis = 1;\n  var qualityIndex = 0;\n  var valuesIndex = 1;\n\n  // Slice the quality and values off the main array, and sort the values by the\n  // quality in descending order.\n  var quality = array.arraySlice(bandAxis, qualityIndex, qualityIndex + 1);\n  var values = array.arraySlice(bandAxis, valuesIndex);\n  var valuesByQuality = values.arraySort(quality.multiply(-1));\n\n  // Get an image where each pixel is the array of band values where the quality\n  // band is greatest. Note that while the array is 2-D, the first axis is\n  // length one.\n  var best = valuesByQuality.arraySlice(imageAxis, 0, 1);\n\n  // Project the best 2D array down to a single dimension, and convert it back\n  // to a regular scalar image by naming each position along the axis. Note we\n  // provide the original band names, but slice off the first band since the\n  // quality band is not part of the result. Also note to get at the band names,\n  // we have to do some kind of reduction, but it won't really calculate pixels\n  // if we only access the band names.\n  var bandNames = bands.min().bandNames().slice(1);\n  return best.arrayProject([bandAxis]).arrayFlatten([bandNames]);\n}\n\n// Load the l7_l1t collection for the year 2000, and make sure the first band\n// is our quality measure, in this case the normalized difference values.\nvar l7 = ee.ImageCollection('LANDSAT/LE07/C01/T1')\n    .filterDate('2000-01-01', '2001-01-01');\nvar withNd = l7.map(function(image) {\n  return image.normalizedDifference(['B4', 'B3']).addBands(image);\n});\n\n// Build a mosaic using the NDVI of bands 4 and 3, essentially showing the\n// greenest pixels from the year 2000.\nvar greenest = qualityMosaic(withNd);\n\n// Select out the color bands to visualize. An interesting artifact of this\n// approach is that clouds are greener than water. So all the water is white.\nvar rgb = greenest.select(['B3', 'B2', 'B1']);\n\nMap.addLayer(rgb, {gain: [1.4, 1.4, 1.1]}, 'Greenest');\nMap.setCenter(-90.08789, 16.38339, 11);\n\n", "environment": "[]"}, {"name": "Spectral Unmixing", "code": "// Array-based spectral unmixing.\n\n// Create a mosaic of Landsat 5 images from June through September, 2007.\nvar allBandMosaic = ee.ImageCollection('LANDSAT/LT05/C01/T1')\n  .filterDate('2007-06-01', '2007-09-30')\n  .select('B[0-7]')\n  .median();\n\n// Create some representative endmembers computed previously by sampling\n// the Landsat 5 mosaic.\nvar urbanEndmember = [88, 42, 48, 38, 86, 115, 59];\nvar vegEndmember = [50, 21, 20, 35, 50, 110, 23];\nvar waterEndmember = [51, 20, 14, 9, 7, 116, 4];\n\n// Compute the 3x7 pseudo inverse.\nvar endmembers = ee.Array([urbanEndmember, vegEndmember, waterEndmember]);\nvar inverse = ee.Image(endmembers.matrixPseudoInverse().transpose());\n\n// Convert the bands to a 2D 7x1 array. The toArray() call concatenates\n// pixels from each band along the default axis 0 into a 1D vector per\n// pixel, and the toArray(1) call concatenates each band (in this case\n// just the one band of 1D vectors) along axis 1, forming a 2D array.\nvar inputValues = allBandMosaic.toArray().toArray(1);\n\n// Matrix multiply the pseudo inverse of the endmembers by the pixels to\n// get a 3x1 set of endmembers fractions from 0 to 1.\nvar unmixed = inverse.matrixMultiply(inputValues);\n\n// Create and show a colored image of the endmember fractions. Since we know\n// the result has size 3x1, project down to 1D vectors at each pixel (since the\n// second axis is pointless now), and then flatten back to a regular scalar\n// image.\nvar colored = unmixed\n  .arrayProject([0])\n  .arrayFlatten([['urban', 'veg', 'water']]);\nMap.setCenter(-98.4, 19, 11);\n\n// Load a hillshade to use as a backdrop.\nMap.addLayer(ee.Algorithms.Terrain(ee.Image('CGIAR/SRTM90_V4')).select('hillshade'));\nMap.addLayer(colored, {min: 0, max: 1},\n  'Unmixed (red=urban, green=veg, blue=water)');\n", "environment": "[]"}]}, {"name": "Charts", "contents": [{"name": "Column Histogram", "code": "// Plot histogram of biome names for the world's ecoregions.\n\nvar ecoregions = ee.FeatureCollection('RESOLVE/ECOREGIONS/2017');\n\n// Prepare the chart.  Specifying a minBucketWidth makes for nice bucket sizes.\nvar histogram =\n    ui.Chart.feature\n        .histogram(\n            {features: ecoregions, property: 'BIOME_NAME', minBucketWidth: 300})\n        .setOptions({title: 'Histogram of Ecoregion Biomes'});\n\nprint(histogram);\n\nMap.addLayer(ecoregions);\nMap.setCenter(0, 0, 2);\n", "environment": "[]"}, {"name": "Doy Series", "code": "// Generate day-of-year charts from Landsat 8 images.\n\nvar city = ee.Feature(    // San Francisco.\n    ee.Geometry.Rectangle(-122.42, 37.78, -122.4, 37.8),\n    {label: 'City'});\nvar forest = ee.Feature(  // Tahoe National Forest.\n    ee.Geometry.Rectangle(-121, 39.4, -120.99, 39.45),\n    {label: 'Forest'});\nvar desert = ee.Feature(  // Black Rock Desert.\n    ee.Geometry.Rectangle(-119.02, 40.95, -119, 41),\n    {label: 'Desert'});\nvar westernRegions = new ee.FeatureCollection([city, forest, desert]);\n\nvar landsat8Toa = ee.ImageCollection('LANDSAT/LC08/C01/T1_TOA')\n    .filterBounds(westernRegions);\nlandsat8Toa = landsat8Toa.select('B[1-7]');\n\n// Create a chart using a sequence of arguments.\nvar bands = ui.Chart.image.doySeries(landsat8Toa, forest, null, 200);\nprint(bands);\n\n// Create a chart using a dictionary of named arguments.\nvar years = ui.Chart.image.doySeriesByYear({\n  imageCollection: landsat8Toa,\n  bandName: 'B1',\n  region: forest,\n  scale: 200\n});\nprint(years);\n\nvar regions = ui.Chart.image.doySeriesByRegion({\n  imageCollection: landsat8Toa,\n  bandName: 'B1',\n  regions: westernRegions,\n  scale: 500,\n  seriesProperty: 'label'\n});\nprint(regions);\n\nMap.addLayer(westernRegions);\nMap.setCenter(-121, 39.4, 6);\n", "environment": "[]"}, {"name": "Elevation And Temperature", "code": "// Plot elevation and seasonal temperatures along SF-Reno transect.\n\nvar reno = [-119.821944, 39.527222];\nvar sf = [-122.416667, 37.783333];\nvar transect = ee.Geometry.LineString([reno, sf]);\n\n// Get brightness temperature data for 1 year.\nvar landsat8Toa = ee.ImageCollection('LANDSAT/LC08/C01/T1_TOA');\nvar temperature = landsat8Toa.filterBounds(transect)\n    .select(['B10'], ['temp'])\n    .map(function(image) {\n      // Kelvin to Celsius.\n      return image.subtract(273.15)\n          .set('system:time_start', image.get('system:time_start'));\n    });\n\n// Calculate bands for seasonal temperatures and elevations; composite into\n// a single image.\nvar summer = temperature.filterDate('2014-06-21', '2014-09-23')\n    .reduce(ee.Reducer.mean())\n    .select([0], ['summer']);\nvar winter = temperature.filterDate('2013-12-21', '2014-03-20')\n    .reduce(ee.Reducer.mean())\n    .select([0], ['winter']);\nvar elevation = ee.Image('USGS/NED');  // Extract the elevation profile.\nvar startingPoint = ee.FeatureCollection(ee.Geometry.Point(sf));\nvar distance = startingPoint.distance(500000);\nvar image = distance.addBands(elevation).addBands(winter).addBands(summer);\n\n// Extract band values along the transect line.\nvar array = image.reduceRegion(ee.Reducer.toList(), transect, 1000)\n                 .toArray(image.bandNames());\n\n// Sort points along the transect by their distance from the starting point.\nvar distances = array.slice(0, 0, 1);\narray = array.sort(distances);\n\n// Create arrays for charting.\nvar elevationAndTemp = array.slice(0, 1);  // For the Y axis.\n// Project distance slice to create a 1-D array for x-axis values.\nvar distance = array.slice(0, 0, 1).project([1]);\n\n// Generate and style the chart.\nvar chart = ui.Chart.array.values(elevationAndTemp, 1, distance)\n    .setChartType('LineChart')\n    .setSeriesNames(['Elevation', 'Winter 2014', 'Summer 2014'])\n    .setOptions({\n      title: 'Elevation and temperatures along SF-to-Reno transect',\n      vAxes: {\n        0: {\n          title: 'Average seasonal temperature (Celsius)'\n        },\n        1: {\n          title: 'Elevation (meters)',\n          baselineColor: 'transparent'\n        }\n      },\n      hAxis: {\n        title: 'Distance from SF (m)'\n      },\n      interpolateNulls: true,\n      pointSize: 0,\n      lineWidth: 1,\n      // Our chart has two Y axes: one for temperature and one for elevation.\n      // The Visualization API allows us to assign each series to a specific\n      // Y axis, which we do here:\n      series: {\n        0: {targetAxisIndex: 1},\n        1: {targetAxisIndex: 0},\n        2: {targetAxisIndex: 0}\n      }\n    });\n\nprint(chart);\nMap.setCenter(-121, 38.5, 7);\nMap.addLayer(elevation, {min: 4000, max: 0});\nMap.addLayer(transect, {color: 'FF0000'});\n", "environment": "[]"}, {"name": "Elevation Histogram", "code": "// Plot a histogram of elevation in Colorado.\n\nvar elevation = ee.Image('CGIAR/SRTM90_V4');\nvar colorado = ee.Geometry.Rectangle({\n  coords: [-109.05, 37, -102.05, 41],\n  geodesic: false\n});\n\n// Generate the histogram data.  Use minBucketWidth for nice sized buckets.\nvar histogram = ui.Chart.image.histogram({\n  image: elevation,\n  region: colorado,\n  scale: 200,\n  minBucketWidth: 300\n});\nhistogram.setOptions({\n  title: 'Histogram of Elevation in Colorado (meters)'\n});\n\nprint(histogram);\n\nMap.addLayer(elevation.clip(colorado));\nMap.setCenter(-107, 39, 6);\n", "environment": "[]"}, {"name": "Elevation Profile", "code": "// Plot elevation at waypoints along the Mt. Rainier summit trail.\n\nvar elevation = ee.Image('CGIAR/SRTM90_V4');\nvar waypoints = [\n  ee.Feature(\n      ee.Geometry.Point([-121.7353, 46.78622]),\n      {'name': 'Paradise Ranger Station'}),\n  ee.Feature(\n      ee.Geometry.Point([-121.72529, 46.8093]), {'name': 'Pebble Creek'}),\n  ee.Feature(\n      ee.Geometry.Point([-121.72585, 46.8102899]),\n      {'name': 'Start of Glacier'}),\n  ee.Feature(\n      ee.Geometry.Point([-121.7252699, 46.81202]), {'name': 'Glacier Point 1'}),\n  ee.Feature(\n      ee.Geometry.Point([-121.72453, 46.81661]), {'name': 'Glacier Point 2'}),\n  ee.Feature(\n      ee.Geometry.Point([-121.72508, 46.82262]), {'name': 'Little Africa'}),\n  ee.Feature(\n      ee.Geometry.Point([-121.7278699, 46.82648]), {'name': 'Moon Rocks'}),\n  ee.Feature(ee.Geometry.Point([-121.73281, 46.8354]), {'name': 'Camp Muir'}),\n  ee.Feature(ee.Geometry.Point([-121.75976, 46.85257]), {'name': 'Summit'})\n];\n\nvar rainierWaypoints = ee.FeatureCollection(waypoints);\n\nvar chart = ui.Chart.image.byRegion({\n  image: elevation,\n  regions: rainierWaypoints,\n  scale: 200,\n  xProperty: 'name'\n});\nchart.setOptions({\n  title: 'Mt. Rainier Summit Trail Elevation',\n  vAxis: {\n    title: 'Elevation (meters)'\n  },\n  legend: 'none',\n  lineWidth: 1,\n  pointSize: 4\n});\n\nprint(chart);\n\nMap.addLayer(elevation, {min: 500, max: 4500});\nMap.addLayer(rainierWaypoints, {color: 'FF0000'});\nMap.setCenter(-121.75976, 46.85257, 11);\n", "environment": "[]"}, {"name": "Image Spectra", "code": "// Plot band values at points in an image.\nvar landsat8Toa = ee.ImageCollection('LANDSAT/LC08/C01/T1_TOA');\n\nvar COLOR = {\n  PARK: 'ff0000',\n  FARM: '0000ff',\n  URBAN: '00ff00'\n};\n\n// Three known locations.\nvar park = ee.Feature(\n    ee.Geometry.Point(-99.25260, 19.32235), {'label': 'park'});\nvar farm = ee.Feature(\n    ee.Geometry.Point(-99.08992, 19.27868), {'label': 'farm'});\nvar urban = ee.Feature(\n    ee.Geometry.Point(-99.21135, 19.31860), {'label': 'urban'});\n\nvar mexicoPoints = ee.FeatureCollection([park, farm, urban]);\nlandsat8Toa = landsat8Toa.filterBounds(mexicoPoints);\n\nvar mexicoImage = ee.Image(landsat8Toa.first());\n\n// Select bands B1 to B7.\nmexicoImage = mexicoImage.select(['B[1-7]']);\n\nvar bandChart = ui.Chart.image.regions({\n  image: mexicoImage,\n  regions: mexicoPoints,\n  scale: 30,\n  seriesProperty: 'label'\n});\nbandChart.setChartType('LineChart');\nbandChart.setOptions({\n  title: 'Landsat 8 TOA band values at three points near Mexico City',\n  hAxis: {\n    title: 'Band'\n  },\n  vAxis: {\n    title: 'Reflectance'\n  },\n  lineWidth: 1,\n  pointSize: 4,\n  series: {\n    0: {color: COLOR.PARK},\n    1: {color: COLOR.FARM},\n    2: {color: COLOR.URBAN}\n  }\n});\n\n// From: https://landsat.usgs.gov/what-are-best-spectral-bands-use-my-study\nvar wavelengths = [.44, .48, .56, .65, .86, 1.61, 2.2];\n\nvar spectraChart = ui.Chart.image.regions({\n  image: mexicoImage,\n  regions: mexicoPoints,\n  scale: 30,\n  seriesProperty: 'label',\n  xLabels: wavelengths\n});\nspectraChart.setChartType('LineChart');\nspectraChart.setOptions({\n  title: 'Landsat 8 TOA spectra at three points near Mexico City',\n  hAxis: {\n    title: 'Wavelength (micrometers)'\n  },\n  vAxis: {\n    title: 'Reflectance'\n  },\n  lineWidth: 1,\n  pointSize: 4,\n  series: {\n    0: {color: COLOR.PARK},\n    1: {color: COLOR.FARM},\n    2: {color: COLOR.URBAN}\n  }\n});\n\nprint(bandChart);\nprint(spectraChart);\n\nMap.addLayer(park, {color: COLOR.PARK});\nMap.addLayer(farm, {color: COLOR.FARM});\nMap.addLayer(urban, {color: COLOR.URBAN});\nMap.setCenter(-99.25260, 19.32235, 11);\n", "environment": "[]"}, {"name": "Image Time Series", "code": "// Plot Landsat 8 band value means in a section of San Francisco and\n// demonstrate interactive charts.\n\nvar sanFrancisco =\n    ee.Geometry.Rectangle(-122.45, 37.74, -122.4, 37.8);\n\nvar landsat8Toa = ee.ImageCollection('LANDSAT/LC08/C01/T1_TOA')\n    .filterDate('2015-12-25', '2016-12-25')\n    .select('B[1-7]');\n\n// Create an image time series chart.\nvar chart = ui.Chart.image.series({\n  imageCollection: landsat8Toa,\n  region: sanFrancisco,\n  reducer: ee.Reducer.mean(),\n  scale: 200\n});\n\n// Add the chart to the map.\nchart.style().set({\n  position: 'bottom-right',\n  width: '500px',\n  height: '300px'\n});\nMap.add(chart);\n\n// Outline and center San Francisco on the map.\nvar sfLayer = ui.Map.Layer(sanFrancisco, {color: 'FF0000'}, 'SF');\nMap.layers().add(sfLayer);\nMap.setCenter(-122.47, 37.7, 9);\n\n// Create a label on the map.\nvar label = ui.Label('Click a point on the chart to show the image for that date.');\nMap.add(label);\n\n// When the chart is clicked, update the map and label.\nchart.onClick(function(xValue, yValue, seriesName) {\n  if (!xValue) return;  // Selection was cleared.\n\n  // Show the image for the clicked date.\n  var equalDate = ee.Filter.equals('system:time_start', xValue);\n  var image = ee.Image(landsat8Toa.filter(equalDate).first());\n  var l8Layer = ui.Map.Layer(image, {\n    gamma: 1.3,\n    min: 0,\n    max: 0.3,\n    bands: ['B4', 'B3', 'B2']\n  });\n  Map.layers().reset([l8Layer, sfLayer]);\n\n  // Show a label with the date on the map.\n  label.setValue((new Date(xValue)).toUTCString());\n});\n", "environment": "[]"}, {"name": "Image Time Series By Region", "code": "// Plot a time series of a band's value in regions of the American West.\n\nvar COLOR = {\n  CITY: 'ff0000',\n  DESERT: '0000ff',\n  FOREST: '00ff00'\n};\n\nvar city = ee.Feature(    // San Francisco.\n    ee.Geometry.Rectangle(-122.45, 37.74, -122.4, 37.8),\n    {label: 'City'});\nvar forest = ee.Feature(  // Tahoe National Forest.\n    ee.Geometry.Rectangle(-121, 39.4, -120.8, 39.8),\n    {label: 'Forest'});\nvar desert = ee.Feature(  // Black Rock Desert.\n    ee.Geometry.Rectangle(-119.15, 40.8, -119, 41),\n    {label: 'Desert'});\nvar westernRegions = new ee.FeatureCollection([city, forest, desert]);\n\n// Get brightness temperature data for 1 year.\nvar landsat8Toa = ee.ImageCollection('LANDSAT/LC08/C01/T1_TOA');\nvar temps2013 = landsat8Toa.filterBounds(westernRegions)\n    .filterDate('2015-12-25', '2016-12-25')\n    .select('B10');\n\n// Convert temperature to Celsius.\ntemps2013 = temps2013.map(function(image) {\n  return image.addBands(image.subtract(273.15).select([0], ['Temp']));\n});\n\nvar tempTimeSeries = ui.Chart.image.seriesByRegion({\n  imageCollection: temps2013,\n  regions: westernRegions,\n  reducer: ee.Reducer.mean(),\n  band: 'Temp',\n  scale: 200,\n  xProperty: 'system:time_start',\n  seriesProperty: 'label'\n});\ntempTimeSeries.setChartType('ScatterChart');\ntempTimeSeries.setOptions({\n  title: 'Temperature over time in regions of the American West',\n  vAxis: {\n    title: 'Temperature (Celsius)'\n  },\n  lineWidth: 1,\n  pointSize: 4,\n  series: {\n    0: {color: COLOR.CITY},\n    1: {color: COLOR.FOREST},\n    2: {color: COLOR.DESERT}\n  }\n});\n\nprint(tempTimeSeries);\n\nMap.addLayer(desert, {color: COLOR.DESERT});\nMap.addLayer(forest, {color: COLOR.FOREST});\nMap.addLayer(city, {color: COLOR.CITY});\nMap.setCenter(-121, 39.4, 6);\n", "environment": "[]"}, {"name": "Seasonal Temperatures", "code": "// Plot average seasonal temperatures in US States.\n\n// Import US state boundaries.\nvar states = ee.FeatureCollection('TIGER/2018/States');\n\n// Import temperature normals and convert month features to bands.\nvar normClim = ee.ImageCollection('OREGONSTATE/PRISM/Norm81m')\n  .select(['tmean'])\n  .toBands();\n\n// Calculate mean monthly temperature per state.\nstates = normClim.reduceRegions({\n  collection: states,\n  reducer: ee.Reducer.mean(),\n  scale: 5e4})\n  .filter(ee.Filter.notNull(['01_tmean']));\n\n// Calculate Jan to Jul temperature difference per state and set as a property.\nstates = states.map(function(state) {\n  var julyTemp = ee.Number(state.get('06_tmean'));\n  var janTemp = ee.Number(state.get('01_tmean'));\n  return state.set('seasonal_delta', julyTemp.subtract(janTemp));\n});\n\n// Select the extreme states.\nvar extremeStates =\n  states.limit(1, '01_tmean')                 // Coldest.\n  .merge(states.limit(1, '07_tmean', false))  // Hottest.\n  .merge(states.limit(1, 'seasonal_delta'));  // Least variation.\n\n// Define properties to chart.\nvar months = {\n  '01_tmean': 1,\n  '04_tmean': 4,\n  '07_tmean': 7,\n  '10_tmean': 10\n};\n\n// Prepare the chart.\nvar extremeTempsChart =\n  ui.Chart.feature.byProperty(extremeStates, months, 'NAME')\n    .setChartType('LineChart')\n    .setOptions({\n      title: 'Average Temperatures in U.S. States',\n      hAxis: {\n        title: 'Month',\n        ticks: [{v: months['01_tmean'], f: 'January'},\n                {v: months['04_tmean'], f: 'April'},\n                {v: months['07_tmean'], f: 'July'},\n                {v: months['10_tmean'], f: 'October'}]\n      },\n      vAxis: {\n        title: 'Temperature (Celsius)'\n      },\n      lineWidth: 1,\n      pointSize: 3\n    });\n\nprint(extremeTempsChart);\n", "environment": "[]"}, {"name": "Temperature Disparity", "code": "// Plot min to max temperature disparity in US states.\n\n// Import US state boundaries.\nvar states = ee.FeatureCollection('TIGER/2018/States');\n\n// Import temperature normals and calculate annual mean of monthly min and max.\nvar normClim = ee.ImageCollection('OREGONSTATE/PRISM/Norm81m')\n  .select(['tmin', 'tmax'])\n  .mean();\n\n// Calculate mean max and min temperature per state.\nstates = normClim.reduceRegions({\n  collection: states,\n  reducer: ee.Reducer.mean(),\n  scale: 5e4})\n  .filter(ee.Filter.notNull(['tmax', 'tmin']));\n\n// Calculate max to min temperature difference per state and set as a property.\nstates = states.map(function(state){\n  var dif = state.getNumber('tmax').subtract(state.getNumber('tmin'));\n  return state.set('tdif', dif);\n})\n.filter(ee.Filter.notNull(['tdif']));\n\n// Get states with the greatest mean max and min temperature disparity.\nvar greatestDif = states.limit(6, 'tdif', false);\n\n// Define color properties for chart series.\nvar color = {\n  high: 'ff0000',\n  low: '0000ff'\n};\n\n// Prepare the chart.\nvar greatestDifChart =\n  ui.Chart.feature.byFeature(greatestDif, 'NAME', ['tmax', 'tmin'])\n    .setChartType('LineChart')\n    .setOptions({\n      title: 'States with Greatest Temperature Disparity',\n      vAxis: {\n        title: 'Temperature (Celsius)'\n      },\n      lineWidth: 1,\n      pointSize: 4,\n      series: {\n        0: {color: color.high},\n        1: {color: color.low}\n      }\n    });\n\n\n\n// The Chart.feature helper functions plot property values in different ways.\n// Chart.feature.byFeatures() allows us to plot *features* on the x-axis, with\n// a separate series for each *property*. Chart.feature.byProperties() puts\n// *properties* on the x-axis, with a separate series for each *feature*.\n// Chart.feature.groups() gives us a little more flexibility. It lets us specify\n// a custom xProperty and a custom seriesProperty. The *values* of these\n// properties determine the x-axis and series values for each feature. In this\n// case, to plot min and max temps in by disparity, we need a separate feature\n// for each low and each high. On the chart the X values are difference and the\n// series names indicates low and high temperature.\n\n// Define a function to set a temp and series property.\nvar individualTemps = function(label) {\n  return states.map(function(feature) {\n    return feature.set({\n      temp: feature.get(label),\n      series: label\n    });\n  });\n};\n\n// Make min and max collections using and merge them.\nvar highs = individualTemps('tmax');\nvar lows = individualTemps('tmin');\nvar tempsByDif = highs.merge(lows);\n\n// Prepare the chart.\nvar tempsByDifChart =\n  ui.Chart.feature.groups(tempsByDif, 'tdif', 'temp', 'series')\n    .setChartType('ScatterChart')\n    .setOptions({\n      title: 'Mean Temperature Disparity US States',\n      hAxis: {\n        title: 'Temperature disparity'\n      },\n      vAxis: {\n        title: 'Temperature (Celsius)'\n      },\n      pointSize: 4,\n      series: {\n        0: {color: color.high},\n        1: {color: color.low}\n      }\n    });\n\nprint(greatestDifChart);\nprint(tempsByDifChart);\n", "environment": "[]"}]}, {"name": "Cloud Masking", "contents": [{"name": "Landsat457 Surface Reflectance", "code": "// This example demonstrates the use of the Landsat 4, 5, 7 Collection 2,\n// Level 2 QA_PIXEL band (CFMask) to mask unwanted pixels.\n\nfunction maskL457sr(image) {\n  // Bit 0 - Fill\n  // Bit 1 - Dilated Cloud\n  // Bit 2 - Unused\n  // Bit 3 - Cloud\n  // Bit 4 - Cloud Shadow\n  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);\n  var saturationMask = image.select('QA_RADSAT').eq(0);\n\n  // Apply the scaling factors to the appropriate bands.\n  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);\n  var thermalBand = image.select('ST_B6').multiply(0.00341802).add(149.0);\n\n  // Replace the original bands with the scaled ones and apply the masks.\n  return image.addBands(opticalBands, null, true)\n      .addBands(thermalBand, null, true)\n      .updateMask(qaMask)\n      .updateMask(saturationMask);\n}\n\n// Map the function over one year of data.\nvar collection = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')\n                     .filterDate('2010-01-01', '2011-01-01')\n                     .map(maskL457sr);\n\nvar composite = collection.median();\n\n// Display the results.\nMap.setCenter(-4.52, 40.29, 7);  // Iberian Peninsula\nMap.addLayer(composite, {bands: ['SR_B3', 'SR_B2', 'SR_B1'], min: 0, max: 0.3});\n", "environment": "[]"}, {"name": "Landsat8 Surface Reflectance", "code": "// This example demonstrates the use of the Landsat 8 Collection 2, Level 2\n// QA_PIXEL band (CFMask) to mask unwanted pixels.\n\nfunction maskL8sr(image) {\n  // Bit 0 - Fill\n  // Bit 1 - Dilated Cloud\n  // Bit 2 - Cirrus\n  // Bit 3 - Cloud\n  // Bit 4 - Cloud Shadow\n  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);\n  var saturationMask = image.select('QA_RADSAT').eq(0);\n\n  // Apply the scaling factors to the appropriate bands.\n  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);\n  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);\n\n  // Replace the original bands with the scaled ones and apply the masks.\n  return image.addBands(opticalBands, null, true)\n      .addBands(thermalBands, null, true)\n      .updateMask(qaMask)\n      .updateMask(saturationMask);\n}\n\n// Map the function over one year of data.\nvar collection = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')\n                     .filterDate('2020-01-01', '2021-01-01')\n                     .map(maskL8sr);\n\nvar composite = collection.median();\n\n// Display the results.\nMap.setCenter(-4.52, 40.29, 7);  // Iberian Peninsula\nMap.addLayer(composite, {bands: ['SR_B4', 'SR_B3', 'SR_B2'], min: 0, max: 0.3});\n", "environment": "[]"}, {"name": "Landsat8 TOA Reflectance QA Band", "code": "// This example demonstrates the use of the Landsat 8 QA band to mask clouds.\n\n// Function to mask clouds using the quality band of Landsat 8.\nvar maskL8 = function(image) {\n  var qa = image.select('BQA');\n  /// Check that the cloud bit is off.\n  // See https://www.usgs.gov/land-resources/nli/landsat/landsat-collection-1-level-1-quality-assessment-band\n  var mask = qa.bitwiseAnd(1 \u003c\u003c 4).eq(0);\n  return image.updateMask(mask);\n}\n\n// Map the function over one year of Landsat 8 TOA data and take the median.\nvar composite = ee.ImageCollection('LANDSAT/LC08/C01/T1_TOA')\n    .filterDate('2016-01-01', '2016-12-31')\n    .map(maskL8)\n    .median();\n\n// Display the results in a cloudy place.\nMap.setCenter(114.1689, 22.2986, 12);\nMap.addLayer(composite, {bands: ['B4', 'B3', 'B2'], max: 0.3});\n", "environment": "[]"}, {"name": "MODIS Surface Reflectance QA Band", "code": "// Modis Cloud Masking example.\n// Calculate how frequently a location is labeled as clear (i.e. non-cloudy)\n// according to the \"internal cloud algorithm flag\" of the MODIS \"state 1km\"\n// QA band.\n\n// A function to mask out pixels that did not have observations.\nvar maskEmptyPixels = function(image) {\n  // Find pixels that had observations.\n  var withObs = image.select('num_observations_1km').gt(0)\n  return image.updateMask(withObs)\n}\n\n// A function to mask out cloudy pixels.\nvar maskClouds = function(image) {\n  // Select the QA band.\n  var QA = image.select('state_1km')\n  // Make a mask to get bit 10, the internal_cloud_algorithm_flag bit.\n  var bitMask = 1 \u003c\u003c 10;\n  // Return an image masking out cloudy areas.\n  return image.updateMask(QA.bitwiseAnd(bitMask).eq(0))\n}\n\n// Start with an image collection for a 1 month period.\n// and mask out areas that were not observed.\nvar collection = ee.ImageCollection('MODIS/006/MOD09GA')\n        .filterDate('2010-04-01', '2010-05-01')\n        .map(maskEmptyPixels)\n\n// Get the total number of potential observations for the time interval.\nvar totalObsCount = collection\n        .select('num_observations_1km')\n        .count()\n\n// Map the cloud masking function over the collection.\nvar collectionCloudMasked = collection.map(maskClouds)\n\n// Get the total number of observations for non-cloudy pixels for the time\n// interval.  The result is unmasked to set to unity so that all locations\n// have counts, and the ratios later computed have values everywhere.\nvar clearObsCount = collectionCloudMasked\n        .select('num_observations_1km')\n        .count()\n        .unmask(0)\n\nMap.addLayer(\n    collectionCloudMasked.median(),\n    {bands: ['sur_refl_b01', 'sur_refl_b04', 'sur_refl_b03'],\n     gain: 0.07,\n     gamma: 1.4\n    },\n    'median of masked collection'\n  )\nMap.addLayer(\n    totalObsCount,\n    {min: 84, max: 92},\n    'count of total observations',\n    false\n  )\nMap.addLayer(\n    clearObsCount,\n    {min: 0, max: 90},\n    'count of clear observations',\n    false\n  )\nMap.addLayer(\n    clearObsCount.toFloat().divide(totalObsCount),\n    {min: 0, max: 1},\n    'ratio of clear to total observations'\n  )\n\n\n", "environment": "[]"}, {"name": "Sentinel2", "code": "// This example uses the Sentinel-2 QA band to cloud mask\n// the collection.  The Sentinel-2 cloud flags are less\n// selective, so the collection is also pre-filtered by the\n// CLOUDY_PIXEL_PERCENTAGE flag, to use only relatively\n// cloud-free granule.\n\n// Function to mask clouds using the Sentinel-2 QA band.\nfunction maskS2clouds(image) {\n  var qa = image.select('QA60')\n\n  // Bits 10 and 11 are clouds and cirrus, respectively.\n  var cloudBitMask = 1 \u003c\u003c 10;\n  var cirrusBitMask = 1 \u003c\u003c 11;\n\n  // Both flags should be set to zero, indicating clear conditions.\n  var mask = qa.bitwiseAnd(cloudBitMask).eq(0).and(\n             qa.bitwiseAnd(cirrusBitMask).eq(0))\n\n  // Return the masked and scaled data, without the QA bands.\n  return image.updateMask(mask).divide(10000)\n      .select(\"B.*\")\n      .copyProperties(image, [\"system:time_start\"])\n}\n\n// Map the function over one year of data and take the median.\n// Load Sentinel-2 TOA reflectance data.\nvar collection = ee.ImageCollection('COPERNICUS/S2')\n    .filterDate('2016-01-01', '2016-12-31')\n    // Pre-filter to get less cloudy granules.\n    .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))\n    .map(maskS2clouds)\n\nvar composite = collection.median()\n\n// Display the results.\nMap.addLayer(composite, {bands: ['B4', 'B3', 'B2'], min: 0, max: 0.3}, 'RGB')\n", "environment": "[]"}, {"name": "Sentinel2 Cloud And Shadow", "code": "// This example demonstrates the use of the\n// COPERNICUS/S2_CLOUD_PROBABILITY dataset, the\n// ee.Algorithms.Sentinel2.CDI() method for computing a\n// cloud displacement index and directionalDistanceTransform()\n// for computing cloud shadows.\n//\n// See a similar script for the Python API here:\n// https://developers.google.com/earth-engine/tutorials/community/sentinel-2-s2cloudless\n\n\n// Sentinel-2 Level 1C data.  Bands B7, B8, B8A and B10 from this\n// dataset are needed as input to CDI and the cloud mask function.\nvar s2 = ee.ImageCollection('COPERNICUS/S2');\n// Cloud probability dataset.  The probability band is used in\n// the cloud mask function.\nvar s2c = ee.ImageCollection('COPERNICUS/S2_CLOUD_PROBABILITY');\n// Sentinel-2 surface reflectance data for the composite.\nvar s2Sr = ee.ImageCollection('COPERNICUS/S2_SR');\n\n// The ROI is determined from the map.\nvar roi = ee.Geometry.Point([-122.4431, 37.7498]);\nMap.centerObject(roi, 11);\n\n// Dates over which to create a median composite.\nvar start = ee.Date('2019-03-01');\nvar end = ee.Date('2019-09-01');\n\n// S2 L1C for Cloud Displacement Index (CDI) bands.\ns2 = s2.filterBounds(roi).filterDate(start, end)\n    .select(['B7', 'B8', 'B8A', 'B10']);\n// S2Cloudless for the cloud probability band.\ns2c = s2c.filterDate(start, end).filterBounds(roi);\n// S2 L2A for surface reflectance bands.\ns2Sr = s2Sr.filterDate(start, end).filterBounds(roi)\n    .select(['B2', 'B3', 'B4', 'B5']);\n\n// Join two collections on their 'system:index' property.\n// The propertyName parameter is the name of the property\n// that references the joined image.\nfunction indexJoin(collectionA, collectionB, propertyName) {\n  var joined = ee.ImageCollection(ee.Join.saveFirst(propertyName).apply({\n    primary: collectionA,\n    secondary: collectionB,\n    condition: ee.Filter.equals({\n      leftField: 'system:index',\n      rightField: 'system:index'})\n  }));\n  // Merge the bands of the joined image.\n  return joined.map(function(image) {\n    return image.addBands(ee.Image(image.get(propertyName)));\n  });\n}\n\n// Aggressively mask clouds and shadows.\nfunction maskImage(image) {\n  // Compute the cloud displacement index from the L1C bands.\n  var cdi = ee.Algorithms.Sentinel2.CDI(image);\n  var s2c = image.select('probability');\n  var cirrus = image.select('B10').multiply(0.0001);\n\n  // Assume low-to-mid atmospheric clouds to be pixels where probability\n  // is greater than 65%, and CDI is less than -0.5. For higher atmosphere\n  // cirrus clouds, assume the cirrus band is greater than 0.01.\n  // The final cloud mask is one or both of these conditions.\n  var isCloud = s2c.gt(65).and(cdi.lt(-0.5)).or(cirrus.gt(0.01));\n\n  // Reproject is required to perform spatial operations at 20m scale.\n  // 20m scale is for speed, and assumes clouds don't require 10m precision.\n  isCloud = isCloud.focal_min(3).focal_max(16);\n  isCloud = isCloud.reproject({crs: cdi.projection(), scale: 20});\n\n  // Project shadows from clouds we found in the last step. This assumes we're working in\n  // a UTM projection.\n  var shadowAzimuth = ee.Number(90)\n      .subtract(ee.Number(image.get('MEAN_SOLAR_AZIMUTH_ANGLE')));\n\n  // With the following reproject, the shadows are projected 5km.\n  isCloud = isCloud.directionalDistanceTransform(shadowAzimuth, 50);\n  isCloud = isCloud.reproject({crs: cdi.projection(), scale: 100});\n\n  isCloud = isCloud.select('distance').mask();\n  return image.select('B2', 'B3', 'B4').updateMask(isCloud.not());\n}\n\n// Join the cloud probability dataset to surface reflectance.\nvar withCloudProbability = indexJoin(s2Sr, s2c, 'cloud_probability');\n// Join the L1C data to get the bands needed for CDI.\nvar withS2L1C = indexJoin(withCloudProbability, s2, 'l1c');\n\n// Map the cloud masking function over the joined collection.\nvar masked = ee.ImageCollection(withS2L1C.map(maskImage));\n\n// Take the median, specifying a tileScale to avoid memory errors.\nvar median = masked.reduce(ee.Reducer.median(), 8);\n\n// Display the results.\nvar viz = {bands: ['B4_median', 'B3_median', 'B2_median'], min: 0, max: 3000};\nMap.addLayer(median, viz, 'median');\n", "environment": "[]"}]}, {"name": "Code Editor", "contents": [{"name": "Map Center Object", "code": "// Center the map on an image.\n\nvar image = ee.Image('LANDSAT/LC08/C01/T1/LC08_044034_20130603');\nMap.addLayer(image, {bands: ['B4', 'B3', 'B2'], max: 20000});\nMap.centerObject(image);\n", "environment": "[]"}, {"name": "Map Style", "code": "// Set a custom basemap style and default to the satellite map type.\nvar styles = {\n  'Soft Blue': [\n    {\n      featureType: 'all',\n      stylers: [\n        { saturation: -80 }\n      ]\n    },{\n      featureType: 'road.arterial',\n      elementType: 'geometry',\n      stylers: [\n        { hue: '#00ffee' },\n        { saturation: 50 }\n      ]\n    },{\n      featureType: 'poi.business',\n      elementType: 'labels',\n      stylers: [\n        { visibility: 'off' }\n      ]\n    }\n  ]\n};\n\nMap.setOptions('satellite', styles);\n", "environment": "[]"}]}, {"name": "Datasets", "contents": [{"name": "AAFC_ACI", "code": "var dataset = ee.ImageCollection('AAFC/ACI');\nvar crop2016 = dataset\n    .filter(ee.Filter.date('2016-01-01', '2016-12-31'))\n    .first();\nMap.setCenter(-103.8881, 53.0371, 10);\nMap.addLayer(crop2016);\n", "environment": "[]"}, {"name": "ACA_reef_habitat_v1_0", "code": "var dataset = ee.Image(\"ACA/reef_habitat/v1_0\");\n\n// Teti'aroa, an atoll in French Polynesia\nMap.setCenter(-149.56194, -17.00872, 13);\nMap.setOptions('SATELLITE');\n\n// Mitch: The visualisations are baked into the image properties\n\n// Benthic habitat classification\nvar benthic_habitat = dataset.select('benthic').selfMask();\nMap.addLayer(benthic_habitat, {}, \"Benthic habitat map\");\n\n// Geomorphic zonation classification\nvar geomorphic_zonation = dataset.select('geomorphic').selfMask();\nMap.addLayer(geomorphic_zonation, {}, \"Geomorphic zonation map\");\n\n// Example mask application\nvar global_mask = dataset.select('reef_mask').selfMask();\nMap.addLayer(global_mask, {}, \"Global reporting reef mask\");\nMap.addLayer(\n    geomorphic_zonation.updateMask(global_mask), {},\n    \"Geomorphic map (global mask applied)\");\n", "environment": "[]"}, {"name": "AHN_AHN2_05M_INT", "code": "var dataset = ee.Image('AHN/AHN2_05M_INT');\nvar elevation = dataset.select('elevation');\nvar elevationVis = {\n  min: -5.0,\n  max: 30.0,\n};\nMap.setCenter(5.76583, 51.855276, 16);\nMap.addLayer(elevation, elevationVis, 'Elevation');\n", "environment": "[]"}, {"name": "AHN_AHN2_05M_NON", "code": "var dataset = ee.Image('AHN/AHN2_05M_NON');\nvar elevation = dataset.select('elevation');\nvar elevationVis = {\n  min: -5.0,\n  max: 30.0,\n};\nMap.setCenter(5.80258, 51.78547, 14);\nMap.addLayer(elevation, elevationVis, 'Elevation');", "environment": "[]"}, {"name": "AHN_AHN2_05M_RUW", "code": "var dataset = ee.Image('AHN/AHN2_05M_RUW');\nvar elevation = dataset.select('elevation');\nvar elevationVis = {\n  min: -5.0,\n  max: 30.0,\n};\nMap.setCenter(5.76583, 51.855276, 16);\nMap.addLayer(elevation, elevationVis, 'Elevation');\n", "environment": "[]"}, {"name": "ASTER_AST_L1T_003", "code": "var dataset = ee.ImageCollection('ASTER/AST_L1T_003')\n                  .filter(ee.Filter.date('2018-01-01', '2018-08-15'));\nvar falseColor = dataset.select(['B3N', 'B02', 'B01']);\nvar falseColorVis = {\n  min: 0.0,\n  max: 255.0,\n};\nMap.setCenter(-122.0272, 39.6734, 11);\nMap.addLayer(falseColor.median(), falseColorVis, 'False Color');\n", "environment": "[]"}, {"name": "AU_GA_AUSTRALIA_5M_DEM", "code": "var dataset = ee.ImageCollection('AU/GA/AUSTRALIA_5M_DEM');\nvar elevation = dataset.select('elevation');\nvar elevationVis = {\n  min: 0.0,\n  max: 150.0,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff'],\n};\nMap.setCenter(140.1883, -35.9113, 8);\nMap.addLayer(elevation, elevationVis, 'Elevation');\n", "environment": "[]"}, {"name": "AU_GA_DEM_1SEC_v10_DEM-H", "code": "var dataset = ee.Image('AU/GA/DEM_1SEC/v10/DEM-H');\nvar elevation = dataset.select('elevation');\nvar elevationVis = {\n  min: -10.0,\n  max: 1300.0,\n  palette: [\n    '3ae237', 'b5e22e', 'd6e21f', 'fff705', 'ffd611', 'ffb613', 'ff8b13',\n    'ff6e08', 'ff500d', 'ff0000', 'de0101', 'c21301', '0602ff', '235cb1',\n    '307ef3', '269db1', '30c8e2', '32d3ef', '3be285', '3ff38f', '86e26f'\n  ],\n};\nMap.setCenter(133.95, -24.69, 5);\nMap.addLayer(elevation, elevationVis, 'Elevation');\n", "environment": "[]"}, {"name": "AU_GA_DEM_1SEC_v10_DEM-S", "code": "var dataset = ee.Image('AU/GA/DEM_1SEC/v10/DEM-S');\nvar elevation = dataset.select('elevation');\nvar elevationVis = {\n  min: -10.0,\n  max: 1300.0,\n  palette: [\n    '3ae237', 'b5e22e', 'd6e21f', 'fff705', 'ffd611', 'ffb613', 'ff8b13',\n    'ff6e08', 'ff500d', 'ff0000', 'de0101', 'c21301', '0602ff', '235cb1',\n    '307ef3', '269db1', '30c8e2', '32d3ef', '3be285', '3ff38f', '86e26f'\n  ],\n};\nMap.setCenter(133.95, -24.69, 5);\nMap.addLayer(elevation, elevationVis, 'Elevation');\n", "environment": "[]"}, {"name": "BIOPAMA_GlobalOilPalm_v1", "code": "// Import the dataset; a collection of composite granules from 2019.\nvar dataset = ee.ImageCollection('BIOPAMA/GlobalOilPalm/v1');\n\n// Select the classification band.\nvar opClass = dataset.select('classification');\n\n// Mosaic all of the granules into a single image.\nvar mosaic = opClass.mosaic();\n\n// Define visualization parameters.\nvar classificationVis = {\n  min: 1,\n  max: 3,\n  palette: ['ff0000','ef00ff', '696969']\n};\n\n// Create a mask to add transparency to non-oil palm plantation class pixels.\nvar mask = mosaic.neq(3);\nmask = mask.where(mask.eq(0), 0.6);\n\n// Display the data on the map.\nMap.addLayer(mosaic.updateMask(mask),\n             classificationVis, 'Oil palm plantation type', true);\nMap.setCenter(-3.0175, 5.2745,12);\n", "environment": "[]"}, {"name": "BLM_AIM_v1_TerrADat_TerrestrialAIM", "code": "var greens = ee.List([\n  '#00441B', '#00682A', '#37A055', '#5DB96B', '#AEDEA7', '#E7F6E2', '#F7FCF5'\n]);\nvar reds = ee.List([\n  '#67000D', '#9E0D14', '#E32F27', '#F6553D', '#FCA082', '#FEE2D5', '#FFF5F0'\n]);\n\nfunction normalize(value, min, max) {\n  return value.subtract(min).divide(ee.Number(max).subtract(min));\n}\n\nfunction setColor(feature, property, min, max, palette) {\n  var value = normalize(feature.getNumber(property), min, max)\n                  .multiply(palette.size())\n                  .min(palette.size().subtract(1))\n                  .max(0);\n  return feature.set({style: {color: palette.get(value.int())}});\n}\n\nvar fc = ee.FeatureCollection('BLM/AIM/v1/TerrADat/TerrestrialAIM');\nvar woodyHeightStyle = function(f) {\n  return setColor(f, 'WoodyHgt_Avg', 0, 100, greens);\n};\nvar bareSoilStyle = function(f) {\n  return setColor(f, 'BareSoilCover_FH', 0, 100, reds);\n};\n\nvar treeHeight = fc.filter('WoodyHgt_Avg \u003e 1').map(woodyHeightStyle);\nvar bareSoil = fc.filter('BareSoilCover_FH \u003e 1').map(bareSoilStyle);\n\nMap.addLayer(bareSoil.style({styleProperty: 'style', pointSize: 3}));\nMap.addLayer(treeHeight.style({styleProperty: 'style', pointSize: 1}));\n\nMap.setCenter(-110, 40, 6);\n", "environment": "[]"}, {"name": "BLM_AIM_v1_TerrADat_TerrestrialAIM_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer(\n  'BLM/AIM/v1/TerrADat/TerrestrialAIM_FeatureView');\n\nvar visParams = {\n  isVisible: false,\n  pointSize: 7,\n  rules: [\n    {\n      filter: ee.Filter.expression('WoodyHgt_Avg \u003e 1'),\n      isVisible: true,\n      color: {\n        property: 'WoodyHgt_Avg',\n        mode: 'linear',\n        palette: ['00441B', '00682A', '37A055', '5DB96B',\n                  'AEDEA7', 'E7F6E2', 'F7FCF5'],\n        min: 0,\n        max: 100\n      }\n    }\n  ]\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Average woody plant height');\n\nMap.setCenter(-110, 40, 6);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "CAS_IGSNRR_PML_V2", "code": "var dataset = ee.ImageCollection('CAS/IGSNRR/PML/V2');\n\nvar visualization = {\n  bands: ['GPP'],\n  min: 0.0,\n  max: 9.0,\n  palette: [\n    'a50026', 'd73027', 'f46d43', 'fdae61', 'fee08b', 'ffffbf',\n    'd9ef8b', 'a6d96a', '66bd63', '1a9850', '006837',\n  ]\n};\n\nMap.setCenter(0.0, 15.0, 2);\n\nMap.addLayer(\n    dataset, visualization, 'PML_V2 0.1.4 Gross Primary Product (GPP)');\n", "environment": "[]"}, {"name": "CAS_IGSNRR_PML_V2_v017", "code": "var dataset = ee.ImageCollection('CAS/IGSNRR/PML/V2_v017');\n\nvar visualization = {\n  bands: ['GPP'],\n  min: 0.0,\n  max: 9.0,\n  palette: [\n    'a50026', 'd73027', 'f46d43', 'fdae61', 'fee08b', 'ffffbf',\n    'd9ef8b', 'a6d96a', '66bd63', '1a9850', '006837',\n  ]\n};\n\nMap.setCenter(0.0, 15.0, 2);\n\nMap.addLayer(\n    dataset, visualization, 'PML_V2 0.1.7 Gross Primary Product (GPP)');\n", "environment": "[]"}, {"name": "CGIAR_SRTM90_V4", "code": "var dataset = ee.Image('CGIAR/SRTM90_V4');\nvar elevation = dataset.select('elevation');\nvar slope = ee.Terrain.slope(elevation);\nMap.setCenter(-112.8598, 36.2841, 10);\nMap.addLayer(slope, {min: 0, max: 60}, 'slope');\n", "environment": "[]"}, {"name": "CIESIN_GPWv411_GPW_Basic_Demographic_Characteristics", "code": "var dataset = ee.ImageCollection(\"CIESIN/GPWv411/GPW_Basic_Demographic_Characteristics\").first();\nvar raster = dataset.select('basic_demographic_characteristics');\nvar raster_vis = {\n  \"max\": 1000.0,\n  \"palette\": [\n    \"ffffe7\",\n    \"86a192\",\n    \"509791\",\n    \"307296\",\n    \"2c4484\",\n    \"000066\"\n  ],\n  \"min\": 0.0\n};\nMap.setCenter(79.1, 19.81, 3);\nMap.addLayer(raster, raster_vis, 'basic_demographic_characteristics');\n\n", "environment": "[]"}, {"name": "CIESIN_GPWv411_GPW_Data_Context", "code": "var dataset = ee.Image(\"CIESIN/GPWv411/GPW_Data_Context\");\nvar raster = dataset.select('data_context');\nvar raster_vis = {\n  \"min\": 200.0,\n  \"palette\": [\n    \"ffffff\",\n    \"099506\",\n    \"f04923\",\n    \"e62440\",\n    \"706984\",\n    \"a5a5a5\",\n    \"ffe152\",\n    \"d4cc11\",\n    \"000000\"\n  ],\n  \"max\": 207.0\n};\nMap.setCenter(-88.6, 26.4, 1);\nMap.addLayer(raster, raster_vis, 'data_context');\n\n", "environment": "[]"}, {"name": "CIESIN_GPWv411_GPW_Land_Area", "code": "var dataset = ee.Image(\"CIESIN/GPWv411/GPW_Land_Area\");\nvar raster = dataset.select('land_area');\nvar raster_vis = {\n  \"min\": 0.0,\n  \"palette\": [\n    \"ecefb7\",\n    \"745638\"\n  ],\n  \"max\": 0.86\n};\nMap.setCenter(26.4, 19.81, 1);\nMap.addLayer(raster, raster_vis, 'land_area');\n\n", "environment": "[]"}, {"name": "CIESIN_GPWv411_GPW_Mean_Administrative_Unit_Area", "code": "var dataset = ee.Image(\"CIESIN/GPWv411/GPW_Mean_Administrative_Unit_Area\");\nvar raster = dataset.select('mean_administrative_unit_area');\nvar raster_vis = {\n  \"min\": 0.0,\n  \"palette\": [\n    \"ffffff\",\n    \"747474\",\n    \"656565\",\n    \"3c3c3c\",\n    \"2f2f2f\",\n    \"000000\"\n  ],\n  \"max\": 40000.0\n};\nMap.setCenter(-88.6, 26.4, 1);\nMap.addLayer(raster, raster_vis, 'mean_administrative_unit_area');\n\n", "environment": "[]"}, {"name": "CIESIN_GPWv411_GPW_National_Identifier_Grid", "code": "var dataset = ee.Image(\"CIESIN/GPWv411/GPW_National_Identifier_Grid\");\nvar raster = dataset.select('national_identifier_grid');\nvar raster_vis = {\n  \"min\": 4.0,\n  \"palette\": [\n    \"000000\",\n    \"ffffff\"\n  ],\n  \"max\": 999.0\n};\nMap.setCenter(-88.6, 26.4, 1);\nMap.addLayer(raster, raster_vis, 'national_identifier_grid');\n\n", "environment": "[]"}, {"name": "CIESIN_GPWv411_GPW_Population_Count", "code": "var dataset = ee.ImageCollection(\"CIESIN/GPWv411/GPW_Population_Count\").first();\nvar raster = dataset.select('population_count');\nvar raster_vis = {\n  \"max\": 1000.0,\n  \"palette\": [\n    \"ffffe7\",\n    \"86a192\",\n    \"509791\",\n    \"307296\",\n    \"2c4484\",\n    \"000066\"\n  ],\n  \"min\": 0.0\n};\nMap.setCenter(79.1, 19.81, 3);\nMap.addLayer(raster, raster_vis, 'population_count');\n\n", "environment": "[]"}, {"name": "CIESIN_GPWv411_GPW_Population_Density", "code": "var dataset = ee.ImageCollection(\"CIESIN/GPWv411/GPW_Population_Density\").first();\nvar raster = dataset.select('population_density');\nvar raster_vis = {\n  \"max\": 1000.0,\n  \"palette\": [\n    \"ffffe7\",\n    \"FFc869\",\n    \"ffac1d\",\n    \"e17735\",\n    \"f2552c\",\n    \"9f0c21\"\n  ],\n  \"min\": 200.0\n};\nMap.setCenter(79.1, 19.81, 3);\nMap.addLayer(raster, raster_vis, 'population_density');\n\n", "environment": "[]"}, {"name": "CIESIN_GPWv411_GPW_UNWPP-Adjusted_Population_Count", "code": "var dataset = ee.ImageCollection(\"CIESIN/GPWv411/GPW_UNWPP-Adjusted_Population_Count\").first();\nvar raster = dataset.select('unwpp-adjusted_population_count');\nvar raster_vis = {\n  \"max\": 1000.0,\n  \"palette\": [\n    \"ffffe7\",\n    \"86a192\",\n    \"509791\",\n    \"307296\",\n    \"2c4484\",\n    \"000066\"\n  ],\n  \"min\": 0.0\n};\nMap.setCenter(79.1, 19.81, 3);\nMap.addLayer(raster, raster_vis, 'unwpp-adjusted_population_count');\n\n", "environment": "[]"}, {"name": "CIESIN_GPWv411_GPW_UNWPP-Adjusted_Population_Density", "code": "var dataset = ee.ImageCollection(\"CIESIN/GPWv411/GPW_UNWPP-Adjusted_Population_Density\").first();\nvar raster = dataset.select('unwpp-adjusted_population_density');\nvar raster_vis = {\n  \"max\": 1000.0,\n  \"palette\": [\n    \"ffffe7\",\n    \"FFc869\",\n    \"ffac1d\",\n    \"e17735\",\n    \"f2552c\",\n    \"9f0c21\"\n  ],\n  \"min\": 0.0\n};\nMap.setCenter(79.1, 19.81, 3);\nMap.addLayer(raster, raster_vis, 'unwpp-adjusted_population_density');\n\n", "environment": "[]"}, {"name": "CIESIN_GPWv411_GPW_Water_Area", "code": "var dataset = ee.Image(\"CIESIN/GPWv411/GPW_Water_Area\");\nvar raster = dataset.select('water_area');\nvar raster_vis = {\n  \"min\": 0.0,\n  \"palette\": [\n    \"f5f6da\",\n    \"180d02\"\n  ],\n  \"max\": 0.860558\n};\nMap.setCenter(79.1, 19.81, 3);\nMap.addLayer(raster, raster_vis, 'water_area');\n\n", "environment": "[]"}, {"name": "CIESIN_GPWv411_GPW_Water_Mask", "code": "var dataset = ee.Image(\"CIESIN/GPWv411/GPW_Water_Mask\");\nvar raster = dataset.select('water_mask');\nvar raster_vis = {\n  \"min\": 0.0,\n  \"palette\": [\n    \"005ce6\",\n    \"00ffc5\",\n    \"bed2ff\",\n    \"aed0f1\"\n  ],\n  \"max\": 3.0\n};\nMap.setCenter(-88.6, 26.4, 1);\nMap.addLayer(raster, raster_vis, 'water_mask');\n\n", "environment": "[]"}, {"name": "CIESIN_GPWv4_ancillary-data-grids", "code": "var dataset = ee.Image('CIESIN/GPWv4/ancillary-data-grids');\nvar zeroPopulationAreas = dataset.select('data-context');\nvar zeroPopulationAreasVis = {\n  min: 201.0,\n  max: 205.0,\n  palette: ['099506', 'ff0b00', '060606', 'a5a5a5', 'ffe152'],\n};\nMap.setCenter(-3.3, 36.03, 1);\nMap.addLayer(\n    zeroPopulationAreas, zeroPopulationAreasVis, 'Zero Population Areas');\n", "environment": "[]"}, {"name": "CIESIN_GPWv4_population-count", "code": "var dataset = ee.ImageCollection('CIESIN/GPWv4/population-count');\nvar populationCount = dataset.select('population-count')\n  .filter(ee.Filter.date('2010-01-01', '2010-12-31'));\nvar populationCountVis = {\n  min: 200.0,\n  max: 1000.0,\n  palette: ['ffffff', 'ffcdc6', 'ff0000', '950000'],\n};\nMap.setCenter(79.1, 19.81, 3);\nMap.addLayer(populationCount, populationCountVis, 'Population Count');\n", "environment": "[]"}, {"name": "CIESIN_GPWv4_population-density", "code": "var dataset = ee.ImageCollection('CIESIN/GPWv4/population-density');\nvar populationDensity = dataset.select('population-density')\n  .filter(ee.Filter.date('2010-01-01', '2010-12-31'));\nvar populationDensityVis = {\n  min: 200.0,\n  max: 1500.0,\n  palette: ['ffffff', 'ffcdc6', 'ff0000', '950000'],\n};\nMap.setCenter(79.1, 19.81, 3);\nMap.addLayer(populationDensity, populationDensityVis, 'Population Density');\n", "environment": "[]"}, {"name": "CIESIN_GPWv4_unwpp-adjusted-population-count", "code": "var dataset =\n    ee.ImageCollection('CIESIN/GPWv4/unwpp-adjusted-population-count');\nvar populationCount = dataset.select('population-count')\n  .filter(ee.Filter.date('2010-01-01', '2010-12-31'));\nvar populationCountVis = {\n  min: 200.0,\n  max: 1000.0,\n  palette: ['ffffff', 'ffcdc6', 'ff0000', '950000'],\n};\nMap.setCenter(79.1, 19.81, 3);\nMap.addLayer(populationCount, populationCountVis, 'Population Count');\n", "environment": "[]"}, {"name": "CIESIN_GPWv4_unwpp-adjusted-population-density", "code": "var dataset =\n    ee.ImageCollection('CIESIN/GPWv4/unwpp-adjusted-population-density');\nvar populationDensity = dataset.select('population-density')\n  .filter(ee.Filter.date('2010-01-01', '2010-12-31'));\nvar populationDensityVis = {\n  min: 200.0,\n  max: 1500.0,\n  palette: ['ffffff', 'ffcdc6', 'ff0000', '950000'],\n};\nMap.setCenter(79.1, 19.81, 3);\nMap.addLayer(populationDensity, populationDensityVis, 'Population Density');\n", "environment": "[]"}, {"name": "COPERNICUS_CORINE_V18_5_1_100m", "code": "var dataset = ee.Image('COPERNICUS/CORINE/V18_5_1/100m/2012');\nvar landCover = dataset.select('landcover');\nMap.setCenter(16.436, 39.825, 6);\nMap.addLayer(landCover, {}, 'Land Cover');\n", "environment": "[]"}, {"name": "COPERNICUS_CORINE_V20_100m", "code": "var dataset = ee.Image('COPERNICUS/CORINE/V20/100m/2012');\nvar landCover = dataset.select('landcover');\nMap.setCenter(16.436, 39.825, 6);\nMap.addLayer(landCover, {}, 'Land Cover');\n", "environment": "[]"}, {"name": "COPERNICUS_Landcover_100m_Proba-V-C3_Global", "code": "var dataset = ee.Image(\"COPERNICUS/Landcover/100m/Proba-V-C3/Global/2019\")\n.select('discrete_classification');\n\nMap.setCenter(-88.6, 26.4, 1);\n\nMap.addLayer(dataset, {}, \"Land Cover\");\n", "environment": "[]"}, {"name": "COPERNICUS_Landcover_100m_Proba-V_Global", "code": "var dataset = ee.ImageCollection(\"COPERNICUS/Landcover/100m/Proba-V/Global\");\n\nvar visualization = {\n  bands: ['discrete_classification']\n};\n\nMap.setCenter(-88.6, 26.4, 1);\n\nMap.addLayer(dataset, visualization, \"Land Cover\");\n", "environment": "[]"}, {"name": "COPERNICUS_S1_GRD", "code": "var imgVV = ee.ImageCollection('COPERNICUS/S1_GRD')\n        .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))\n        .filter(ee.Filter.eq('instrumentMode', 'IW'))\n        .select('VV')\n        .map(function(image) {\n          var edge = image.lt(-30.0);\n          var maskedImage = image.mask().and(edge.not());\n          return image.updateMask(maskedImage);\n        });\n\nvar desc = imgVV.filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'));\nvar asc = imgVV.filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'));\n\nvar spring = ee.Filter.date('2015-03-01', '2015-04-20');\nvar lateSpring = ee.Filter.date('2015-04-21', '2015-06-10');\nvar summer = ee.Filter.date('2015-06-11', '2015-08-31');\n\nvar descChange = ee.Image.cat(\n        desc.filter(spring).mean(),\n        desc.filter(lateSpring).mean(),\n        desc.filter(summer).mean());\n\nvar ascChange = ee.Image.cat(\n        asc.filter(spring).mean(),\n        asc.filter(lateSpring).mean(),\n        asc.filter(summer).mean());\n\nMap.setCenter(5.2013, 47.3277, 12);\nMap.addLayer(ascChange, {min: -25, max: 5}, 'Multi-T Mean ASC', true);\nMap.addLayer(descChange, {min: -25, max: 5}, 'Multi-T Mean DESC', true);\n", "environment": "[]"}, {"name": "COPERNICUS_S2", "code": "/**\n * Function to mask clouds using the Sentinel-2 QA band\n * @param {ee.Image} image Sentinel-2 image\n * @return {ee.Image} cloud masked Sentinel-2 image\n */\nfunction maskS2clouds(image) {\n  var qa = image.select('QA60');\n\n  // Bits 10 and 11 are clouds and cirrus, respectively.\n  var cloudBitMask = 1 \u003c\u003c 10;\n  var cirrusBitMask = 1 \u003c\u003c 11;\n\n  // Both flags should be set to zero, indicating clear conditions.\n  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)\n      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));\n\n  return image.updateMask(mask).divide(10000);\n}\n\n// Map the function over one month of data and take the median.\n// Load Sentinel-2 TOA reflectance data.\nvar dataset = ee.ImageCollection('COPERNICUS/S2')\n                  .filterDate('2018-01-01', '2018-01-31')\n                  // Pre-filter to get less cloudy granules.\n                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))\n                  .map(maskS2clouds);\n\nvar rgbVis = {\n  min: 0.0,\n  max: 0.3,\n  bands: ['B4', 'B3', 'B2'],\n};\n\nMap.setCenter(-9.1695, 38.6917, 12);\nMap.addLayer(dataset.median(), rgbVis, 'RGB');\n", "environment": "[]"}, {"name": "COPERNICUS_S2_CLOUD_PROBABILITY", "code": "var s2Sr = ee.ImageCollection('COPERNICUS/S2_SR');\nvar s2Clouds = ee.ImageCollection('COPERNICUS/S2_CLOUD_PROBABILITY');\n\nvar START_DATE = ee.Date('2019-01-01');\nvar END_DATE = ee.Date('2019-03-01');\nvar MAX_CLOUD_PROBABILITY = 65;\nvar region =\n    ee.Geometry.Rectangle({coords: [-76.5, 2.0, -74, 4.0], geodesic: false});\nMap.setCenter(-75, 3, 12);\n\nfunction maskClouds(img) {\n  var clouds = ee.Image(img.get('cloud_mask')).select('probability');\n  var isNotCloud = clouds.lt(MAX_CLOUD_PROBABILITY);\n  return img.updateMask(isNotCloud);\n}\n\n// The masks for the 10m bands sometimes do not exclude bad data at\n// scene edges, so we apply masks from the 20m and 60m bands as well.\n// Example asset that needs this operation:\n// COPERNICUS/S2_CLOUD_PROBABILITY/20190301T000239_20190301T000238_T55GDP\nfunction maskEdges(s2_img) {\n  return s2_img.updateMask(\n      s2_img.select('B8A').mask().updateMask(s2_img.select('B9').mask()));\n}\n\n// Filter input collections by desired data range and region.\nvar criteria = ee.Filter.and(\n    ee.Filter.bounds(region), ee.Filter.date(START_DATE, END_DATE));\ns2Sr = s2Sr.filter(criteria).map(maskEdges);\ns2Clouds = s2Clouds.filter(criteria);\n\n// Join S2 SR with cloud probability dataset to add cloud mask.\nvar s2SrWithCloudMask = ee.Join.saveFirst('cloud_mask').apply({\n  primary: s2Sr,\n  secondary: s2Clouds,\n  condition:\n      ee.Filter.equals({leftField: 'system:index', rightField: 'system:index'})\n});\n\nvar s2CloudMasked =\n    ee.ImageCollection(s2SrWithCloudMask).map(maskClouds).median();\nvar rgbVis = {min: 0, max: 3000, bands: ['B4', 'B3', 'B2']};\n\nMap.addLayer(\n    s2CloudMasked, rgbVis, 'S2 SR masked at ' + MAX_CLOUD_PROBABILITY + '%',\n    true);\n", "environment": "[]"}, {"name": "COPERNICUS_S2_HARMONIZED", "code": "/**\n * Function to mask clouds using the Sentinel-2 QA band\n * @param {ee.Image} image Sentinel-2 image\n * @return {ee.Image} cloud masked Sentinel-2 image\n */\nfunction maskS2clouds(image) {\n  var qa = image.select('QA60');\n\n  // Bits 10 and 11 are clouds and cirrus, respectively.\n  var cloudBitMask = 1 \u003c\u003c 10;\n  var cirrusBitMask = 1 \u003c\u003c 11;\n\n  // Both flags should be set to zero, indicating clear conditions.\n  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)\n      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));\n\n  return image.updateMask(mask).divide(10000);\n}\n\n// Map the function over a month of data and take the median.\n// Load Sentinel-2 TOA reflectance data (adjusted for processing changes\n// that occurred after 2022-01-25).\nvar dataset = ee.ImageCollection('COPERNICUS/S2_HARMONIZED')\n                  .filterDate('2022-01-01', '2022-01-31')\n                  // Pre-filter to get less cloudy granules.\n                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))\n                  .map(maskS2clouds);\n\nvar rgbVis = {\n  min: 0.0,\n  max: 0.3,\n  bands: ['B4', 'B3', 'B2'],\n};\n\nMap.setCenter(-9.1695, 38.6917, 12);\nMap.addLayer(dataset.median(), rgbVis, 'RGB');\n", "environment": "[]"}, {"name": "COPERNICUS_S2_SR", "code": "/**\n * Function to mask clouds using the Sentinel-2 QA band\n * @param {ee.Image} image Sentinel-2 image\n * @return {ee.Image} cloud masked Sentinel-2 image\n */\nfunction maskS2clouds(image) {\n  var qa = image.select('QA60');\n\n  // Bits 10 and 11 are clouds and cirrus, respectively.\n  var cloudBitMask = 1 \u003c\u003c 10;\n  var cirrusBitMask = 1 \u003c\u003c 11;\n\n  // Both flags should be set to zero, indicating clear conditions.\n  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)\n      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));\n\n  return image.updateMask(mask).divide(10000);\n}\n\nvar dataset = ee.ImageCollection('COPERNICUS/S2_SR')\n                  .filterDate('2020-01-01', '2020-01-30')\n                  // Pre-filter to get less cloudy granules.\n                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))\n                  .map(maskS2clouds);\n\nvar visualization = {\n  min: 0.0,\n  max: 0.3,\n  bands: ['B4', 'B3', 'B2'],\n};\n\nMap.setCenter(83.277, 17.7009, 12);\n\nMap.addLayer(dataset.mean(), visualization, 'RGB');\n", "environment": "[]"}, {"name": "COPERNICUS_S2_SR_HARMONIZED", "code": "/**\n * Function to mask clouds using the Sentinel-2 QA band\n * @param {ee.Image} image Sentinel-2 image\n * @return {ee.Image} cloud masked Sentinel-2 image\n */\nfunction maskS2clouds(image) {\n  var qa = image.select('QA60');\n\n  // Bits 10 and 11 are clouds and cirrus, respectively.\n  var cloudBitMask = 1 \u003c\u003c 10;\n  var cirrusBitMask = 1 \u003c\u003c 11;\n\n  // Both flags should be set to zero, indicating clear conditions.\n  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)\n      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));\n\n  return image.updateMask(mask).divide(10000);\n}\n\nvar dataset = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')\n                  .filterDate('2020-01-01', '2020-01-30')\n                  // Pre-filter to get less cloudy granules.\n                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))\n                  .map(maskS2clouds);\n\nvar visualization = {\n  min: 0.0,\n  max: 0.3,\n  bands: ['B4', 'B3', 'B2'],\n};\n\nMap.setCenter(83.277, 17.7009, 12);\n\nMap.addLayer(dataset.mean(), visualization, 'RGB');\n", "environment": "[]"}, {"name": "COPERNICUS_S3_OLCI", "code": "var dataset = ee.ImageCollection('COPERNICUS/S3/OLCI')\n                  .filterDate('2018-04-01', '2018-04-04');\n\n// Select bands for visualization and apply band-specific scale factors.\nvar rgb = dataset.select(['Oa08_radiance', 'Oa06_radiance', 'Oa04_radiance'])\n              .median()\n              // Convert to radiance units.\n              .multiply(ee.Image([0.00876539, 0.0123538, 0.0115198]));\n\nvar visParams = {\n  min: 0,\n  max: 6,\n  gamma: 1.5,\n};\n\nMap.setCenter(46.043, 1.45, 5);\nMap.addLayer(rgb, visParams, 'RGB');\n", "environment": "[]"}, {"name": "COPERNICUS_S5P_NRTI_L3_AER_AI", "code": "var collection = ee.ImageCollection('COPERNICUS/S5P/NRTI/L3_AER_AI')\n  .select('absorbing_aerosol_index')\n  .filterDate('2019-06-01', '2019-06-06');\n\nvar band_viz = {\n  min: -1,\n  max: 2.0,\n  palette: ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']\n};\n\nMap.addLayer(collection.mean(), band_viz, 'S5P Aerosol');\nMap.setCenter(-118.82, 36.1, 5);\n", "environment": "[]"}, {"name": "COPERNICUS_S5P_NRTI_L3_AER_LH", "code": "var collection = ee.ImageCollection('COPERNICUS/S5P/NRTI/L3_AER_LH')\n  .select('aerosol_height')\n  .filterDate('2019-06-01', '2019-06-06');\n\nvar band_viz = {\n  min: -81.17,\n  max: 67622.56,\n  palette: ['blue', 'purple', 'cyan', 'green', 'yellow', 'red']\n};\n\nMap.addLayer(collection.mean(), band_viz, 'S5P Aerosol Height');\nMap.setCenter(44.09, 24.27, 4);\n", "environment": "[]"}, {"name": "COPERNICUS_S5P_NRTI_L3_CLOUD", "code": "var collection = ee.ImageCollection('COPERNICUS/S5P/NRTI/L3_CLOUD')\n  .select('cloud_fraction')\n  .filterDate('2019-06-01', '2019-06-02');\n\nvar band_viz = {\n  min: 0,\n  max: 0.95,\n  palette: ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']\n};\n\nMap.addLayer(collection.mean(), band_viz, 'S5P Cloud');\nMap.setCenter(-58.14, -10.47, 2);\n", "environment": "[]"}, {"name": "COPERNICUS_S5P_NRTI_L3_CO", "code": "var collection = ee.ImageCollection('COPERNICUS/S5P/NRTI/L3_CO')\n  .select('CO_column_number_density')\n  .filterDate('2019-06-01', '2019-06-11');\n\nvar band_viz = {\n  min: 0,\n  max: 0.05,\n  palette: ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']\n};\n\nMap.addLayer(collection.mean(), band_viz, 'S5P CO');\nMap.setCenter(-25.01, -4.28, 4);\n", "environment": "[]"}, {"name": "COPERNICUS_S5P_NRTI_L3_HCHO", "code": "var collection = ee.ImageCollection('COPERNICUS/S5P/NRTI/L3_HCHO')\n  .select('tropospheric_HCHO_column_number_density')\n  .filterDate('2019-06-01', '2019-06-06');\n\nvar band_viz = {\n  min: 0.0,\n  max: 0.0003,\n  palette: ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']\n};\n\nMap.addLayer(collection.mean(), band_viz, 'S5P HCHO');\nMap.setCenter(0.0, 0.0, 2);\n", "environment": "[]"}, {"name": "COPERNICUS_S5P_NRTI_L3_NO2", "code": "var collection = ee.ImageCollection('COPERNICUS/S5P/NRTI/L3_NO2')\n  .select('NO2_column_number_density')\n  .filterDate('2019-06-01', '2019-06-06');\n\nvar band_viz = {\n  min: 0,\n  max: 0.0002,\n  palette: ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']\n};\n\nMap.addLayer(collection.mean(), band_viz, 'S5P N02');\nMap.setCenter(65.27, 24.11, 4);\n", "environment": "[]"}, {"name": "COPERNICUS_S5P_NRTI_L3_O3", "code": "var collection = ee.ImageCollection('COPERNICUS/S5P/NRTI/L3_O3')\n  .select('O3_column_number_density')\n  .filterDate('2019-06-01', '2019-06-05');\n\nvar band_viz = {\n  min: 0.12,\n  max: 0.15,\n  palette: ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']\n};\n\nMap.addLayer(collection.mean(), band_viz, 'S5P O3');\nMap.setCenter(0.0, 0.0, 2);\n", "environment": "[]"}, {"name": "COPERNICUS_S5P_NRTI_L3_SO2", "code": "var collection = ee.ImageCollection('COPERNICUS/S5P/NRTI/L3_SO2')\n  .select('SO2_column_number_density')\n  .filterDate('2019-06-01', '2019-06-11');\n\nvar band_viz = {\n  min: 0.0,\n  max: 0.0005,\n  palette: ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']\n};\n\nMap.addLayer(collection.mean(), band_viz, 'S5P SO2');\nMap.setCenter(0.0, 0.0, 2);\n", "environment": "[]"}, {"name": "COPERNICUS_S5P_OFFL_L3_AER_AI", "code": "var collection = ee.ImageCollection('COPERNICUS/S5P/OFFL/L3_AER_AI')\n  .select('absorbing_aerosol_index')\n  .filterDate('2019-06-01', '2019-06-06');\n\nvar band_viz = {\n  min: -1,\n  max: 2.0,\n  palette: ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']\n};\n\nMap.addLayer(collection.mean(), band_viz, 'S5P Aerosol');\nMap.setCenter(-118.82, 36.1, 5);\n", "environment": "[]"}, {"name": "COPERNICUS_S5P_OFFL_L3_AER_LH", "code": "var collection = ee.ImageCollection('COPERNICUS/S5P/OFFL/L3_AER_LH')\n                    .select('aerosol_height')\n                    .filterDate('2019-06-01', '2019-06-05');\n\nvar visualization = {\n  min: 0,\n  max: 6000,\n  palette: ['blue', 'purple', 'cyan', 'green', 'yellow', 'red']\n};\n\nMap.setCenter(44.09, 24.27, 4);\n\nMap.addLayer(collection.mean(), visualization, 'S5P Aerosol Height');\n", "environment": "[]"}, {"name": "COPERNICUS_S5P_OFFL_L3_CH4", "code": "var collection = ee.ImageCollection('COPERNICUS/S5P/OFFL/L3_CH4')\n  .select('CH4_column_volume_mixing_ratio_dry_air')\n  .filterDate('2019-06-01', '2019-07-16');\n\nvar band_viz = {\n  min: 1750,\n  max: 1900,\n  palette: ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']\n};\n\nMap.addLayer(collection.mean(), band_viz, 'S5P CH4');\nMap.setCenter(0.0, 0.0, 2);\n", "environment": "[]"}, {"name": "COPERNICUS_S5P_OFFL_L3_CLOUD", "code": "var collection = ee.ImageCollection('COPERNICUS/S5P/OFFL/L3_CLOUD')\n  .select('cloud_fraction')\n  .filterDate('2019-06-01', '2019-06-02');\n\nvar band_viz = {\n  min: 0,\n  max: 0.95,\n  palette: ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']\n};\n\nMap.addLayer(collection.mean(), band_viz, 'S5P Cloud');\nMap.setCenter(-58.14, -10.47, 2);\n", "environment": "[]"}, {"name": "COPERNICUS_S5P_OFFL_L3_CO", "code": "var collection = ee.ImageCollection('COPERNICUS/S5P/OFFL/L3_CO')\n  .select('CO_column_number_density')\n  .filterDate('2019-06-01', '2019-06-11');\n\nvar band_viz = {\n  min: 0,\n  max: 0.05,\n  palette: ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']\n};\n\nMap.addLayer(collection.mean(), band_viz, 'S5P CO');\nMap.setCenter(-25.01, -4.28, 4);\n", "environment": "[]"}, {"name": "COPERNICUS_S5P_OFFL_L3_HCHO", "code": "var collection = ee.ImageCollection('COPERNICUS/S5P/OFFL/L3_HCHO')\n  .select('tropospheric_HCHO_column_number_density')\n  .filterDate('2019-06-01', '2019-06-06');\n\nvar band_viz = {\n  min: 0.0,\n  max: 0.0003,\n  palette: ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']\n};\n\nMap.addLayer(collection.mean(), band_viz, 'S5P HCHO');\nMap.setCenter(0.0, 0.0, 2);\n", "environment": "[]"}, {"name": "COPERNICUS_S5P_OFFL_L3_NO2", "code": "var collection = ee.ImageCollection('COPERNICUS/S5P/OFFL/L3_NO2')\n  .select('tropospheric_NO2_column_number_density')\n  .filterDate('2019-06-01', '2019-06-06');\n\nvar band_viz = {\n  min: 0,\n  max: 0.0002,\n  palette: ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']\n};\n\nMap.addLayer(collection.mean(), band_viz, 'S5P N02');\nMap.setCenter(65.27, 24.11, 4);\n", "environment": "[]"}, {"name": "COPERNICUS_S5P_OFFL_L3_O3", "code": "var collection = ee.ImageCollection('COPERNICUS/S5P/OFFL/L3_O3')\n  .select('O3_column_number_density')\n  .filterDate('2019-06-01', '2019-06-05');\n\nvar band_viz = {\n  min: 0.12,\n  max: 0.15,\n  palette: ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']\n};\n\nMap.addLayer(collection.mean(), band_viz, 'S5P O3');\nMap.setCenter(0.0, 0.0, 2);\n", "environment": "[]"}, {"name": "COPERNICUS_S5P_OFFL_L3_O3_TCL", "code": "var collection = ee.ImageCollection('COPERNICUS/S5P/OFFL/L3_O3_TCL')\n  .select('ozone_tropospheric_vertical_column')\n  .filterDate('2019-06-01', '2019-07-01');\n\nvar band_viz = {\n  min: 0,\n  max: 0.02,\n  palette: ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']\n};\n\nMap.addLayer(collection.mean(), band_viz, 'S5P O3');\nMap.setCenter(0.0, 0.0, 2);\n", "environment": "[]"}, {"name": "COPERNICUS_S5P_OFFL_L3_SO2", "code": "var collection = ee.ImageCollection('COPERNICUS/S5P/OFFL/L3_SO2')\n  .select('SO2_column_number_density')\n  .filterDate('2019-06-01', '2019-06-11');\n\nvar band_viz = {\n  min: 0.0,\n  max: 0.0005,\n  palette: ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']\n};\n\nMap.addLayer(collection.mean(), band_viz, 'S5P SO2');\nMap.setCenter(0.0, 0.0, 2);\n", "environment": "[]"}, {"name": "CPOM_CryoSat2_ANTARCTICA_DEM", "code": "var dataset = ee.Image('CPOM/CryoSat2/ANTARCTICA_DEM');\n\nvar visualization = {\n  bands: ['elevation'],\n  min: 0.0,\n  max: 4000.0,\n  palette: ['001fff', '00ffff', 'fbff00', 'ff0000']\n};\n\nMap.setCenter(17.0, -76.0, 3);\n\nMap.addLayer(dataset, visualization, 'Elevation');\n", "environment": "[]"}, {"name": "CSIRO_SLGA", "code": "var dataset = ee.ImageCollection('CSIRO/SLGA')\n                  .filter(ee.Filter.eq('attribute_code', 'DES'));\nvar soilDepth = dataset.select('DES_000_200_EV');\nvar soilDepthVis = {\n  min: 0.1,\n  max: 1.84,\n  palette: ['8d6738', '252525'],\n};\nMap.setCenter(132.495, -21.984, 5);\nMap.addLayer(soilDepth, soilDepthVis, 'Soil Depth');", "environment": "[]"}, {"name": "CSP_ERGo_1_0_Global_ALOS_CHILI", "code": "var dataset = ee.Image('CSP/ERGo/1_0/Global/ALOS_CHILI');\nvar alosChili = dataset.select('constant');\nvar alosChiliVis = {\n  min: 0.0,\n  max: 255.0,\n};\nMap.setCenter(-105.8636, 40.3439, 11);\nMap.addLayer(alosChili, alosChiliVis, 'ALOS CHILI');\n", "environment": "[]"}, {"name": "CSP_ERGo_1_0_Global_ALOS_landforms", "code": "var dataset = ee.Image('CSP/ERGo/1_0/Global/ALOS_landforms');\nvar landforms = dataset.select('constant');\nvar landformsVis = {\n  min: 11.0,\n  max: 42.0,\n  palette: [\n    '141414', '383838', '808080', 'EBEB8F', 'F7D311', 'AA0000', 'D89382',\n    'DDC9C9', 'DCCDCE', '1C6330', '68AA63', 'B5C98E', 'E1F0E5', 'a975ba',\n    '6f198c'\n  ],\n};\nMap.setCenter(-105.58, 40.5498, 11);\nMap.addLayer(landforms, landformsVis, 'Landforms');\n", "environment": "[]"}, {"name": "CSP_ERGo_1_0_Global_ALOS_mTPI", "code": "var dataset = ee.Image('CSP/ERGo/1_0/Global/ALOS_mTPI');\nvar alosMtpi = dataset.select('AVE');\nvar alosMtpiVis = {\n  min: -200.0,\n  max: 200.0,\n  palette: ['0b1eff', '4be450', 'fffca4', 'ffa011', 'ff0000'],\n};\nMap.setCenter(-105.8636, 40.3439, 11);\nMap.addLayer(alosMtpi, alosMtpiVis, 'ALOS mTPI');\n", "environment": "[]"}, {"name": "CSP_ERGo_1_0_Global_ALOS_topoDiversity", "code": "var dataset = ee.Image('CSP/ERGo/1_0/Global/ALOS_topoDiversity');\nvar alosTopographicDiversity = dataset.select('constant');\nvar alosTopographicDiversityVis = {\n  min: 0.0,\n  max: 1.0,\n};\nMap.setCenter(-111.313, 39.724, 6);\nMap.addLayer(\n    alosTopographicDiversity, alosTopographicDiversityVis,\n    'ALOS Topographic Diversity');\n", "environment": "[]"}, {"name": "CSP_ERGo_1_0_Global_SRTM_CHILI", "code": "var dataset = ee.Image('CSP/ERGo/1_0/Global/SRTM_CHILI');\nvar srtmChili = dataset.select('constant');\nvar srtmChiliVis = {\n  min: 0.0,\n  max: 255.0,\n};\nMap.setCenter(-105.8636, 40.3439, 11);\nMap.addLayer(srtmChili, srtmChiliVis, 'SRTM CHILI');\n", "environment": "[]"}, {"name": "CSP_ERGo_1_0_Global_SRTM_landforms", "code": "var dataset = ee.Image('CSP/ERGo/1_0/Global/SRTM_landforms');\nvar landforms = dataset.select('constant');\nvar landformsVis = {\n  min: 11.0,\n  max: 42.0,\n  palette: [\n    '141414', '383838', '808080', 'EBEB8F', 'F7D311', 'AA0000', 'D89382',\n    'DDC9C9', 'DCCDCE', '1C6330', '68AA63', 'B5C98E', 'E1F0E5', 'a975ba',\n    '6f198c'\n  ],\n};\nMap.setCenter(-105.58, 40.5498, 11);\nMap.addLayer(landforms, landformsVis, 'Landforms');\n", "environment": "[]"}, {"name": "CSP_ERGo_1_0_Global_SRTM_mTPI", "code": "var dataset = ee.Image('CSP/ERGo/1_0/Global/SRTM_mTPI');\nvar srtmMtpi = dataset.select('elevation');\nvar srtmMtpiVis = {\n  min: -200.0,\n  max: 200.0,\n  palette: ['0b1eff', '4be450', 'fffca4', 'ffa011', 'ff0000'],\n};\nMap.setCenter(-105.8636, 40.3439, 11);\nMap.addLayer(srtmMtpi, srtmMtpiVis, 'SRTM mTPI');\n", "environment": "[]"}, {"name": "CSP_ERGo_1_0_Global_SRTM_topoDiversity", "code": "var dataset = ee.Image('CSP/ERGo/1_0/Global/SRTM_topoDiversity');\nvar srtmTopographicDiversity = dataset.select('constant');\nvar srtmTopographicDiversityVis = {\n  min: 0.0,\n  max: 1.0,\n};\nMap.setCenter(-111.313, 39.724, 6);\nMap.addLayer(\n    srtmTopographicDiversity, srtmTopographicDiversityVis,\n    'SRTM Topographic Diversity');\n", "environment": "[]"}, {"name": "CSP_ERGo_1_0_US_CHILI", "code": "var dataset = ee.Image('CSP/ERGo/1_0/US/CHILI');\nvar usChili = dataset.select('constant');\nvar usChiliVis = {\n  min: 0.0,\n  max: 255.0,\n};\nMap.setCenter(-105.8636, 40.3439, 11);\nMap.addLayer(usChili, usChiliVis, 'US CHILI');\n", "environment": "[]"}, {"name": "CSP_ERGo_1_0_US_landforms", "code": "var dataset = ee.Image('CSP/ERGo/1_0/US/landforms');\nvar landforms = dataset.select('constant');\nvar landformsVis = {\n  min: 11.0,\n  max: 42.0,\n  palette: [\n    '141414', '383838', '808080', 'EBEB8F', 'F7D311', 'AA0000', 'D89382',\n    'DDC9C9', 'DCCDCE', '1C6330', '68AA63', 'B5C98E', 'E1F0E5', 'a975ba',\n    '6f198c'\n  ],\n};\nMap.setCenter(-105.58, 40.5498, 11);\nMap.addLayer(landforms, landformsVis, 'Landforms');\n", "environment": "[]"}, {"name": "CSP_ERGo_1_0_US_lithology", "code": "var dataset = ee.Image('CSP/ERGo/1_0/US/lithology');\nvar lithology = dataset.select('b1');\nvar lithologyVis = {\n  min: 0.0,\n  max: 20.0,\n  palette: [\n    '356EFF', 'ACB6DA', 'D6B879', '313131', 'EDA800', '616161', 'D6D6D6',\n    'D0DDAE', 'B8D279', 'D5D378', '141414', '6DB155', '9B6D55', 'FEEEC9',\n    'D6B879', '00B7EC', 'FFDA90', 'F8B28C'\n  ],\n};\nMap.setCenter(-105.8636, 40.3439, 11);\nMap.addLayer(lithology, lithologyVis, 'Lithology');\n", "environment": "[]"}, {"name": "CSP_ERGo_1_0_US_mTPI", "code": "var dataset = ee.Image('CSP/ERGo/1_0/US/mTPI');\nvar usMtpi = dataset.select('elevation');\nvar usMtpiVis = {\n  min: -200.0,\n  max: 200.0,\n  palette: ['0b1eff', '4be450', 'fffca4', 'ffa011', 'ff0000'],\n};\nMap.setCenter(-105.8636, 40.3439, 11);\nMap.addLayer(usMtpi, usMtpiVis, 'US mTPI');\n", "environment": "[]"}, {"name": "CSP_ERGo_1_0_US_physioDiversity", "code": "var dataset = ee.Image('CSP/ERGo/1_0/US/physioDiversity');\nvar physiographicDiversity = dataset.select('b1');\nvar physiographicDiversityVis = {\n  min: 0.0,\n  max: 1.0,\n};\nMap.setCenter(-94.625, 39.825, 7);\nMap.addLayer(\n    physiographicDiversity, physiographicDiversityVis,\n    'Physiographic Diversity');\n", "environment": "[]"}, {"name": "CSP_ERGo_1_0_US_physiography", "code": "var dataset = ee.Image('CSP/ERGo/1_0/US/physiography');\nvar physiography = dataset.select('constant');\nvar physiographyVis = {\n  min: 1100.0,\n  max: 4220.0,\n};\nMap.setCenter(-105.4248, 40.5242, 8);\nMap.addLayer(physiography, physiographyVis, 'Physiography');\n", "environment": "[]"}, {"name": "CSP_ERGo_1_0_US_topoDiversity", "code": "var dataset = ee.Image('CSP/ERGo/1_0/US/topoDiversity');\nvar usTopographicDiversity = dataset.select('constant');\nvar usTopographicDiversityVis = {\n  min: 0.0,\n  max: 1.0,\n};\nMap.setCenter(-111.313, 39.724, 6);\nMap.addLayer(\n    usTopographicDiversity, usTopographicDiversityVis,\n    'US Topographic Diversity');\n", "environment": "[]"}, {"name": "CSP_HM_GlobalHumanModification", "code": "var dataset = ee.ImageCollection('CSP/HM/GlobalHumanModification');\n\nvar visualization = {\n  bands: ['gHM'],\n  min: 0.0,\n  max: 1.0,\n  palette: ['0c0c0c', '071aff', 'ff0000', 'ffbd03', 'fbff05', 'fffdfd']\n};\n\nMap.centerObject(dataset);\n\nMap.addLayer(dataset, visualization, 'Human modification');\n", "environment": "[]"}, {"name": "DLR_WSF_WSF2015_v1", "code": "var dataset = ee.Image(\"DLR/WSF/WSF2015/v1\");\n\nvar opacity = 0.75;\nvar blackBackground = ee.Image(0);\nMap.addLayer(blackBackground, null, \"Black background\", true, opacity);\n\nvar visualization = {\n  min: 0,\n  max: 255,\n};\nMap.addLayer(dataset, visualization, \"Human settlement areas\");\n\nMap.setCenter(90.45, 23.7, 7);\n", "environment": "[]"}, {"name": "DOE_ORNL_LandScan_HD_Ukraine_202201", "code": "var dataset = ee.Image('DOE/ORNL/LandScan_HD/Ukraine_202201');\nvar vis = {\n  min: 0.0,\n  max: 10.0,\n  palette:['lemonchiffon', 'khaki', 'orange','orangered', 'red', 'maroon'],\n};\nMap.centerObject(dataset)\nMap.addLayer(dataset, vis, 'Population Count');\n", "environment": "[]"}, {"name": "ECMWF_CAMS_NRT", "code": "var dataset = ee.ImageCollection('ECMWF/CAMS/NRT')\n                  .filter(ee.Filter.date('2019-01-01', '2019-01-31'));\nvar aod = dataset.select('total_aerosol_optical_depth_at_550nm_surface');\nvar visParams = {\n  min: 0.000096,\n  max: 3.582552,\n  palette: [\n    \"5E4FA2\",\n    \"3288BD\",\n    \"66C2A5\",\n    \"ABE0A4\",\n    \"E6F598\",\n    \"FFFFBF\",\n    \"FEE08B\",\n    \"FDAE61\",\n    \"F46D43\",\n    \"D53E4F\",\n    \"9E0142\"\n  ]\n};\nMap.setCenter(-94.18, 16.8, 1);\nMap.addLayer(aod, visParams, 'Total Aerosal Optical Depth');\n", "environment": "[]"}, {"name": "ECMWF_ERA5_DAILY", "code": "// Example script to load and visualize ERA5 climate reanalysis parameters in\n// Google Earth Engine\n\n// Daily mean 2m air temperature\nvar era5_2mt = ee.ImageCollection('ECMWF/ERA5/DAILY')\n                   .select('mean_2m_air_temperature')\n                   .filter(ee.Filter.date('2019-07-01', '2019-07-31'));\nprint(era5_2mt);\n\n// Daily total precipitation sums\nvar era5_tp = ee.ImageCollection('ECMWF/ERA5/DAILY')\n                  .select('total_precipitation')\n                  .filter(ee.Filter.date('2019-07-01', '2019-07-31'));\n\n// Daily mean 2m dewpoint temperature\nvar era5_2d = ee.ImageCollection('ECMWF/ERA5/DAILY')\n                  .select('dewpoint_2m_temperature')\n                  .filter(ee.Filter.date('2019-07-01', '2019-07-31'));\n\n// Daily mean sea-level pressure\nvar era5_mslp = ee.ImageCollection('ECMWF/ERA5/DAILY')\n                    .select('mean_sea_level_pressure')\n                    .filter(ee.Filter.date('2019-07-01', '2019-07-31'));\n\n// Daily mean surface pressure\nvar era5_sp = ee.ImageCollection('ECMWF/ERA5/DAILY')\n                  .select('surface_pressure')\n                  .filter(ee.Filter.date('2019-07-01', '2019-07-31'));\n\n// Daily mean 10m u-component of wind\nvar era5_u_wind_10m = ee.ImageCollection('ECMWF/ERA5/DAILY')\n                          .select('u_component_of_wind_10m')\n                          .filter(ee.Filter.date('2019-07-01', '2019-07-31'));\n\n// Convert pressure levels from Pa to hPa - Example for surface pressure\nvar era5_sp = era5_sp.map(function(image) {\n  return image.divide(100).set(\n      'system:time_start', image.get('system:time_start'));\n});\n\n// Visualization palette for total precipitation\nvar visTp = {\n  min: 0,\n  max: 0.1,\n  palette: ['#FFFFFF', '#00FFFF', '#0080FF', '#DA00FF', '#FFA400', '#FF0000']\n};\n\n// Visualization palette for temperature (mean, min and max) and 2m dewpoint\n// temperature\nvar vis2mt = {\n  min: 250,\n  max: 320,\n  palette: [\n    '#000080', '#0000D9', '#4000FF', '#8000FF', '#0080FF', '#00FFFF', '#00FF80',\n    '#80FF00', '#DAFF00', '#FFFF00', '#FFF500', '#FFDA00', '#FFB000', '#FFA400',\n    '#FF4F00', '#FF2500', '#FF0A00', '#FF00FF'\n  ]\n};\n\n// Visualization palette for u- and v-component of 10m wind\nvar visWind = {\n  min: 0,\n  max: 30,\n  palette: [\n    '#FFFFFF', '#FFFF71', '#DEFF00', '#9EFF00', '#77B038', '#007E55', '#005F51',\n    '#004B51', '#013A7B', '#023AAD'\n  ]\n};\n\n// Visualization palette for pressure (surface pressure, mean sea level\n// pressure) - adjust min and max values for mslp to min:990 and max:1050\nvar visPressure = {\n  min: 500,\n  max: 1150,\n  palette: [\n    '#01FFFF', '#058BFF', '#0600FF', '#DF00FF', '#FF00FF', '#FF8C00', '#FF8C00'\n  ]\n};\n\n\n// Add layer to map\nMap.addLayer(\n    era5_tp.filter(ee.Filter.date('2019-07-15')), visTp,\n    'Daily total precipitation sums');\nMap.addLayer(\n    era5_2d.filter(ee.Filter.date('2019-07-15')), vis2mt,\n    'Daily mean 2m dewpoint temperature');\nMap.addLayer(\n    era5_2mt.filter(ee.Filter.date('2019-07-15')), vis2mt,\n    'Daily mean 2m air temperature');\nMap.addLayer(\n    era5_u_wind_10m.filter(ee.Filter.date('2019-07-15')), visWind,\n    'Daily mean 10m u-component of wind');\nMap.addLayer(\n    era5_sp.filter(ee.Filter.date('2019-07-15')), visPressure,\n    'Daily mean surface pressure');\n\nMap.setCenter(21.2, 22.2, 2);\n", "environment": "[]"}, {"name": "ECMWF_ERA5_LAND_HOURLY", "code": "var dataset = ee.ImageCollection(\"ECMWF/ERA5_LAND/HOURLY\")\n                .filter(ee.Filter.date('2020-07-01', '2020-07-02'));\n\nvar visualization = {\n  bands: ['temperature_2m'],\n  min: 250.0,\n  max: 320.0,\n  palette: [\n    \"#000080\",\"#0000D9\",\"#4000FF\",\"#8000FF\",\"#0080FF\",\"#00FFFF\",\n    \"#00FF80\",\"#80FF00\",\"#DAFF00\",\"#FFFF00\",\"#FFF500\",\"#FFDA00\",\n    \"#FFB000\",\"#FFA400\",\"#FF4F00\",\"#FF2500\",\"#FF0A00\",\"#FF00FF\",\n  ]\n};\n\nMap.setCenter(22.2, 21.2, 0);\n\nMap.addLayer(dataset, visualization, \"Air temperature [K] at 2m height\");\n", "environment": "[]"}, {"name": "ECMWF_ERA5_LAND_MONTHLY", "code": "var dataset = ee.ImageCollection(\"ECMWF/ERA5_LAND/MONTHLY\")\n                .filter(ee.Filter.date('2020-07-01', '2020-08-01'));\n\nvar visualization = {\n  bands: ['temperature_2m'],\n  min: 250.0,\n  max: 320.0,\n  palette: [\n    \"#000080\",\"#0000D9\",\"#4000FF\",\"#8000FF\",\"#0080FF\",\"#00FFFF\",\n    \"#00FF80\",\"#80FF00\",\"#DAFF00\",\"#FFFF00\",\"#FFF500\",\"#FFDA00\",\n    \"#FFB000\",\"#FFA400\",\"#FF4F00\",\"#FF2500\",\"#FF0A00\",\"#FF00FF\",\n  ]\n};\n\nMap.setCenter(22.2, 21.2, 0);\n\nMap.addLayer(dataset, visualization, \"Air temperature [K] at 2m height\");\n", "environment": "[]"}, {"name": "ECMWF_ERA5_LAND_MONTHLY_BY_HOUR", "code": "var dataset = ee.ImageCollection(\"ECMWF/ERA5_LAND/MONTHLY_BY_HOUR\")\n                .filter(ee.Filter.date('2020-07-01', '2020-08-01'));\n\nvar visualization = {\n  bands: ['temperature_2m'],\n  min: 250.0,\n  max: 320.0,\n  palette: [\n    \"#000080\",\"#0000D9\",\"#4000FF\",\"#8000FF\",\"#0080FF\",\"#00FFFF\",\n    \"#00FF80\",\"#80FF00\",\"#DAFF00\",\"#FFFF00\",\"#FFF500\",\"#FFDA00\",\n    \"#FFB000\",\"#FFA400\",\"#FF4F00\",\"#FF2500\",\"#FF0A00\",\"#FF00FF\",\n  ]\n};\n\nMap.setCenter(22.2, 21.2, 0);\n\nMap.addLayer(dataset, visualization, \"Air temperature [K] at 2m height\");\n", "environment": "[]"}, {"name": "ECMWF_ERA5_MONTHLY", "code": "var dataset = ee.ImageCollection(\"ECMWF/ERA5/MONTHLY\");\n\nvar visualization = {\n  bands: ['mean_2m_air_temperature'],\n  min: 250.0,\n  max: 320.0,\n  palette: [\n    \"#000080\",\"#0000D9\",\"#4000FF\",\"#8000FF\",\"#0080FF\",\"#00FFFF\",\n    \"#00FF80\",\"#80FF00\",\"#DAFF00\",\"#FFFF00\",\"#FFF500\",\"#FFDA00\",\n    \"#FFB000\",\"#FFA400\",\"#FF4F00\",\"#FF2500\",\"#FF0A00\",\"#FF00FF\",\n  ]\n};\n\nMap.setCenter(22.2, 21.2, 0);\n\nMap.addLayer(dataset, visualization, \"Monthly average air temperature [K] at 2m height\");", "environment": "[]"}, {"name": "EO1_HYPERION", "code": "var dataset = ee.ImageCollection('EO1/HYPERION')\n                  .filter(ee.Filter.date('2016-01-01', '2017-03-01'));\nvar rgb = dataset.select(['B050', 'B023', 'B015']);\nvar rgbVis = {\n  min: 1000.0,\n  max: 14000.0,\n  gamma: 2.5,\n};\nMap.setCenter(162.0044, -77.3463, 9);\nMap.addLayer(rgb.median(), rgbVis, 'RGB');\n", "environment": "[]"}, {"name": "EPA_Ecoregions_2013_L3", "code": "var dataset = ee.FeatureCollection('EPA/Ecoregions/2013/L3');\nvar visParams = {\n  palette: ['0a3b04', '1a9924', '15d812'],\n  min: 23.0,\n  max: 3.57e+11,\n  opacity: 0.8,\n};\nvar image = ee.Image().float().paint(dataset, 'shape_area');\nMap.setCenter(-99.814, 40.166, 5);\nMap.addLayer(image, visParams, 'EPA/Ecoregions/2013/L3');\nMap.addLayer(dataset, null, 'for Inspector', false);\n", "environment": "[]"}, {"name": "EPA_Ecoregions_2013_L3_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('EPA/Ecoregions/2013/L3_FeatureView');\n\nvar visParams = {\n  color: {\n    property: 'shape_area',\n    mode: 'linear',\n    palette: ['0a3b04', '1a9924', '15d812'],\n    min: 23.0,\n    max: 3.57e+11\n  },\n  opacity: 0.8,\n  polygonStrokeOpacity: 0\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('EPA/Ecoregions/2013/L3');\n\nMap.setCenter(-99.814, 40.166, 5);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "EPA_Ecoregions_2013_L4", "code": "var dataset = ee.FeatureCollection('EPA/Ecoregions/2013/L4');\nvar visParams = {\n  palette: ['0a3b04', '1a9924', '15d812'],\n  min: 0.0,\n  max: 67800000000.0,\n  opacity: 0.8,\n};\nvar image = ee.Image().float().paint(dataset, 'shape_area');\nMap.setCenter(-99.814, 40.166, 5);\nMap.addLayer(image, visParams, 'EPA/Ecoregions/2013/L4');\nMap.addLayer(dataset, null, 'for Inspector', false);\n", "environment": "[]"}, {"name": "EPA_Ecoregions_2013_L4_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('EPA/Ecoregions/2013/L4_FeatureView');\n\nvar visParams = {\n  color: {\n    property: 'shape_area',\n    mode: 'linear',\n    palette: ['0a3b04', '1a9924', '15d812'],\n    min: 0.0,\n    max: 67800000000.0\n  },\n  opacity: 0.8,\n  polygonStrokeOpacity: 0\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('EPA/Ecoregions/2013/L4');\n\nMap.setCenter(-99.814, 40.166, 5);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "ESA_CCI_FireCCI_5_1", "code": "// Visualize FireCCI51 for one year\nvar dataset = ee.ImageCollection('ESA/CCI/FireCCI/5_1')\n                  .filterDate('2020-01-01', '2020-12-31');\nvar burnedArea = dataset.select('BurnDate');\n\n// Use a circular palette to assign colors to date of first detection\nvar baVis = {\n  min: 1,\n  max: 366,\n  palette: [\n    'ff0000', 'fd4100', 'fb8200', 'f9c400', 'f2ff00', 'b6ff05',\n    '7aff0a', '3eff0f', '02ff15', '00ff55', '00ff99', '00ffdd',\n    '00ddff', '0098ff', '0052ff', '0210ff', '3a0dfb', '7209f6',\n    'a905f1', 'e102ed', 'ff00cc', 'ff0089', 'ff0047', 'ff0004'\n  ]\n};\nvar maxBA = burnedArea.max();\n\nMap.setCenter(0, 18, 2.1);\nMap.addLayer(maxBA, baVis, 'Burned Area');\n", "environment": "[]"}, {"name": "ESA_GLOBCOVER_L4_200901_200912_V2_3", "code": "var dataset = ee.Image('ESA/GLOBCOVER_L4_200901_200912_V2_3');\nvar landcover = dataset.select('landcover');\nMap.setCenter(-88.6, 26.4, 3);\nMap.addLayer(landcover, {}, 'Landcover');\n", "environment": "[]"}, {"name": "ESA_WorldCover_v100", "code": "var dataset = ee.ImageCollection(\"ESA/WorldCover/v100\").first();\n\nvar visualization = {\n  bands: ['Map'],\n};\n\nMap.centerObject(dataset);\n\nMap.addLayer(dataset, visualization, \"Landcover\");\n", "environment": "[]"}, {"name": "FAO_GAUL_2015_level0", "code": "var dataset = ee.FeatureCollection(\"FAO/GAUL/2015/level0\");\n\nMap.setCenter(7.82, 49.1, 4);\n\nvar styleParams = {\n  fillColor: 'b5ffb4',\n  color: '00909F',\n  width: 1.0,\n};\n\ndataset = dataset.style(styleParams);\n\nMap.addLayer(dataset, {}, 'Country Boundaries');\n", "environment": "[]"}, {"name": "FAO_GAUL_2015_level0_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('FAO/GAUL/2015/level0_FeatureView');\n\nvar visParams = {\n  color: '00909F',\n  fillColor: 'b5ffb4',\n  opacity: 1,\n  width: 1,\n  pointSize: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Country Boundaries');\n\nMap.setCenter(7.82, 49.1, 4);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "FAO_GAUL_2015_level1", "code": "var dataset = ee.FeatureCollection(\"FAO/GAUL/2015/level1\");\n\nMap.setCenter(7.82, 49.1, 4);\n\nvar styleParams = {\n  fillColor: 'b5ffb4',\n  color: '00909F',\n  width: 1.0,\n};\n\ndataset = dataset.style(styleParams);\n\nMap.addLayer(dataset, {}, 'First Level Administrative Units');\n", "environment": "[]"}, {"name": "FAO_GAUL_2015_level1_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('FAO/GAUL/2015/level1_FeatureView');\n\nvar visParams = {\n  color: '00909F',\n  fillColor: 'b5ffb4',\n  opacity: 1,\n  width: 1,\n  pointSize: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('First Level Administrative Units');\n\nMap.setCenter(7.82, 49.1, 4);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "FAO_GAUL_2015_level2", "code": "var dataset = ee.FeatureCollection(\"FAO/GAUL/2015/level2\");\n\nMap.setCenter(12.876, 42.682, 5);\n\nvar styleParams = {\n  fillColor: 'b5ffb4',\n  color: '00909F',\n  width: 1.0,\n};\n\ndataset = dataset.style(styleParams);\n\nMap.addLayer(dataset, {}, 'Second Level Administrative Units');\n", "environment": "[]"}, {"name": "FAO_GAUL_2015_level2_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('FAO/GAUL/2015/level2_FeatureView');\n\nvar visParams = {\n  color: '00909F',\n  fillColor: 'b5ffb4',\n  opacity: 1,\n  width: 1,\n  pointSize: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Second Level Administrative Units');\n\nMap.setCenter(7.82, 49.1, 4);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "FAO_GAUL_SIMPLIFIED_500m_2015_level0", "code": "var dataset = ee.FeatureCollection(\"FAO/GAUL_SIMPLIFIED_500m/2015/level0\");\n\nMap.setCenter(7.82, 49.1, 4);\n\nvar styleParams = {\n  fillColor: 'b5ffb4',\n  color: '00909F',\n  width: 1.0,\n};\n\ndataset = dataset.style(styleParams);\n\nMap.addLayer(dataset, {}, 'Country Boundaries');\n", "environment": "[]"}, {"name": "FAO_GAUL_SIMPLIFIED_500m_2015_level0_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer(\n  'FAO/GAUL_SIMPLIFIED_500m/2015/level0_FeatureView');\n\nvar visParams = {\n  color: '00909F',\n  fillColor: 'b5ffb4',\n  opacity: 1,\n  width: 1,\n  pointSize: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Country Boundaries');\n\nMap.setCenter(7.82, 49.1, 4);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "FAO_GAUL_SIMPLIFIED_500m_2015_level1", "code": "var dataset = ee.FeatureCollection(\"FAO/GAUL_SIMPLIFIED_500m/2015/level1\");\n\nMap.setCenter(7.82, 49.1, 4);\n\nvar styleParams = {\n  fillColor: 'b5ffb4',\n  color: '00909F',\n  width: 1.0,\n};\n\ndataset = dataset.style(styleParams);\n\nMap.addLayer(dataset, {}, 'First Level Administrative Units');\n", "environment": "[]"}, {"name": "FAO_GAUL_SIMPLIFIED_500m_2015_level1_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer(\n  'FAO/GAUL_SIMPLIFIED_500m/2015/level1_FeatureView');\n\nvar visParams = {\n  color: '00909F',\n  fillColor: 'b5ffb4',\n  opacity: 1,\n  width: 1,\n  pointSize: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('First Level Administrative Units');\n\nMap.setCenter(7.82, 49.1, 4);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "FAO_GAUL_SIMPLIFIED_500m_2015_level2", "code": "var dataset = ee.FeatureCollection(\"FAO/GAUL_SIMPLIFIED_500m/2015/level2\");\n\nMap.setCenter(12.876, 42.682, 5);\n\nvar styleParams = {\n  fillColor: 'b5ffb4',\n  color: '00909F',\n  width: 1.0,\n};\n\ndataset = dataset.style(styleParams);\n\nMap.addLayer(dataset, {}, 'Second Level Administrative Units');\n", "environment": "[]"}, {"name": "FAO_GAUL_SIMPLIFIED_500m_2015_level2_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer(\n  'FAO/GAUL_SIMPLIFIED_500m/2015/level2_FeatureView');\n\nvar visParams = {\n  color: '00909F',\n  fillColor: 'b5ffb4',\n  opacity: 1,\n  width: 1,\n  pointSize: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Second Level Administrative Units');\n\nMap.setCenter(7.82, 49.1, 4);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "FAO_GHG_1_DROSA_A", "code": "var dataset = ee.ImageCollection(\"FAO/GHG/1/DROSA_A\");\n\nvar visualization = {\n  bands: ['cropland'],\n  min: 1.0,\n  max: 60.0,\n  palette: ['white', 'red']\n};\n\nMap.setCenter(108.0, -0.4, 6);\n\nMap.addLayer(dataset, visualization, \"Cropland area drained (Annual)\");", "environment": "[]"}, {"name": "FAO_GHG_1_DROSE_A", "code": "var dataset = ee.ImageCollection(\"FAO/GHG/1/DROSE_A\");\n\nvar visualization = {\n  bands: ['croplandc'],\n  min: 0.1,\n  max: 0.1,\n  palette: ['yellow', 'red']\n};\n\nMap.setCenter(108.0, -0.4, 6);\n\nMap.addLayer(dataset, visualization, \"Cropland C emissions (Annual)\");", "environment": "[]"}, {"name": "FAO_WAPOR_2_L1_AETI_D", "code": "var coll = ee.ImageCollection('FAO/WAPOR/2/L1_AETI_D');\nvar image = coll.first();\nMap.setCenter(17.5, 20, 3);\nMap.addLayer(image, {min: 0, max: 50});\n", "environment": "[]"}, {"name": "FAO_WAPOR_2_L1_E_D", "code": "var coll = ee.ImageCollection('FAO/WAPOR/2/L1_E_D');\nvar image = coll.first();\nMap.setCenter(17.5, 20, 3);\nMap.addLayer(image, {min: 0, max: 10});\n", "environment": "[]"}, {"name": "FAO_WAPOR_2_L1_I_D", "code": "var coll = ee.ImageCollection('FAO/WAPOR/2/L1_I_D');\nvar image = coll.first();\nMap.setCenter(17.5, 20, 3);\nMap.addLayer(image, {min: 0, max: 50});\n", "environment": "[]"}, {"name": "FAO_WAPOR_2_L1_NPP_D", "code": "var coll = ee.ImageCollection('FAO/WAPOR/2/L1_NPP_D');\nvar image = coll.first();\nMap.setCenter(17.5, 20, 3);\nMap.addLayer(image, {min: 0, max: 5000});\n", "environment": "[]"}, {"name": "FAO_WAPOR_2_L1_RET_D", "code": "var coll = ee.ImageCollection('FAO/WAPOR/2/L1_RET_D');\nvar image = coll.first();\nMap.setCenter(17.5, 20, 3);\nMap.addLayer(image, {min: 0, max: 100});\n", "environment": "[]"}, {"name": "FAO_WAPOR_2_L1_RET_E", "code": "var coll = ee.ImageCollection('FAO/WAPOR/2/L1_RET_E');\nvar image = coll.first();\nMap.setCenter(17.5, 20, 3);\nMap.addLayer(image, {min: 0, max: 100});\n", "environment": "[]"}, {"name": "FAO_WAPOR_2_L1_T_D", "code": "var coll = ee.ImageCollection('FAO/WAPOR/2/L1_T_D');\nvar image = coll.first();\nMap.setCenter(17.5, 20, 3);\nMap.addLayer(image, {min: 0, max: 50});\n", "environment": "[]"}, {"name": "FIRMS", "code": "var dataset = ee.ImageCollection('FIRMS').filter(\n    ee.Filter.date('2018-08-01', '2018-08-10'));\nvar fires = dataset.select('T21');\nvar firesVis = {\n  min: 325.0,\n  max: 400.0,\n  palette: ['red', 'orange', 'yellow'],\n};\nMap.setCenter(-119.086, 47.295, 6);\nMap.addLayer(fires, firesVis, 'Fires');\n", "environment": "[]"}, {"name": "FORMA_FORMA_500m", "code": "var dataset = ee.Image('FORMA/FORMA_500m');\n\nvar visualization = {\n  bands: ['constant'],\n  min: 1134979200.0,\n  max: 1433919600.0,\n  palette: ['ff0000']\n};\n\nMap.setCenter(-51.482, -0.835, 6);\n\nMap.addLayer(dataset, visualization, 'Alert Areas');\n", "environment": "[]"}, {"name": "GFW_GFF_V1_fishing_hours", "code": "var dataset = ee.ImageCollection('GFW/GFF/V1/fishing_hours')\n                  .filter(ee.Filter.date('2016-12-01', '2017-01-01'));\nvar trawlers = dataset.select('trawlers');\nvar trawlersVis = {\n  min: 0.0,\n  max: 5.0,\n};\nMap.setCenter(16.201, 36.316, 7);\nMap.addLayer(trawlers.max(), trawlersVis, 'Trawlers');\n", "environment": "[]"}, {"name": "GFW_GFF_V1_vessel_hours", "code": "var dataset = ee.ImageCollection('GFW/GFF/V1/vessel_hours')\n                  .filter(ee.Filter.date('2016-12-01', '2017-01-01'));\nvar trawlers = dataset.select('trawlers');\nvar trawlersVis = {\n  min: 0.0,\n  max: 5.0,\n};\nMap.setCenter(130.61, 34.287, 8);\nMap.addLayer(trawlers.max(), trawlersVis, 'Trawlers');\n", "environment": "[]"}, {"name": "GLCF_GLS_TCC", "code": "var dataset = ee.ImageCollection('GLCF/GLS_TCC')\n                  .filter(ee.Filter.date('2010-01-01', '2010-12-31'));\nvar treeCanopyCover = dataset.select('tree_canopy_cover');\nvar treeCanopyCoverVis = {\n  min: 0.0,\n  max: 100.0,\n  palette: ['ffffff', 'afce56', '5f9c00', '0e6a00', '003800'],\n};\nMap.setCenter(-88.6, 26.4, 3);\nMap.addLayer(treeCanopyCover, treeCanopyCoverVis, 'Tree Canopy Cover');\n", "environment": "[]"}, {"name": "GLCF_GLS_WATER", "code": "var dataset = ee.ImageCollection('GLCF/GLS_WATER');\nvar water = dataset.select('water');\nvar waterVis = {\n  min: 1.0,\n  max: 4.0,\n  palette: ['FAFAFA', '00C5FF', 'DF73FF', '828282', 'CCCCCC'],\n};\nMap.setCenter(-79.3094, 44.5693, 8);\nMap.addLayer(water, waterVis, 'Water');\n", "environment": "[]"}, {"name": "GLIMS_2016", "code": "var dataset = ee.FeatureCollection('GLIMS/2016');\nvar visParams = {\n  palette: ['gray', 'cyan', 'blue'],\n  min: 0.0,\n  max: 10.0,\n  opacity: 0.8,\n};\nvar image = ee.Image().float().paint(dataset, 'area');\nMap.setCenter(-26.763, 73.214, 6);\nMap.addLayer(image, visParams, 'GLIMS/2016');\nMap.addLayer(dataset, null, 'for Inspector', false);\n", "environment": "[]"}, {"name": "GLIMS_2016_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('GLIMS/2016_FeatureView');\n\nvar visParams = {\n  color: {\n    property: 'area',\n    mode: 'linear',\n    palette: ['gray', 'cyan', 'blue'],\n    min: 0.0,\n    max: 10.0\n  },\n  opacity: 0.8,\n  polygonStrokeOpacity: 0\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('GLIMS/2016');\n\nMap.setCenter(-26.763, 73.214, 6);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "GLIMS_20171027", "code": "var dataset = ee.FeatureCollection('GLIMS/20171027');\nvar visParams = {\n  palette: ['gray', 'cyan', 'blue'],\n  min: 0.0,\n  max: 10.0,\n  opacity: 0.8,\n};\nvar image = ee.Image().float().paint(dataset, 'area');\nMap.setCenter(-35.618, 66.743, 7);\nMap.addLayer(image, visParams, 'GLIMS/20171027');\nMap.addLayer(dataset, null, 'for Inspector', false);\n", "environment": "[]"}, {"name": "GLIMS_20171027_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('GLIMS/20171027_FeatureView');\n\nvar visParams = {\n  color: {\n    property: 'area',\n    mode: 'linear',\n    palette: ['gray', 'cyan', 'blue'],\n    min: 0.0,\n    max: 10.0\n  },\n  opacity: 0.8,\n  polygonStrokeOpacity: 0\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('GLIMS/20171027');\n\nMap.setCenter(-35.618, 66.743, 7);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "GLIMS_20210914", "code": "var dataset = ee.FeatureCollection('GLIMS/20210914');\nvar visParams = {\n  palette: ['gray', 'cyan', 'blue'],\n  min: 0.0,\n  max: 10.0,\n  opacity: 0.8,\n};\nvar image = ee.Image().float().paint(dataset, 'area');\nMap.setCenter(-35.618, 66.743, 7);\nMap.addLayer(image, visParams, 'GLIMS/20210914');\nMap.addLayer(dataset, null, 'for Inspector', false);\n", "environment": "[]"}, {"name": "GLIMS_20210914_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('GLIMS/20210914_FeatureView');\n\nvar visParams = {\n  color: {\n    property: 'area',\n    mode: 'linear',\n    palette: ['gray', 'cyan', 'blue'],\n    min: 0.0,\n    max: 10.0\n  },\n  opacity: 0.8,\n  polygonStrokeOpacity: 0\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('GLIMS/20210914');\n\nMap.setCenter(-35.618, 66.743, 7);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "GLIMS_current", "code": "var dataset = ee.FeatureCollection('GLIMS/current');\nvar visParams = {\n  palette: ['gray', 'cyan', 'blue'],\n  min: 0.0,\n  max: 10.0,\n  opacity: 0.8,\n};\nvar image = ee.Image().float().paint(dataset, 'area');\nMap.setCenter(-35.618, 66.743, 7);\nMap.addLayer(image, visParams, 'GLIMS/current');\nMap.addLayer(dataset, null, 'for Inspector', false);\n", "environment": "[]"}, {"name": "GLIMS_current_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('GLIMS/current_FeatureView');\n\nvar visParams = {\n  color: {\n    property: 'area',\n    mode: 'linear',\n    palette: ['gray', 'cyan', 'blue'],\n    min: 0.0,\n    max: 10.0\n  },\n  opacity: 0.8,\n  polygonStrokeOpacity: 0\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('GLIMS/current');\n\nMap.setCenter(-35.618, 66.743, 7);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "GLOBAL_FLOOD_DB_MODIS_EVENTS_V1", "code": "var gfd = ee.ImageCollection('GLOBAL_FLOOD_DB/MODIS_EVENTS/V1');\n\n// An individual flood event - flooding due to Hurricane Isaac in the USA.\nvar hurricaneIsaacDartmouthId = 3977;\nvar hurricaneIsaacUsa = ee.Image(\n    gfd.filterMetadata('id', 'equals', hurricaneIsaacDartmouthId).first());\nMap.setOptions('SATELLITE');\nMap.setCenter(-90.2922, 29.4064, 9);\nMap.addLayer(\n  hurricaneIsaacUsa.select('flooded').selfMask(),\n  {min: 0, max: 1, palette: '001133'},\n  'Hurricane Isaac - Inundation Extent');\n\n// The duration (number of days a flood event lasted).\nvar durationPalette = ['C3EFFE', '1341E8', '051CB0', '001133'];\nMap.addLayer(\n  hurricaneIsaacUsa.select('duration').selfMask(),\n  {min: 0, max: 4, palette: durationPalette},\n  'Hurricane Isaac - Duration');\n\n// Map all floods to generate the satellite-observed historical flood plain.\nvar gfdFloodedSum = gfd.select('flooded').sum();\nMap.addLayer(\n  gfdFloodedSum.selfMask(),\n  {min: 0, max: 10, palette: durationPalette},\n  'GFD Satellite Observed Flood Plain');\n\n// Overlay permanent water to distinguish flood water.\nvar jrc = gfd.select('jrc_perm_water').sum().gte(1);\nMap.addLayer(\n  jrc.selfMask(),\n  {min: 0, max: 1, palette: 'C3EFFE'},\n  'JRC Permanent Water');\n", "environment": "[]"}, {"name": "GOOGLE_DYNAMICWORLD_V1", "code": "// Construct a collection of corresponding Dynamic World and Sentinel-2 for\n// inspection. Filter the DW and S2 collections by region and date.\nvar COL_FILTER = ee.Filter.and(\n    ee.Filter.bounds(ee.Geometry.Point(20.6729, 52.4305)),\n    ee.Filter.date('2021-04-02', '2021-04-03'));\n\nvar dwCol = ee.ImageCollection('GOOGLE/DYNAMICWORLD/V1').filter(COL_FILTER);\nvar s2Col = ee.ImageCollection('COPERNICUS/S2').filter(COL_FILTER);\n\n// Join corresponding DW and S2 images (by system:index).\nvar DwS2Col = ee.Join.saveFirst('s2_img').apply(dwCol, s2Col,\n    ee.Filter.equals({leftField: 'system:index', rightField: 'system:index'}));\n\n// Extract an example DW image and its source S2 image.\nvar dwImage = ee.Image(DwS2Col.first());\nvar s2Image = ee.Image(dwImage.get('s2_img'));\n\n// Create a visualization that blends DW class label with probability.\n// Define list pairs of DW LULC label and color.\nvar CLASS_NAMES = [\n    'water', 'trees', 'grass', 'flooded_vegetation', 'crops',\n    'shrub_and_scrub', 'built', 'bare', 'snow_and_ice'];\n\nvar VIS_PALETTE = [\n    '419BDF', '397D49', '88B053', '7A87C6',\n    'E49635', 'DFC35A', 'C4281B', 'A59B8F',\n    'B39FE1'];\n\n// Create an RGB image of the label (most likely class) on [0, 1].\nvar dwRgb = dwImage\n    .select('label')\n    .visualize({min: 0, max: 8, palette: VIS_PALETTE})\n    .divide(255);\n\n// Get the most likely class probability.\nvar top1Prob = dwImage.select(CLASS_NAMES).reduce(ee.Reducer.max());\n\n// Create a hillshade of the most likely class probability on [0, 1];\nvar top1ProbHillshade =\n    ee.Terrain.hillshade(top1Prob.multiply(100))\n    .divide(255);\n\n// Combine the RGB image with the hillshade.\nvar dwRgbHillshade = dwRgb.multiply(top1ProbHillshade);\n\n// Display the Dynamic World visualization with the source Sentinel-2 image.\nMap.setCenter(20.6729, 52.4305, 12);\nMap.addLayer(\n    s2Image,\n    {min: 0, max: 3000, bands: ['B4', 'B3', 'B2']},\n    'Sentinel-2 L1C');\nMap.addLayer(\n    dwRgbHillshade,\n    {min: 0, max: 0.65},\n    'Dynamic World');\n", "environment": "[]"}, {"name": "GOOGLE_Research_open-buildings_v1_polygons", "code": "// Visualization of GOOGLE/Research/open-buildings/v1/polygons.\n\nvar t = ee.FeatureCollection('GOOGLE/Research/open-buildings/v1/polygons');\n\nvar t_060_065 = t.filter('confidence \u003e= 0.60 \u0026\u0026 confidence \u003c 0.65');\nvar t_065_070 = t.filter('confidence \u003e= 0.65 \u0026\u0026 confidence \u003c 0.70');\nvar t_gte_070 = t.filter('confidence \u003e= 0.70');\n\nMap.addLayer(t_060_065, {color: 'FF0000'}, 'Buildings confidence [0.60; 0.65)');\nMap.addLayer(t_065_070, {color: 'FFFF00'}, 'Buildings confidence [0.65; 0.70)');\nMap.addLayer(t_gte_070, {color: '00FF00'}, 'Buildings confidence \u003e= 0.70');\nMap.setCenter(3.389, 6.492, 17);  // Lagos, Nigeria\nMap.setOptions('SATELLITE');\n", "environment": "[]"}, {"name": "GOOGLE_Research_open-buildings_v1_polygons_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer(\n  'GOOGLE/Research/open-buildings/v1/polygons_FeatureView');\n\nvar visParams = {\n  rules: [\n    {\n      filter: ee.Filter.expression('confidence \u003e= 0.60 \u0026\u0026 confidence \u003c 0.65'),\n      color: 'FF0000'\n    },\n    {\n      filter: ee.Filter.expression('confidence \u003e= 0.65 \u0026\u0026 confidence \u003c 0.70'),\n      color: 'FFFF00'\n    },\n    {\n      filter: ee.Filter.expression('confidence \u003e= 0.70'),\n      color: '00FF00'\n    },\n  ]\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Buildings');\n\nMap.setCenter(3.389, 6.492, 17);  // Lagos, Nigeria\nMap.add(fvLayer);\nMap.setOptions('SATELLITE');\n", "environment": "[]"}, {"name": "GRIDMET_DROUGHT", "code": "var collection = ee.ImageCollection('GRIDMET/DROUGHT');\nprint(collection);\n\n// Filter by date\nvar dS = '2020-03-30';\nvar dE = '2020-03-30';\nvar dSUTC = ee.Date(dS, 'GMT');\nvar dEUTC = ee.Date(dE, 'GMT');\nvar filtered = collection.filterDate(dSUTC, dEUTC.advance(1, 'day'));\nprint(collection.aggregate_array('system:index'));\n\n// Select variables pdsi and z\nvar PDSI = filtered.select('pdsi');\nvar Z = filtered.select('z');\n\n// Select variables for SPI/SPEI/EDDI\n// Note that possible timescales for SPI/SPEI/EDDI are:\n// 14d (14 day), 30d (30 day), 90d (90 day), 180d (180 day),\n// 1y (1 year), 2y (2 year), 5y (5 year)\n// Here we choose 2years = 48 months\nvar SPI2y = filtered.select('spi2y');\nvar SPEI2y = filtered.select('spei2y');\nvar EDDI2y = filtered.select('spei2y');\n\n// Make a color palette that is similar to USDM drought classification\nvar usdmColors = \"0000aa,0000ff,00aaff,00ffff,aaff55,ffffff,ffff00,fcd37f,ffaa00,e60000,730000\";\n\n// Make color options for standardized variables spi/spei/eddi\nvar minColorbar= -2.5;\nvar maxColorbar= 2.5;\nvar colorbarOptions1 = {\n  'min':minColorbar,\n  'max':maxColorbar,\n  'palette': usdmColors\n};\n\n// Make color options for Palmer variables psdi/z\nvar minColorbar= -6;\nvar maxColorbar= 6;\nvar colorbarOptions2 = {\n  'min':minColorbar,\n  'max':maxColorbar,\n  'palette': usdmColors\n};\n\n// Add map layers to Google Map\nMap.addLayer(ee.Image(PDSI.first()), colorbarOptions2, 'PDSI');\nMap.addLayer(ee.Image(Z.first()), colorbarOptions2, 'Palmer-Z');\nMap.addLayer(ee.Image(SPI2y.first()), colorbarOptions1, 'SPI-48months');\nMap.addLayer(ee.Image(SPEI2y.first()), colorbarOptions1, 'SPEI-48months');\nMap.addLayer(ee.Image(EDDI2y.first()), colorbarOptions1, 'EDDI-48months');\n", "environment": "[]"}, {"name": "HYCOM_GLBu0_08_sea_surface_elevation", "code": "var dataset = ee.ImageCollection('HYCOM/GLBu0_08/sea_surface_elevation')\n                  .filter(ee.Filter.date('2018-08-01', '2018-08-15'));\nvar surfaceElevation = dataset.select('surface_elevation');\nvar surfaceElevationVis = {\n  min: -2000.0,\n  max: 2000.0,\n  palette: ['blue', 'cyan', 'yellow', 'red'],\n};\nMap.setCenter(-28.1, 28.3, 1);\nMap.addLayer(surfaceElevation, surfaceElevationVis, 'Surface Elevation');\n", "environment": "[]"}, {"name": "HYCOM_GLBu0_08_sea_temp_salinity", "code": "var dataset = ee.ImageCollection('HYCOM/GLBu0_08/sea_temp_salinity')\n                  .filter(ee.Filter.date('2018-08-01', '2018-08-15'));\nvar seaWaterTemperature = dataset.select('sst_0');\nvar visParams = {\n  min: -20000.0,\n  max: 15000.0,\n  palette: ['000000', '005aff', '43c8c8', 'fff700', 'ff0000'],\n};\nMap.setCenter(-88.6, 26.4, 1);\nMap.addLayer(seaWaterTemperature, visParams, 'Sea Water Temperature');\n", "environment": "[]"}, {"name": "HYCOM_GLBu0_08_sea_water_velocity", "code": "var dataset = ee.ImageCollection('HYCOM/GLBu0_08/sea_water_velocity')\n                  .filter(ee.Filter.date('2018-08-01', '2018-08-15'));\nvar waterVelocityVis = {\n  min: -1000.0,\n  max: 4000.0,\n  bands: ['velocity_u_0', 'velocity_v_0', 'velocity_v_0'],\n};\nMap.setCenter(-88.6, 26.4, 1);\nMap.addLayer(dataset, waterVelocityVis, 'Water Velocity');\n", "environment": "[]"}, {"name": "HYCOM_sea_surface_elevation", "code": "var dataset = ee.ImageCollection('HYCOM/sea_surface_elevation')\n                  .filter(ee.Filter.date('2018-08-01', '2018-08-15'));\nvar surfaceElevation = dataset.select('surface_elevation');\nvar surfaceElevationVis = {\n  min: -2000.0,\n  max: 2000.0,\n  palette: ['blue', 'cyan', 'yellow', 'red'],\n};\nMap.setCenter(-28.1, 28.3, 1);\nMap.addLayer(surfaceElevation, surfaceElevationVis, 'Surface Elevation');\n", "environment": "[]"}, {"name": "HYCOM_sea_temp_salinity", "code": "// Import the time series of global images, filter 15 days in August, 2018.\nvar dataset = ee.ImageCollection('HYCOM/sea_temp_salinity')\n    .filter(ee.Filter.date('2018-08-01', '2018-08-15'));\n\n// Select water temperature at 0 meters and scale to degrees C.\nvar seaWaterTemperature = dataset.select('water_temp_0')\n    .map(function scaleAndOffset(image) {\n      return ee.Image(image).multiply(0.001).add(20);\n    });\n\n// Define visualization parameters.\nvar visParams = {\n  min: -2.0,  // Degrees C\n  max: 34.0,\n  palette: ['000000', '005aff', '43c8c8', 'fff700', 'ff0000'],\n};\n\n// Display mean 15-day temperature on the map.\nMap.setCenter(-88.6, 26.4, 1);\nMap.addLayer(seaWaterTemperature.mean(), visParams, 'Sea Water Temperature');\n", "environment": "[]"}, {"name": "HYCOM_sea_water_velocity", "code": "var velocity = ee.Image('HYCOM/sea_water_velocity/2014040700').divide(1000);\n\n// Compute speed from velocity.\nMap.addLayer(\n    velocity.select('velocity_u_0').hypot(velocity.select('velocity_v_0')));\n\nMap.setCenter(-60, 33, 5);\n", "environment": "[]"}, {"name": "IDAHO_EPSCOR_GRIDMET", "code": "var dataset = ee.ImageCollection('IDAHO_EPSCOR/GRIDMET')\n                  .filter(ee.Filter.date('2018-08-01', '2018-08-15'));\nvar maximumTemperature = dataset.select('tmmx');\nvar maximumTemperatureVis = {\n  min: 290.0,\n  max: 314.0,\n  palette: ['d8d8d8', '4addff', '5affa3', 'f2ff89', 'ff725c'],\n};\nMap.setCenter(-115.356, 38.686, 5);\nMap.addLayer(maximumTemperature, maximumTemperatureVis, 'Maximum Temperature');\n", "environment": "[]"}, {"name": "IDAHO_EPSCOR_MACAv2_METDATA", "code": "var dataset = ee.ImageCollection('IDAHO_EPSCOR/MACAv2_METDATA')\n                  .filter(ee.Filter.date('2018-08-01', '2018-08-15'));\nvar maximumTemperature = dataset.select('tasmax');\nvar maximumTemperatureVis = {\n  min: 290.0,\n  max: 314.0,\n  palette: ['d8d8d8', '4addff', '5affa3', 'f2ff89', 'ff725c'],\n};\nMap.setCenter(-84.37, 33.5, 5);\nMap.addLayer(maximumTemperature, maximumTemperatureVis, 'Maximum Temperature');\n", "environment": "[]"}, {"name": "IDAHO_EPSCOR_MACAv2_METDATA_MONTHLY", "code": "var dataset = ee.ImageCollection('IDAHO_EPSCOR/MACAv2_METDATA_MONTHLY')\n                  .filter(ee.Filter.date('2018-07-01', '2018-08-01'));\nvar maximumTemperature = dataset.select('tasmax');\nvar maximumTemperatureVis = {\n  min: 290.0,\n  max: 314.0,\n  palette: ['d8d8d8', '4addff', '5affa3', 'f2ff89', 'ff725c'],\n};\nMap.setCenter(-115.356, 38.686, 5);\nMap.addLayer(maximumTemperature, maximumTemperatureVis, 'Maximum Temperature');\n", "environment": "[]"}, {"name": "IDAHO_EPSCOR_PDSI", "code": "var dataset = ee.ImageCollection('IDAHO_EPSCOR/PDSI')\n                  .filter(ee.Filter.date('2018-07-01', '2018-08-01'));\nvar pdsi = dataset.select('pdsi');\nvar pdsiVis = {\n  min: -5.0,\n  max: 10.0,\n  palette: ['red', 'yellow', 'green', 'cyan', 'blue'],\n};\nMap.setCenter(-115.356, 38.686, 5);\nMap.addLayer(pdsi, pdsiVis, 'PDSI');\n", "environment": "[]"}, {"name": "IDAHO_EPSCOR_TERRACLIMATE", "code": "var dataset = ee.ImageCollection('IDAHO_EPSCOR/TERRACLIMATE')\n                  .filter(ee.Filter.date('2017-07-01', '2017-08-01'));\nvar maximumTemperature = dataset.select('tmmx');\nvar maximumTemperatureVis = {\n  min: -300.0,\n  max: 300.0,\n  palette: [\n    '1a3678', '2955bc', '5699ff', '8dbae9', 'acd1ff', 'caebff', 'e5f9ff',\n    'fdffb4', 'ffe6a2', 'ffc969', 'ffa12d', 'ff7c1f', 'ca531a', 'ff0000',\n    'ab0000'\n  ],\n};\nMap.setCenter(71.72, 52.48, 3);\nMap.addLayer(maximumTemperature, maximumTemperatureVis, 'Maximum Temperature');\n", "environment": "[]"}, {"name": "ISDASOIL_Africa_v1_aluminium_extractable", "code": "var mean_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#000004\" label=\"0-21.2\" opacity=\"1\" quantity=\"31\"/\u003e' +\n  '\u003cColorMapEntry color=\"#0C0927\" label=\"21.2-35.6\" opacity=\"1\" quantity=\"36\"/\u003e' +\n  '\u003cColorMapEntry color=\"#231151\" label=\"35.6-53.6\" opacity=\"1\" quantity=\"40\"/\u003e' +\n  '\u003cColorMapEntry color=\"#410F75\" label=\"53.6-65.7\" opacity=\"1\" quantity=\"42\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5F187F\" label=\"65.7-72.7\" opacity=\"1\" quantity=\"43\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7B2382\" label=\"72.7-80.5\" opacity=\"1\" quantity=\"44\"/\u003e' +\n  '\u003cColorMapEntry color=\"#982D80\" label=\"80.5-89\" opacity=\"1\" quantity=\"45\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B63679\" label=\"89-98.5\" opacity=\"1\" quantity=\"46\"/\u003e' +\n  '\u003cColorMapEntry color=\"#D3436E\" label=\"98.5-108.9\" opacity=\"1\" quantity=\"47\"/\u003e' +\n  '\u003cColorMapEntry color=\"#EB5760\" label=\"108.9-120.5\" opacity=\"1\" quantity=\"48\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F8765C\" label=\"120.5-133.3\" opacity=\"1\" quantity=\"49\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FD9969\" label=\"133.3-147.4\" opacity=\"1\" quantity=\"50\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBA80\" label=\"147.4-163\" opacity=\"1\" quantity=\"51\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FDDC9E\" label=\"163-199.3\" opacity=\"1\" quantity=\"53\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FCFDBF\" label=\"199.3-1800\" opacity=\"1\" quantity=\"55\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar mean_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#000004\" label=\"0-21.2\" opacity=\"1\" quantity=\"31\"/\u003e' +\n  '\u003cColorMapEntry color=\"#0C0927\" label=\"21.2-35.6\" opacity=\"1\" quantity=\"36\"/\u003e' +\n  '\u003cColorMapEntry color=\"#231151\" label=\"35.6-53.6\" opacity=\"1\" quantity=\"40\"/\u003e' +\n  '\u003cColorMapEntry color=\"#410F75\" label=\"53.6-65.7\" opacity=\"1\" quantity=\"42\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5F187F\" label=\"65.7-72.7\" opacity=\"1\" quantity=\"43\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7B2382\" label=\"72.7-80.5\" opacity=\"1\" quantity=\"44\"/\u003e' +\n  '\u003cColorMapEntry color=\"#982D80\" label=\"80.5-89\" opacity=\"1\" quantity=\"45\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B63679\" label=\"89-98.5\" opacity=\"1\" quantity=\"46\"/\u003e' +\n  '\u003cColorMapEntry color=\"#D3436E\" label=\"98.5-108.9\" opacity=\"1\" quantity=\"47\"/\u003e' +\n  '\u003cColorMapEntry color=\"#EB5760\" label=\"108.9-120.5\" opacity=\"1\" quantity=\"48\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F8765C\" label=\"120.5-133.3\" opacity=\"1\" quantity=\"49\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FD9969\" label=\"133.3-147.4\" opacity=\"1\" quantity=\"50\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBA80\" label=\"147.4-163\" opacity=\"1\" quantity=\"51\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FDDC9E\" label=\"163-199.3\" opacity=\"1\" quantity=\"53\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FCFDBF\" label=\"199.3-1800\" opacity=\"1\" quantity=\"55\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"5\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"9\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"10\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"12\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"14\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"5\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"9\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"10\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"12\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"14\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nMap.setCenter(25, -3, 2);\n\nvar raw = ee.Image(\"ISDASOIL/Africa/v1/aluminium_extractable\");\nMap.addLayer(\n    raw.select(0).sldStyle(mean_0_20), {},\n    \"Aluminium, extractable, mean visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(1).sldStyle(mean_20_50), {},\n    \"Aluminium, extractable, mean visualization, 20-50 cm\");\nMap.addLayer(\n    raw.select(2).sldStyle(stdev_0_20), {},\n    \"Aluminium, extractable, stdev visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(3).sldStyle(stdev_20_50), {},\n    \"Aluminium, extractable, stdev visualization, 20-50 cm\");\n\nvar converted = raw.divide(10).exp().subtract(1);\nMap.addLayer(\n    converted.select(0), {min: 0, max: 100},\n    \"Aluminium, extractable, mean, 0-20 cm\");\n", "environment": "[]"}, {"name": "ISDASOIL_Africa_v1_bedrock_depth", "code": "var mean_0_200 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#00204D\" label=\"0-13\" opacity=\"1\" quantity=\"13\"/\u003e' +\n  '\u003cColorMapEntry color=\"#002D6C\" label=\"13-26\" opacity=\"1\" quantity=\"26\"/\u003e' +\n  '\u003cColorMapEntry color=\"#16396D\" label=\"26-39\" opacity=\"1\" quantity=\"39\"/\u003e' +\n  '\u003cColorMapEntry color=\"#36476B\" label=\"39-52\" opacity=\"1\" quantity=\"52\"/\u003e' +\n  '\u003cColorMapEntry color=\"#4B546C\" label=\"52-65\" opacity=\"1\" quantity=\"65\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5C616E\" label=\"65-78\" opacity=\"1\" quantity=\"78\"/\u003e' +\n  '\u003cColorMapEntry color=\"#6C6E72\" label=\"78-91\" opacity=\"1\" quantity=\"91\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7C7B78\" label=\"91-104\" opacity=\"1\" quantity=\"104\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8E8A79\" label=\"104-117\" opacity=\"1\" quantity=\"117\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A09877\" label=\"117-130\" opacity=\"1\" quantity=\"130\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B3A772\" label=\"130-143\" opacity=\"1\" quantity=\"143\"/\u003e' +\n  '\u003cColorMapEntry color=\"#C6B66B\" label=\"143-156\" opacity=\"1\" quantity=\"156\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DBC761\" label=\"156-169\" opacity=\"1\" quantity=\"169\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0D852\" label=\"169-182\" opacity=\"1\" quantity=\"182\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FFEA46\" label=\"182-200\" opacity=\"1\" quantity=\"195\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_0_200 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"14\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"18\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"21\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"22\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"25\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar raw = ee.Image(\"ISDASOIL/Africa/v1/bedrock_depth\");\nMap.addLayer(\n    raw.select(0).sldStyle(mean_0_200), {},\n    \"Bedrock depth, mean visualization, 0-200 cm\");\nMap.addLayer(\n    raw.select(1).sldStyle(stdev_0_200), {},\n    \"Bedrock depth, stdev visualization, 0-200 cm\");\n\nvar visualization = {min: 27, max: 200};\n\nMap.setCenter(25, -3, 2);\n\nMap.addLayer(raw.select(0), visualization, \"Bedrock depth, mean, 0-200 cm\");\n", "environment": "[]"}, {"name": "ISDASOIL_Africa_v1_bulk_density", "code": "var mean_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#00204D\" label=\"0.8-1.05\" opacity=\"1\" quantity=\"105\"/\u003e' +\n  '\u003cColorMapEntry color=\"#002D6C\" label=\"1.05-1.19\" opacity=\"1\" quantity=\"119\"/\u003e' +\n  '\u003cColorMapEntry color=\"#16396D\" label=\"1.19-1.23\" opacity=\"1\" quantity=\"123\"/\u003e' +\n  '\u003cColorMapEntry color=\"#36476B\" label=\"1.23-1.25\" opacity=\"1\" quantity=\"125\"/\u003e' +\n  '\u003cColorMapEntry color=\"#4B546C\" label=\"1.25-1.28\" opacity=\"1\" quantity=\"128\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5C616E\" label=\"1.28-1.31\" opacity=\"1\" quantity=\"131\"/\u003e' +\n  '\u003cColorMapEntry color=\"#6C6E72\" label=\"1.31-1.34\" opacity=\"1\" quantity=\"134\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7C7B78\" label=\"1.34-1.36\" opacity=\"1\" quantity=\"136\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8E8A79\" label=\"1.36-1.38\" opacity=\"1\" quantity=\"138\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A09877\" label=\"1.38-1.41\" opacity=\"1\" quantity=\"141\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B3A772\" label=\"1.41-1.43\" opacity=\"1\" quantity=\"143\"/\u003e' +\n  '\u003cColorMapEntry color=\"#C6B66B\" label=\"1.43-1.45\" opacity=\"1\" quantity=\"145\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DBC761\" label=\"1.45-1.48\" opacity=\"1\" quantity=\"148\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0D852\" label=\"1.48-1.51\" opacity=\"1\" quantity=\"151\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FFEA46\" label=\"1.51-1.85\" opacity=\"1\" quantity=\"154\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar mean_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#00204D\" label=\"0.8-1.05\" opacity=\"1\" quantity=\"105\"/\u003e' +\n  '\u003cColorMapEntry color=\"#002D6C\" label=\"1.05-1.19\" opacity=\"1\" quantity=\"119\"/\u003e' +\n  '\u003cColorMapEntry color=\"#16396D\" label=\"1.19-1.23\" opacity=\"1\" quantity=\"123\"/\u003e' +\n  '\u003cColorMapEntry color=\"#36476B\" label=\"1.23-1.25\" opacity=\"1\" quantity=\"125\"/\u003e' +\n  '\u003cColorMapEntry color=\"#4B546C\" label=\"1.25-1.28\" opacity=\"1\" quantity=\"128\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5C616E\" label=\"1.28-1.31\" opacity=\"1\" quantity=\"131\"/\u003e' +\n  '\u003cColorMapEntry color=\"#6C6E72\" label=\"1.31-1.34\" opacity=\"1\" quantity=\"134\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7C7B78\" label=\"1.34-1.36\" opacity=\"1\" quantity=\"136\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8E8A79\" label=\"1.36-1.38\" opacity=\"1\" quantity=\"138\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A09877\" label=\"1.38-1.41\" opacity=\"1\" quantity=\"141\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B3A772\" label=\"1.41-1.43\" opacity=\"1\" quantity=\"143\"/\u003e' +\n  '\u003cColorMapEntry color=\"#C6B66B\" label=\"1.43-1.45\" opacity=\"1\" quantity=\"145\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DBC761\" label=\"1.45-1.48\" opacity=\"1\" quantity=\"148\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0D852\" label=\"1.48-1.51\" opacity=\"1\" quantity=\"151\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FFEA46\" label=\"1.51-1.85\" opacity=\"1\" quantity=\"154\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"5\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"7\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"9\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"5\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"7\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"9\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar raw = ee.Image(\"ISDASOIL/Africa/v1/bulk_density\");\nMap.addLayer(\n    raw.select(0).sldStyle(mean_0_20), {},\n    \"Bulk density, mean visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(1).sldStyle(mean_20_50), {},\n    \"Bulk density, mean visualization, 20-50 cm\");\nMap.addLayer(\n    raw.select(2).sldStyle(stdev_0_20), {},\n    \"Bulk density, stdev visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(3).sldStyle(stdev_20_50), {},\n    \"Bulk density, stdev visualization, 20-50 cm\");\n\nvar converted = raw.divide(100)\n\nvar visualization = {min: 1, max: 1.5};\n\nMap.setCenter(25, -3, 2);\n\nMap.addLayer(converted.select(0), visualization, \"Bulk density, mean, 0-20 cm\");\n", "environment": "[]"}, {"name": "ISDASOIL_Africa_v1_calcium_extractable", "code": "var mean_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#0D0887\" label=\"0-65.7\" opacity=\"1\" quantity=\"42\"/\u003e' +\n  '\u003cColorMapEntry color=\"#350498\" label=\"65.7-120.5\" opacity=\"1\" quantity=\"48\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5402A3\" label=\"120.5-163\" opacity=\"1\" quantity=\"51\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7000A8\" label=\"163-199.3\" opacity=\"1\" quantity=\"53\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8B0AA5\" label=\"199.3-269.4\" opacity=\"1\" quantity=\"56\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A31E9A\" label=\"269.4-329.3\" opacity=\"1\" quantity=\"58\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B93289\" label=\"329.3-402.4\" opacity=\"1\" quantity=\"60\"/\u003e' +\n  '\u003cColorMapEntry color=\"#CC4678\" label=\"402.4-491.7\" opacity=\"1\" quantity=\"62\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DB5C68\" label=\"491.7-600.8\" opacity=\"1\" quantity=\"64\"/\u003e' +\n  '\u003cColorMapEntry color=\"#E97158\" label=\"600.8-664.1\" opacity=\"1\" quantity=\"65\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F48849\" label=\"664.1-811.4\" opacity=\"1\" quantity=\"67\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FBA139\" label=\"811.4-896.8\" opacity=\"1\" quantity=\"68\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBC2A\" label=\"896.8-1095.6\" opacity=\"1\" quantity=\"70\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FADA24\" label=\"1095.6-1479.3\" opacity=\"1\" quantity=\"73\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0F921\" label=\"1479.3-12000\" opacity=\"1\" quantity=\"77\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar mean_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#0D0887\" label=\"0-65.7\" opacity=\"1\" quantity=\"42\"/\u003e' +\n  '\u003cColorMapEntry color=\"#350498\" label=\"65.7-120.5\" opacity=\"1\" quantity=\"48\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5402A3\" label=\"120.5-163\" opacity=\"1\" quantity=\"51\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7000A8\" label=\"163-199.3\" opacity=\"1\" quantity=\"53\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8B0AA5\" label=\"199.3-269.4\" opacity=\"1\" quantity=\"56\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A31E9A\" label=\"269.4-329.3\" opacity=\"1\" quantity=\"58\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B93289\" label=\"329.3-402.4\" opacity=\"1\" quantity=\"60\"/\u003e' +\n  '\u003cColorMapEntry color=\"#CC4678\" label=\"402.4-491.7\" opacity=\"1\" quantity=\"62\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DB5C68\" label=\"491.7-600.8\" opacity=\"1\" quantity=\"64\"/\u003e' +\n  '\u003cColorMapEntry color=\"#E97158\" label=\"600.8-664.1\" opacity=\"1\" quantity=\"65\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F48849\" label=\"664.1-811.4\" opacity=\"1\" quantity=\"67\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FBA139\" label=\"811.4-896.8\" opacity=\"1\" quantity=\"68\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBC2A\" label=\"896.8-1095.6\" opacity=\"1\" quantity=\"70\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FADA24\" label=\"1095.6-1479.3\" opacity=\"1\" quantity=\"73\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0F921\" label=\"1479.3-12000\" opacity=\"1\" quantity=\"77\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"5\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"5\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar raw = ee.Image(\"ISDASOIL/Africa/v1/calcium_extractable\");\nMap.addLayer(\n    raw.select(0).sldStyle(mean_0_20), {},\n    \"Calcium, extractable, mean visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(1).sldStyle(mean_20_50), {},\n    \"Calcium, extractable, mean visualization, 20-50 cm\");\nMap.addLayer(\n    raw.select(2).sldStyle(stdev_0_20), {},\n    \"Calcium, extractable, stdev visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(3).sldStyle(stdev_20_50), {},\n    \"Calcium, extractable, stdev visualization, 20-50 cm\");\n\nvar converted = raw.divide(10).exp().subtract(1);\n\nvar visualization = {min: 100, max: 2000};\n\nMap.setCenter(25, -3, 2);\n\nMap.addLayer(converted.select(0), visualization, \"Calcium, extractable, mean, 0-20 cm\");\n", "environment": "[]"}, {"name": "ISDASOIL_Africa_v1_carbon_organic", "code": "var mean_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#000004\" label=\"0-2.3\" opacity=\"1\" quantity=\"12\"/\u003e' +\n  '\u003cColorMapEntry color=\"#0C0927\" label=\"2.3-3.5\" opacity=\"1\" quantity=\"15\"/\u003e' +\n  '\u003cColorMapEntry color=\"#231151\" label=\"3.5-4\" opacity=\"1\" quantity=\"16\"/\u003e' +\n  '\u003cColorMapEntry color=\"#410F75\" label=\"4-4.5\" opacity=\"1\" quantity=\"17\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5F187F\" label=\"4.5-5\" opacity=\"1\" quantity=\"18\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7B2382\" label=\"5-5.7\" opacity=\"1\" quantity=\"19\"/\u003e' +\n  '\u003cColorMapEntry color=\"#982D80\" label=\"5.7-6.4\" opacity=\"1\" quantity=\"20\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B63679\" label=\"6.4-7.2\" opacity=\"1\" quantity=\"21\"/\u003e' +\n  '\u003cColorMapEntry color=\"#D3436E\" label=\"7.2-8\" opacity=\"1\" quantity=\"22\"/\u003e' +\n  '\u003cColorMapEntry color=\"#EB5760\" label=\"8-9\" opacity=\"1\" quantity=\"23\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F8765C\" label=\"9-10\" opacity=\"1\" quantity=\"24\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FD9969\" label=\"10-11.2\" opacity=\"1\" quantity=\"25\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBA80\" label=\"11.2-12.5\" opacity=\"1\" quantity=\"26\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FDDC9E\" label=\"12.5-13.9\" opacity=\"1\" quantity=\"27\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FCFDBF\" label=\"13.9-40\" opacity=\"1\" quantity=\"28\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar mean_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#000004\" label=\"0-2.3\" opacity=\"1\" quantity=\"12\"/\u003e' +\n  '\u003cColorMapEntry color=\"#0C0927\" label=\"2.3-3.5\" opacity=\"1\" quantity=\"15\"/\u003e' +\n  '\u003cColorMapEntry color=\"#231151\" label=\"3.5-4\" opacity=\"1\" quantity=\"16\"/\u003e' +\n  '\u003cColorMapEntry color=\"#410F75\" label=\"4-4.5\" opacity=\"1\" quantity=\"17\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5F187F\" label=\"4.5-5\" opacity=\"1\" quantity=\"18\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7B2382\" label=\"5-5.7\" opacity=\"1\" quantity=\"19\"/\u003e' +\n  '\u003cColorMapEntry color=\"#982D80\" label=\"5.7-6.4\" opacity=\"1\" quantity=\"20\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B63679\" label=\"6.4-7.2\" opacity=\"1\" quantity=\"21\"/\u003e' +\n  '\u003cColorMapEntry color=\"#D3436E\" label=\"7.2-8\" opacity=\"1\" quantity=\"22\"/\u003e' +\n  '\u003cColorMapEntry color=\"#EB5760\" label=\"8-9\" opacity=\"1\" quantity=\"23\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F8765C\" label=\"9-10\" opacity=\"1\" quantity=\"24\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FD9969\" label=\"10-11.2\" opacity=\"1\" quantity=\"25\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBA80\" label=\"11.2-12.5\" opacity=\"1\" quantity=\"26\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FDDC9E\" label=\"12.5-13.9\" opacity=\"1\" quantity=\"27\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FCFDBF\" label=\"13.9-40\" opacity=\"1\" quantity=\"28\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"5\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"5\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar raw = ee.Image(\"ISDASOIL/Africa/v1/carbon_organic\");\nMap.addLayer(\n    raw.select(0).sldStyle(mean_0_20), {},\n    \"Carbon, organic, mean visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(1).sldStyle(mean_20_50), {},\n    \"Carbon, organic, mean visualization, 20-50 cm\");\nMap.addLayer(\n    raw.select(2).sldStyle(stdev_0_20), {},\n    \"Carbon, organic, stdev visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(3).sldStyle(stdev_20_50), {},\n    \"Carbon, organic, stdev visualization, 20-50 cm\");\n\nvar converted = raw.divide(10).exp().subtract(1);\n\nvar visualization = {min: 0, max: 20};\n\nMap.setCenter(25, -3, 2);\n\nMap.addLayer(converted.select(0), visualization, \"Carbon, organic, mean, 0-20 cm\");\n", "environment": "[]"}, {"name": "ISDASOIL_Africa_v1_carbon_total", "code": "var mean_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#000004\" label=\"0-2\" opacity=\"1\" quantity=\"11\"/\u003e' +\n  '\u003cColorMapEntry color=\"#0C0927\" label=\"2-5.7\" opacity=\"1\" quantity=\"19\"/\u003e' +\n  '\u003cColorMapEntry color=\"#231151\" label=\"5.7-10\" opacity=\"1\" quantity=\"24\"/\u003e' +\n  '\u003cColorMapEntry color=\"#410F75\" label=\"10-12.5\" opacity=\"1\" quantity=\"26\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5F187F\" label=\"12.5-13.9\" opacity=\"1\" quantity=\"27\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7B2382\" label=\"13.9-15.4\" opacity=\"1\" quantity=\"28\"/\u003e' +\n  '\u003cColorMapEntry color=\"#982D80\" label=\"15.4-17.2\" opacity=\"1\" quantity=\"29\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B63679\" label=\"17.2-19.1\" opacity=\"1\" quantity=\"30\"/\u003e' +\n  '\u003cColorMapEntry color=\"#D3436E\" label=\"19.1-21.2\" opacity=\"1\" quantity=\"31\"/\u003e' +\n  '\u003cColorMapEntry color=\"#EB5760\" label=\"21.2-23.5\" opacity=\"1\" quantity=\"32\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F8765C\" label=\"23.5-26.1\" opacity=\"1\" quantity=\"33\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FD9969\" label=\"26.1-29\" opacity=\"1\" quantity=\"34\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBA80\" label=\"29-32.1\" opacity=\"1\" quantity=\"35\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FDDC9E\" label=\"32.1-35.6\" opacity=\"1\" quantity=\"36\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FCFDBF\" label=\"35.6-40\" opacity=\"1\" quantity=\"39\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar mean_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#000004\" label=\"0-2\" opacity=\"1\" quantity=\"11\"/\u003e' +\n  '\u003cColorMapEntry color=\"#0C0927\" label=\"2-5.7\" opacity=\"1\" quantity=\"19\"/\u003e' +\n  '\u003cColorMapEntry color=\"#231151\" label=\"5.7-10\" opacity=\"1\" quantity=\"24\"/\u003e' +\n  '\u003cColorMapEntry color=\"#410F75\" label=\"10-12.5\" opacity=\"1\" quantity=\"26\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5F187F\" label=\"12.5-13.9\" opacity=\"1\" quantity=\"27\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7B2382\" label=\"13.9-15.4\" opacity=\"1\" quantity=\"28\"/\u003e' +\n  '\u003cColorMapEntry color=\"#982D80\" label=\"15.4-17.2\" opacity=\"1\" quantity=\"29\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B63679\" label=\"17.2-19.1\" opacity=\"1\" quantity=\"30\"/\u003e' +\n  '\u003cColorMapEntry color=\"#D3436E\" label=\"19.1-21.2\" opacity=\"1\" quantity=\"31\"/\u003e' +\n  '\u003cColorMapEntry color=\"#EB5760\" label=\"21.2-23.5\" opacity=\"1\" quantity=\"32\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F8765C\" label=\"23.5-26.1\" opacity=\"1\" quantity=\"33\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FD9969\" label=\"26.1-29\" opacity=\"1\" quantity=\"34\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBA80\" label=\"29-32.1\" opacity=\"1\" quantity=\"35\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FDDC9E\" label=\"32.1-35.6\" opacity=\"1\" quantity=\"36\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FCFDBF\" label=\"35.6-40\" opacity=\"1\" quantity=\"39\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"5\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"6\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"5\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"6\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar raw = ee.Image(\"ISDASOIL/Africa/v1/carbon_total\");\nMap.addLayer(\n    raw.select(0).sldStyle(mean_0_20), {},\n    \"Carbon, total, mean visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(1).sldStyle(mean_20_50), {},\n    \"Carbon, total, mean visualization, 20-50 cm\");\nMap.addLayer(\n    raw.select(2).sldStyle(stdev_0_20), {},\n    \"Carbon, total, stdev visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(3).sldStyle(stdev_20_50), {},\n    \"Carbon, total, stdev visualization, 20-50 cm\");\n\nvar converted = raw.divide(10).exp().subtract(1);\n\nvar visualization = {min: 0, max: 60};\n\nMap.setCenter(25, -3, 2);\n\nMap.addLayer(converted.select(0), visualization, \"Carbon, total, mean, 0-20 cm\");\n", "environment": "[]"}, {"name": "ISDASOIL_Africa_v1_cation_exchange_capacity", "code": "var mean_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#000004\" label=\"0-3.5\" opacity=\"1\" quantity=\"15\"/\u003e' +\n  '\u003cColorMapEntry color=\"#0C0927\" label=\"3.5-4.5\" opacity=\"1\" quantity=\"17\"/\u003e' +\n  '\u003cColorMapEntry color=\"#231151\" label=\"4.5-5\" opacity=\"1\" quantity=\"18\"/\u003e' +\n  '\u003cColorMapEntry color=\"#410F75\" label=\"5-6.4\" opacity=\"1\" quantity=\"20\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5F187F\" label=\"6.4-7.2\" opacity=\"1\" quantity=\"21\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7B2382\" label=\"7.2-8\" opacity=\"1\" quantity=\"22\"/\u003e' +\n  '\u003cColorMapEntry color=\"#982D80\" label=\"8-9\" opacity=\"1\" quantity=\"23\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B63679\" label=\"9-10\" opacity=\"1\" quantity=\"24\"/\u003e' +\n  '\u003cColorMapEntry color=\"#D3436E\" label=\"10-11.2\" opacity=\"1\" quantity=\"25\"/\u003e' +\n  '\u003cColorMapEntry color=\"#EB5760\" label=\"11.2-12.5\" opacity=\"1\" quantity=\"26\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F8765C\" label=\"12.5-13.9\" opacity=\"1\" quantity=\"27\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FD9969\" label=\"13.9-15.4\" opacity=\"1\" quantity=\"28\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBA80\" label=\"15.4-17.2\" opacity=\"1\" quantity=\"29\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FDDC9E\" label=\"17.2-19.1\" opacity=\"1\" quantity=\"30\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FCFDBF\" label=\"19.1-130\" opacity=\"1\" quantity=\"31\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar mean_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#000004\" label=\"0-3.5\" opacity=\"1\" quantity=\"15\"/\u003e' +\n  '\u003cColorMapEntry color=\"#0C0927\" label=\"3.5-4.5\" opacity=\"1\" quantity=\"17\"/\u003e' +\n  '\u003cColorMapEntry color=\"#231151\" label=\"4.5-5\" opacity=\"1\" quantity=\"18\"/\u003e' +\n  '\u003cColorMapEntry color=\"#410F75\" label=\"5-6.4\" opacity=\"1\" quantity=\"20\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5F187F\" label=\"6.4-7.2\" opacity=\"1\" quantity=\"21\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7B2382\" label=\"7.2-8\" opacity=\"1\" quantity=\"22\"/\u003e' +\n  '\u003cColorMapEntry color=\"#982D80\" label=\"8-9\" opacity=\"1\" quantity=\"23\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B63679\" label=\"9-10\" opacity=\"1\" quantity=\"24\"/\u003e' +\n  '\u003cColorMapEntry color=\"#D3436E\" label=\"10-11.2\" opacity=\"1\" quantity=\"25\"/\u003e' +\n  '\u003cColorMapEntry color=\"#EB5760\" label=\"11.2-12.5\" opacity=\"1\" quantity=\"26\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F8765C\" label=\"12.5-13.9\" opacity=\"1\" quantity=\"27\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FD9969\" label=\"13.9-15.4\" opacity=\"1\" quantity=\"28\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBA80\" label=\"15.4-17.2\" opacity=\"1\" quantity=\"29\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FDDC9E\" label=\"17.2-19.1\" opacity=\"1\" quantity=\"30\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FCFDBF\" label=\"19.1-130\" opacity=\"1\" quantity=\"31\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"5\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"5\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar raw = ee.Image(\"ISDASOIL/Africa/v1/cation_exchange_capacity\");\nMap.addLayer(\n    raw.select(0).sldStyle(mean_0_20), {},\n    \"Cation exchange capacity, mean visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(1).sldStyle(mean_20_50), {},\n    \"Cation exchange capacity, mean visualization, 20-50 cm\");\nMap.addLayer(\n    raw.select(2).sldStyle(stdev_0_20), {},\n    \"Cation exchange capacity, stdev visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(3).sldStyle(stdev_20_50), {},\n    \"Cation exchange capacity, stdev visualization, 20-50 cm\");\n\nvar converted = raw.divide(10).exp().subtract(1);\n\nvar visualization = {min: 0, max: 25};\n\nMap.setCenter(25, -3, 2);\n\nMap.addLayer(converted.select(0), visualization, \"Cation exchange capacity, mean, 0-20 cm\");\n", "environment": "[]"}, {"name": "ISDASOIL_Africa_v1_clay_content", "code": "var mean_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#00204D\" label=\"0-8\" opacity=\"1\" quantity=\"8\"/\u003e' +\n  '\u003cColorMapEntry color=\"#002D6C\" label=\"8-14\" opacity=\"1\" quantity=\"14\"/\u003e' +\n  '\u003cColorMapEntry color=\"#16396D\" label=\"14-17\" opacity=\"1\" quantity=\"17\"/\u003e' +\n  '\u003cColorMapEntry color=\"#36476B\" label=\"17-19\" opacity=\"1\" quantity=\"19\"/\u003e' +\n  '\u003cColorMapEntry color=\"#4B546C\" label=\"19-21\" opacity=\"1\" quantity=\"21\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5C616E\" label=\"21-22\" opacity=\"1\" quantity=\"22\"/\u003e' +\n  '\u003cColorMapEntry color=\"#6C6E72\" label=\"22-24\" opacity=\"1\" quantity=\"24\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7C7B78\" label=\"24-25\" opacity=\"1\" quantity=\"25\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8E8A79\" label=\"25-26\" opacity=\"1\" quantity=\"26\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A09877\" label=\"26-28\" opacity=\"1\" quantity=\"28\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B3A772\" label=\"28-30\" opacity=\"1\" quantity=\"30\"/\u003e' +\n  '\u003cColorMapEntry color=\"#C6B66B\" label=\"30-31\" opacity=\"1\" quantity=\"31\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DBC761\" label=\"31-33\" opacity=\"1\" quantity=\"33\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0D852\" label=\"33-36\" opacity=\"1\" quantity=\"36\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FFEA46\" label=\"36-70\" opacity=\"1\" quantity=\"40\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar mean_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#00204D\" label=\"0-8\" opacity=\"1\" quantity=\"8\"/\u003e' +\n  '\u003cColorMapEntry color=\"#002D6C\" label=\"8-14\" opacity=\"1\" quantity=\"14\"/\u003e' +\n  '\u003cColorMapEntry color=\"#16396D\" label=\"14-17\" opacity=\"1\" quantity=\"17\"/\u003e' +\n  '\u003cColorMapEntry color=\"#36476B\" label=\"17-19\" opacity=\"1\" quantity=\"19\"/\u003e' +\n  '\u003cColorMapEntry color=\"#4B546C\" label=\"19-21\" opacity=\"1\" quantity=\"21\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5C616E\" label=\"21-22\" opacity=\"1\" quantity=\"22\"/\u003e' +\n  '\u003cColorMapEntry color=\"#6C6E72\" label=\"22-24\" opacity=\"1\" quantity=\"24\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7C7B78\" label=\"24-25\" opacity=\"1\" quantity=\"25\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8E8A79\" label=\"25-26\" opacity=\"1\" quantity=\"26\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A09877\" label=\"26-28\" opacity=\"1\" quantity=\"28\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B3A772\" label=\"28-30\" opacity=\"1\" quantity=\"30\"/\u003e' +\n  '\u003cColorMapEntry color=\"#C6B66B\" label=\"30-31\" opacity=\"1\" quantity=\"31\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DBC761\" label=\"31-33\" opacity=\"1\" quantity=\"33\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0D852\" label=\"33-36\" opacity=\"1\" quantity=\"36\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FFEA46\" label=\"36-70\" opacity=\"1\" quantity=\"40\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"6\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"6\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar raw = ee.Image(\"ISDASOIL/Africa/v1/clay_content\");\nMap.addLayer(\n    raw.select(0).sldStyle(mean_0_20), {},\n    \"Clay content, mean visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(1).sldStyle(mean_20_50), {},\n    \"Clay content, mean visualization, 20-50 cm\");\nMap.addLayer(\n    raw.select(2).sldStyle(stdev_0_20), {},\n    \"Clay content, stdev visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(3).sldStyle(stdev_20_50), {},\n    \"Clay content, stdev visualization, 20-50 cm\");\n\nvar converted = raw.divide(10).exp().subtract(1);\n\nvar visualization = {min: 0, max: 50};\n\nMap.setCenter(25, -3, 2);\n\nMap.addLayer(converted.select(0), visualization, \"Clay content, mean, 0-20 cm\");\n", "environment": "[]"}, {"name": "ISDASOIL_Africa_v1_fcc", "code": "var raw = ee.Image(\"ISDASOIL/Africa/v1/fcc\").select(0);\n\nvar converted = ee.Image(raw.mod(3000).copyProperties(raw));\n\nMap.setCenter(25, -3, 2);\n\nMap.addLayer(converted, {}, \"Fertility Capability Classification\");\n", "environment": "[]"}, {"name": "ISDASOIL_Africa_v1_iron_extractable", "code": "var mean_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#0D0887\" label=\"0-6.4\" opacity=\"1\" quantity=\"20\"/\u003e' +\n  '\u003cColorMapEntry color=\"#350498\" label=\"6.4-13.9\" opacity=\"1\" quantity=\"27\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5402A3\" label=\"13.9-29\" opacity=\"1\" quantity=\"34\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7000A8\" label=\"29-35.6\" opacity=\"1\" quantity=\"36\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8B0AA5\" label=\"35.6-43.7\" opacity=\"1\" quantity=\"38\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A31E9A\" label=\"43.7-48.4\" opacity=\"1\" quantity=\"39\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B93289\" label=\"48.4-53.6\" opacity=\"1\" quantity=\"40\"/\u003e' +\n  '\u003cColorMapEntry color=\"#CC4678\" label=\"53.6-59.3\" opacity=\"1\" quantity=\"41\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DB5C68\" label=\"59.3-65.7\" opacity=\"1\" quantity=\"42\"/\u003e' +\n  '\u003cColorMapEntry color=\"#E97158\" label=\"65.7-72.7\" opacity=\"1\" quantity=\"43\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F48849\" label=\"72.7-80.5\" opacity=\"1\" quantity=\"44\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FBA139\" label=\"80.5-89\" opacity=\"1\" quantity=\"45\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBC2A\" label=\"89-98.5\" opacity=\"1\" quantity=\"46\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FADA24\" label=\"98.5-108.9\" opacity=\"1\" quantity=\"47\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0F921\" label=\"108.9-1200\" opacity=\"1\" quantity=\"48\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar mean_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#0D0887\" label=\"0-6.4\" opacity=\"1\" quantity=\"20\"/\u003e' +\n  '\u003cColorMapEntry color=\"#350498\" label=\"6.4-13.9\" opacity=\"1\" quantity=\"27\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5402A3\" label=\"13.9-29\" opacity=\"1\" quantity=\"34\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7000A8\" label=\"29-35.6\" opacity=\"1\" quantity=\"36\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8B0AA5\" label=\"35.6-43.7\" opacity=\"1\" quantity=\"38\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A31E9A\" label=\"43.7-48.4\" opacity=\"1\" quantity=\"39\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B93289\" label=\"48.4-53.6\" opacity=\"1\" quantity=\"40\"/\u003e' +\n  '\u003cColorMapEntry color=\"#CC4678\" label=\"53.6-59.3\" opacity=\"1\" quantity=\"41\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DB5C68\" label=\"59.3-65.7\" opacity=\"1\" quantity=\"42\"/\u003e' +\n  '\u003cColorMapEntry color=\"#E97158\" label=\"65.7-72.7\" opacity=\"1\" quantity=\"43\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F48849\" label=\"72.7-80.5\" opacity=\"1\" quantity=\"44\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FBA139\" label=\"80.5-89\" opacity=\"1\" quantity=\"45\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBC2A\" label=\"89-98.5\" opacity=\"1\" quantity=\"46\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FADA24\" label=\"98.5-108.9\" opacity=\"1\" quantity=\"47\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0F921\" label=\"108.9-1200\" opacity=\"1\" quantity=\"48\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"6\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"6\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar raw = ee.Image(\"ISDASOIL/Africa/v1/iron_extractable\");\nMap.addLayer(\n    raw.select(0).sldStyle(mean_0_20), {},\n    \"Iron, extractable, mean visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(1).sldStyle(mean_20_50), {},\n    \"Iron, extractable, mean visualization, 20-50 cm\");\nMap.addLayer(\n    raw.select(2).sldStyle(stdev_0_20), {},\n    \"Iron, extractable, stdev visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(3).sldStyle(stdev_20_50), {},\n    \"Iron, extractable, stdev visualization, 20-50 cm\");\n\nvar converted = raw.divide(10).exp().subtract(1);\n\nvar visualization = {min: 0, max: 140};\n\nMap.setCenter(25, -3, 2);\n\nMap.addLayer(converted.select(0), visualization, \"Iron, extractable, mean, 0-20 cm\");\n", "environment": "[]"}, {"name": "ISDASOIL_Africa_v1_magnesium_extractable", "code": "var mean_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#0D0887\" label=\"0-19.1\" opacity=\"1\" quantity=\"30\"/\u003e' +\n  '\u003cColorMapEntry color=\"#350498\" label=\"19.1-29\" opacity=\"1\" quantity=\"34\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5402A3\" label=\"29-39.4\" opacity=\"1\" quantity=\"37\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7000A8\" label=\"39.4-53.6\" opacity=\"1\" quantity=\"40\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8B0AA5\" label=\"53.6-72.7\" opacity=\"1\" quantity=\"43\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A31E9A\" label=\"72.7-89\" opacity=\"1\" quantity=\"45\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B93289\" label=\"89-108.9\" opacity=\"1\" quantity=\"47\"/\u003e' +\n  '\u003cColorMapEntry color=\"#CC4678\" label=\"108.9-120.5\" opacity=\"1\" quantity=\"48\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DB5C68\" label=\"120.5-133.3\" opacity=\"1\" quantity=\"49\"/\u003e' +\n  '\u003cColorMapEntry color=\"#E97158\" label=\"133.3-163\" opacity=\"1\" quantity=\"51\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F48849\" label=\"163-180.3\" opacity=\"1\" quantity=\"52\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FBA139\" label=\"180.3-220.4\" opacity=\"1\" quantity=\"54\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBC2A\" label=\"220.4-243.7\" opacity=\"1\" quantity=\"55\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FADA24\" label=\"243.7-297.9\" opacity=\"1\" quantity=\"57\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0F921\" label=\"243.7-1200\" opacity=\"1\" quantity=\"60\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar mean_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#0D0887\" label=\"0-19.1\" opacity=\"1\" quantity=\"30\"/\u003e' +\n  '\u003cColorMapEntry color=\"#350498\" label=\"19.1-29\" opacity=\"1\" quantity=\"34\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5402A3\" label=\"29-39.4\" opacity=\"1\" quantity=\"37\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7000A8\" label=\"39.4-53.6\" opacity=\"1\" quantity=\"40\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8B0AA5\" label=\"53.6-72.7\" opacity=\"1\" quantity=\"43\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A31E9A\" label=\"72.7-89\" opacity=\"1\" quantity=\"45\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B93289\" label=\"89-108.9\" opacity=\"1\" quantity=\"47\"/\u003e' +\n  '\u003cColorMapEntry color=\"#CC4678\" label=\"108.9-120.5\" opacity=\"1\" quantity=\"48\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DB5C68\" label=\"120.5-133.3\" opacity=\"1\" quantity=\"49\"/\u003e' +\n  '\u003cColorMapEntry color=\"#E97158\" label=\"133.3-163\" opacity=\"1\" quantity=\"51\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F48849\" label=\"163-180.3\" opacity=\"1\" quantity=\"52\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FBA139\" label=\"180.3-220.4\" opacity=\"1\" quantity=\"54\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBC2A\" label=\"220.4-243.7\" opacity=\"1\" quantity=\"55\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FADA24\" label=\"243.7-297.9\" opacity=\"1\" quantity=\"57\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0F921\" label=\"243.7-1200\" opacity=\"1\" quantity=\"60\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"5\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"5\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar raw = ee.Image(\"ISDASOIL/Africa/v1/magnesium_extractable\");\nMap.addLayer(\n    raw.select(0).sldStyle(mean_0_20), {},\n    \"Magnesium, extractable, mean visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(1).sldStyle(mean_20_50), {},\n    \"Magnesium, extractable, mean visualization, 20-50 cm\");\nMap.addLayer(\n    raw.select(2).sldStyle(stdev_0_20), {},\n    \"Magnesium, extractable, stdev visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(3).sldStyle(stdev_20_50), {},\n    \"Magnesium, extractable, stdev visualization, 20-50 cm\");\n\nvar converted = raw.divide(10).exp().subtract(1);\n\nvar visualization = {min: 0, max: 500};\n\nMap.setCenter(25, -3, 2);\n\nMap.addLayer(converted.select(0), visualization, \"Magnesium, extractable, mean, 0-20 cm\");\n", "environment": "[]"}, {"name": "ISDASOIL_Africa_v1_nitrogen_total", "code": "var mean_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#000004\" label=\"0-0.2\" opacity=\"1\" quantity=\"20\"/\u003e' +\n  '\u003cColorMapEntry color=\"#0C0927\" label=\"0.2-0.3\" opacity=\"1\" quantity=\"30\"/\u003e' +\n  '\u003cColorMapEntry color=\"#231151\" label=\"0.3-0.4\" opacity=\"1\" quantity=\"36\"/\u003e' +\n  '\u003cColorMapEntry color=\"#410F75\" label=\"0.4-0.5\" opacity=\"1\" quantity=\"43\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5F187F\" label=\"0.5-0.6\" opacity=\"1\" quantity=\"48\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7B2382\" label=\"0.6-0.7\" opacity=\"1\" quantity=\"52\"/\u003e' +\n  '\u003cColorMapEntry color=\"#982D80\" label=\"0.7-0.8\" opacity=\"1\" quantity=\"58\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B63679\" label=\"0.8-0.9\" opacity=\"1\" quantity=\"64\"/\u003e' +\n  '\u003cColorMapEntry color=\"#D3436E\" label=\"0.9-1\" opacity=\"1\" quantity=\"67\"/\u003e' +\n  '\u003cColorMapEntry color=\"#EB5760\" label=\"1-1.1\" opacity=\"1\" quantity=\"75\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F8765C\" label=\"1.1-1.2\" opacity=\"1\" quantity=\"79\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FD9969\" label=\"1.2-1.3\" opacity=\"1\" quantity=\"83\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBA80\" label=\"1.3-1.4\" opacity=\"1\" quantity=\"89\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FDDC9E\" label=\"1.4-1.5\" opacity=\"1\" quantity=\"93\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FCFDBF\" label=\"1.5-10\" opacity=\"1\" quantity=\"99\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar mean_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#000004\" label=\"0-0.2\" opacity=\"1\" quantity=\"20\"/\u003e' +\n  '\u003cColorMapEntry color=\"#0C0927\" label=\"0.2-0.3\" opacity=\"1\" quantity=\"30\"/\u003e' +\n  '\u003cColorMapEntry color=\"#231151\" label=\"0.3-0.4\" opacity=\"1\" quantity=\"36\"/\u003e' +\n  '\u003cColorMapEntry color=\"#410F75\" label=\"0.4-0.5\" opacity=\"1\" quantity=\"43\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5F187F\" label=\"0.5-0.6\" opacity=\"1\" quantity=\"48\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7B2382\" label=\"0.6-0.7\" opacity=\"1\" quantity=\"52\"/\u003e' +\n  '\u003cColorMapEntry color=\"#982D80\" label=\"0.7-0.8\" opacity=\"1\" quantity=\"58\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B63679\" label=\"0.8-0.9\" opacity=\"1\" quantity=\"64\"/\u003e' +\n  '\u003cColorMapEntry color=\"#D3436E\" label=\"0.9-1\" opacity=\"1\" quantity=\"67\"/\u003e' +\n  '\u003cColorMapEntry color=\"#EB5760\" label=\"1-1.1\" opacity=\"1\" quantity=\"75\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F8765C\" label=\"1.1-1.2\" opacity=\"1\" quantity=\"79\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FD9969\" label=\"1.2-1.3\" opacity=\"1\" quantity=\"83\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBA80\" label=\"1.3-1.4\" opacity=\"1\" quantity=\"89\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FDDC9E\" label=\"1.4-1.5\" opacity=\"1\" quantity=\"93\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FCFDBF\" label=\"1.5-10\" opacity=\"1\" quantity=\"99\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"8\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"10\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"14\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"60\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"8\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"10\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"14\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"60\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar raw = ee.Image(\"ISDASOIL/Africa/v1/nitrogen_total\");\nMap.addLayer(\n    raw.select(0).sldStyle(mean_0_20), {},\n    \"Nitrogen, total, mean visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(1).sldStyle(mean_20_50), {},\n    \"Nitrogen, total, mean visualization, 20-50 cm\");\nMap.addLayer(\n    raw.select(2).sldStyle(stdev_0_20), {},\n    \"Nitrogen, total, stdev visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(3).sldStyle(stdev_20_50), {},\n    \"Nitrogen, total, stdev visualization, 20-50 cm\");\n\nvar converted = raw.divide(100).exp().subtract(1);\n\nvar visualization = {min: 0, max: 10000};\n\nMap.setCenter(25, -3, 2);\n\nMap.addLayer(converted.select(0), visualization, \"Nitrogen, total, mean, 0-20 cm\");\n", "environment": "[]"}, {"name": "ISDASOIL_Africa_v1_ph", "code": "var mean_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#CC0000\" label=\"3.5-4.6\" opacity=\"1\" quantity=\"46\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FF0000\" label=\"4.6-4.9\" opacity=\"1\" quantity=\"49\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FF5500\" label=\"4.9-5.2\" opacity=\"1\" quantity=\"52\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FFAA00\" label=\"5.2-5.4\" opacity=\"1\" quantity=\"54\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FFFF00\" label=\"5.4-5.5\" opacity=\"1\" quantity=\"55\"/\u003e' +\n  '\u003cColorMapEntry color=\"#D4FF2B\" label=\"5.5-5.6\" opacity=\"1\" quantity=\"56\"/\u003e' +\n  '\u003cColorMapEntry color=\"#AAFF55\" label=\"5.6-5.7\" opacity=\"1\" quantity=\"57\"/\u003e' +\n  '\u003cColorMapEntry color=\"#80FF80\" label=\"5.7-5.9\" opacity=\"1\" quantity=\"59\"/\u003e' +\n  '\u003cColorMapEntry color=\"#55FFAA\" label=\"5.9-6\" opacity=\"1\" quantity=\"60\"/\u003e' +\n  '\u003cColorMapEntry color=\"#2BFFD5\" label=\"6-6.2\" opacity=\"1\" quantity=\"62\"/\u003e' +\n  '\u003cColorMapEntry color=\"#00FFFF\" label=\"6.2-6.3\" opacity=\"1\" quantity=\"63\"/\u003e' +\n  '\u003cColorMapEntry color=\"#00AAFF\" label=\"6.3-6.6\" opacity=\"1\" quantity=\"66\"/\u003e' +\n  '\u003cColorMapEntry color=\"#0055FF\" label=\"6.6-6.8\" opacity=\"1\" quantity=\"68\"/\u003e' +\n  '\u003cColorMapEntry color=\"#0000FF\" label=\"6.8-7.1\" opacity=\"1\" quantity=\"71\"/\u003e' +\n  '\u003cColorMapEntry color=\"#0000CC\" label=\"7.1-10.5\" opacity=\"1\" quantity=\"76\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar mean_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#CC0000\" label=\"3.5-4.6\" opacity=\"1\" quantity=\"46\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FF0000\" label=\"4.6-4.9\" opacity=\"1\" quantity=\"49\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FF5500\" label=\"4.9-5.2\" opacity=\"1\" quantity=\"52\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FFAA00\" label=\"5.2-5.4\" opacity=\"1\" quantity=\"54\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FFFF00\" label=\"5.4-5.5\" opacity=\"1\" quantity=\"55\"/\u003e' +\n  '\u003cColorMapEntry color=\"#D4FF2B\" label=\"5.5-5.6\" opacity=\"1\" quantity=\"56\"/\u003e' +\n  '\u003cColorMapEntry color=\"#AAFF55\" label=\"5.6-5.7\" opacity=\"1\" quantity=\"57\"/\u003e' +\n  '\u003cColorMapEntry color=\"#80FF80\" label=\"5.7-5.9\" opacity=\"1\" quantity=\"59\"/\u003e' +\n  '\u003cColorMapEntry color=\"#55FFAA\" label=\"5.9-6\" opacity=\"1\" quantity=\"60\"/\u003e' +\n  '\u003cColorMapEntry color=\"#2BFFD5\" label=\"6-6.2\" opacity=\"1\" quantity=\"62\"/\u003e' +\n  '\u003cColorMapEntry color=\"#00FFFF\" label=\"6.2-6.3\" opacity=\"1\" quantity=\"63\"/\u003e' +\n  '\u003cColorMapEntry color=\"#00AAFF\" label=\"6.3-6.6\" opacity=\"1\" quantity=\"66\"/\u003e' +\n  '\u003cColorMapEntry color=\"#0055FF\" label=\"6.6-6.8\" opacity=\"1\" quantity=\"68\"/\u003e' +\n  '\u003cColorMapEntry color=\"#0000FF\" label=\"6.8-7.1\" opacity=\"1\" quantity=\"71\"/\u003e' +\n  '\u003cColorMapEntry color=\"#0000CC\" label=\"7.1-10.5\" opacity=\"1\" quantity=\"76\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"5\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"5\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\nvar raw = ee.Image(\"ISDASOIL/Africa/v1/ph\");\nMap.addLayer(\n    raw.select(0).sldStyle(mean_0_20), {},\n    \"ph, mean visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(1).sldStyle(mean_20_50), {},\n    \"ph, mean visualization, 20-50 cm\");\nMap.addLayer(\n    raw.select(2).sldStyle(stdev_0_20), {},\n    \"ph, stdev visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(3).sldStyle(stdev_20_50), {},\n    \"ph, stdev visualization, 20-50 cm\");\n\nvar converted = raw.divide(10);\n\nvar visualization = {min: 4, max: 8};\n\nMap.setCenter(25, -3, 2);\n\nMap.addLayer(converted.select(0), visualization, \"ph, mean, 0-20 cm\");\n", "environment": "[]"}, {"name": "ISDASOIL_Africa_v1_phosphorus_extractable", "code": "var mean_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#0D0887\" label=\"0-2.7\" opacity=\"1\" quantity=\"13\"/\u003e' +\n  '\u003cColorMapEntry color=\"#350498\" label=\"2.7-3\" opacity=\"1\" quantity=\"14\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5402A3\" label=\"3-3.5\" opacity=\"1\" quantity=\"15\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7000A8\" label=\"3.5-4\" opacity=\"1\" quantity=\"16\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8B0AA5\" label=\"4-4.5\" opacity=\"1\" quantity=\"17\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A31E9A\" label=\"4.5-5\" opacity=\"1\" quantity=\"18\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B93289\" label=\"5-5.7\" opacity=\"1\" quantity=\"19\"/\u003e' +\n  '\u003cColorMapEntry color=\"#CC4678\" label=\"5.7-6.4\" opacity=\"1\" quantity=\"20\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DB5C68\" label=\"6.4-7.2\" opacity=\"1\" quantity=\"21\"/\u003e' +\n  '\u003cColorMapEntry color=\"#E97158\" label=\"7.2-8\" opacity=\"1\" quantity=\"22\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F48849\" label=\"8-9\" opacity=\"1\" quantity=\"23\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FBA139\" label=\"9-10\" opacity=\"1\" quantity=\"24\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBC2A\" label=\"10-11.2\" opacity=\"1\" quantity=\"25\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FADA24\" label=\"11.2-12.5\" opacity=\"1\" quantity=\"26\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0F921\" label=\"12.5-125\" opacity=\"1\" quantity=\"27\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar mean_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#0D0887\" label=\"0-2.7\" opacity=\"1\" quantity=\"13\"/\u003e' +\n  '\u003cColorMapEntry color=\"#350498\" label=\"2.7-3\" opacity=\"1\" quantity=\"14\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5402A3\" label=\"3-3.5\" opacity=\"1\" quantity=\"15\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7000A8\" label=\"3.5-4\" opacity=\"1\" quantity=\"16\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8B0AA5\" label=\"4-4.5\" opacity=\"1\" quantity=\"17\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A31E9A\" label=\"4.5-5\" opacity=\"1\" quantity=\"18\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B93289\" label=\"5-5.7\" opacity=\"1\" quantity=\"19\"/\u003e' +\n  '\u003cColorMapEntry color=\"#CC4678\" label=\"5.7-6.4\" opacity=\"1\" quantity=\"20\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DB5C68\" label=\"6.4-7.2\" opacity=\"1\" quantity=\"21\"/\u003e' +\n  '\u003cColorMapEntry color=\"#E97158\" label=\"7.2-8\" opacity=\"1\" quantity=\"22\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F48849\" label=\"8-9\" opacity=\"1\" quantity=\"23\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FBA139\" label=\"9-10\" opacity=\"1\" quantity=\"24\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBC2A\" label=\"10-11.2\" opacity=\"1\" quantity=\"25\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FADA24\" label=\"11.2-12.5\" opacity=\"1\" quantity=\"26\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0F921\" label=\"12.5-125\" opacity=\"1\" quantity=\"27\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"5\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"5\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar raw = ee.Image(\"ISDASOIL/Africa/v1/phosphorus_extractable\");\nMap.addLayer(\n    raw.select(0).sldStyle(mean_0_20), {},\n    \"Phosphorus extractable, mean visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(1).sldStyle(mean_20_50), {},\n    \"Phosphorus extractable, mean visualization, 20-50 cm\");\nMap.addLayer(\n    raw.select(2).sldStyle(stdev_0_20), {},\n    \"Phosphorus extractable, stdev visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(3).sldStyle(stdev_20_50), {},\n    \"Phosphorus extractable, stdev visualization, 20-50 cm\");\n\nvar converted = raw.divide(10).exp().subtract(1);\n\nvar visualization = {min: 0, max: 15};\n\nMap.setCenter(25, -3, 2);\n\nMap.addLayer(converted.select(0), visualization, \"Phosphorus extractable, mean, 0-20 cm\");\n", "environment": "[]"}, {"name": "ISDASOIL_Africa_v1_potassium_extractable", "code": "var mean_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#0D0887\" label=\"0-32.1\" opacity=\"1\" quantity=\"35\"/\u003e' +\n  '\u003cColorMapEntry color=\"#350498\" label=\"32.1-43.7\" opacity=\"1\" quantity=\"38\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5402A3\" label=\"43.7-48.4\" opacity=\"1\" quantity=\"39\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7000A8\" label=\"48.4-53.6\" opacity=\"1\" quantity=\"40\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8B0AA5\" label=\"53.6-59.3\" opacity=\"1\" quantity=\"41\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A31E9A\" label=\"59.3-65.7\" opacity=\"1\" quantity=\"42\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B93289\" label=\"65.7-72.7\" opacity=\"1\" quantity=\"43\"/\u003e' +\n  '\u003cColorMapEntry color=\"#CC4678\" label=\"72.7-89\" opacity=\"1\" quantity=\"45\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DB5C68\" label=\"89-98.5\" opacity=\"1\" quantity=\"46\"/\u003e' +\n  '\u003cColorMapEntry color=\"#E97158\" label=\"98.5-108.9\" opacity=\"1\" quantity=\"47\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F48849\" label=\"108.9-120.5\" opacity=\"1\" quantity=\"48\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FBA139\" label=\"120.5-133.3\" opacity=\"1\" quantity=\"49\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBC2A\" label=\"133.3-163\" opacity=\"1\" quantity=\"51\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FADA24\" label=\"163-199.3\" opacity=\"1\" quantity=\"53\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0F921\" label=\"163-1200\" opacity=\"1\" quantity=\"55\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar mean_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#0D0887\" label=\"0-32.1\" opacity=\"1\" quantity=\"35\"/\u003e' +\n  '\u003cColorMapEntry color=\"#350498\" label=\"32.1-43.7\" opacity=\"1\" quantity=\"38\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5402A3\" label=\"43.7-48.4\" opacity=\"1\" quantity=\"39\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7000A8\" label=\"48.4-53.6\" opacity=\"1\" quantity=\"40\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8B0AA5\" label=\"53.6-59.3\" opacity=\"1\" quantity=\"41\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A31E9A\" label=\"59.3-65.7\" opacity=\"1\" quantity=\"42\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B93289\" label=\"65.7-72.7\" opacity=\"1\" quantity=\"43\"/\u003e' +\n  '\u003cColorMapEntry color=\"#CC4678\" label=\"72.7-89\" opacity=\"1\" quantity=\"45\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DB5C68\" label=\"89-98.5\" opacity=\"1\" quantity=\"46\"/\u003e' +\n  '\u003cColorMapEntry color=\"#E97158\" label=\"98.5-108.9\" opacity=\"1\" quantity=\"47\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F48849\" label=\"108.9-120.5\" opacity=\"1\" quantity=\"48\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FBA139\" label=\"120.5-133.3\" opacity=\"1\" quantity=\"49\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBC2A\" label=\"133.3-163\" opacity=\"1\" quantity=\"51\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FADA24\" label=\"163-199.3\" opacity=\"1\" quantity=\"53\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0F921\" label=\"163-1200\" opacity=\"1\" quantity=\"55\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"5\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"5\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar raw = ee.Image(\"ISDASOIL/Africa/v1/potassium_extractable\");\nMap.addLayer(\n    raw.select(0).sldStyle(mean_0_20), {},\n    \"Potassium extractable, mean visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(1).sldStyle(mean_20_50), {},\n    \"Potassium extractable, mean visualization, 20-50 cm\");\nMap.addLayer(\n    raw.select(2).sldStyle(stdev_0_20), {},\n    \"Potassium extractable, stdev visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(3).sldStyle(stdev_20_50), {},\n    \"Potassium extractable, stdev visualization, 20-50 cm\");\n\nvar converted = raw.divide(10).exp().subtract(1);\n\nvar visualization = {min: 0, max: 250};\n\nMap.setCenter(25, -3, 2);\n\nMap.addLayer(converted.select(0), visualization, \"Potassium extractable, mean, 0-20 cm\");\n", "environment": "[]"}, {"name": "ISDASOIL_Africa_v1_sand_content", "code": "var mean_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#00204D\" label=\"0-31\" opacity=\"1\" quantity=\"31\"/\u003e' +\n  '\u003cColorMapEntry color=\"#002D6C\" label=\"31-39\" opacity=\"1\" quantity=\"39\"/\u003e' +\n  '\u003cColorMapEntry color=\"#16396D\" label=\"39-43\" opacity=\"1\" quantity=\"43\"/\u003e' +\n  '\u003cColorMapEntry color=\"#36476B\" label=\"43-46\" opacity=\"1\" quantity=\"46\"/\u003e' +\n  '\u003cColorMapEntry color=\"#4B546C\" label=\"46-49\" opacity=\"1\" quantity=\"49\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5C616E\" label=\"49-52\" opacity=\"1\" quantity=\"52\"/\u003e' +\n  '\u003cColorMapEntry color=\"#6C6E72\" label=\"52-54\" opacity=\"1\" quantity=\"54\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7C7B78\" label=\"54-56\" opacity=\"1\" quantity=\"56\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8E8A79\" label=\"56-58\" opacity=\"1\" quantity=\"58\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A09877\" label=\"58-60\" opacity=\"1\" quantity=\"60\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B3A772\" label=\"60-63\" opacity=\"1\" quantity=\"63\"/\u003e' +\n  '\u003cColorMapEntry color=\"#C6B66B\" label=\"63-65\" opacity=\"1\" quantity=\"65\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DBC761\" label=\"65-68\" opacity=\"1\" quantity=\"68\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0D852\" label=\"68-71\" opacity=\"1\" quantity=\"71\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FFEA46\" label=\"71-100\" opacity=\"1\" quantity=\"75\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar mean_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#00204D\" label=\"0-31\" opacity=\"1\" quantity=\"31\"/\u003e' +\n  '\u003cColorMapEntry color=\"#002D6C\" label=\"31-39\" opacity=\"1\" quantity=\"39\"/\u003e' +\n  '\u003cColorMapEntry color=\"#16396D\" label=\"39-43\" opacity=\"1\" quantity=\"43\"/\u003e' +\n  '\u003cColorMapEntry color=\"#36476B\" label=\"43-46\" opacity=\"1\" quantity=\"46\"/\u003e' +\n  '\u003cColorMapEntry color=\"#4B546C\" label=\"46-49\" opacity=\"1\" quantity=\"49\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5C616E\" label=\"49-52\" opacity=\"1\" quantity=\"52\"/\u003e' +\n  '\u003cColorMapEntry color=\"#6C6E72\" label=\"52-54\" opacity=\"1\" quantity=\"54\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7C7B78\" label=\"54-56\" opacity=\"1\" quantity=\"56\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8E8A79\" label=\"56-58\" opacity=\"1\" quantity=\"58\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A09877\" label=\"58-60\" opacity=\"1\" quantity=\"60\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B3A772\" label=\"60-63\" opacity=\"1\" quantity=\"63\"/\u003e' +\n  '\u003cColorMapEntry color=\"#C6B66B\" label=\"63-65\" opacity=\"1\" quantity=\"65\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DBC761\" label=\"65-68\" opacity=\"1\" quantity=\"68\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0D852\" label=\"68-71\" opacity=\"1\" quantity=\"71\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FFEA46\" label=\"71-100\" opacity=\"1\" quantity=\"75\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"6\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"7\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"6\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"7\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\nvar raw = ee.Image(\"ISDASOIL/Africa/v1/sand_content\");\nMap.addLayer(\n    raw.select(0).sldStyle(mean_0_20), {},\n    \"Sand content, mean visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(1).sldStyle(mean_20_50), {},\n    \"Sand content, mean visualization, 20-50 cm\");\nMap.addLayer(\n    raw.select(2).sldStyle(stdev_0_20), {},\n    \"Sand content, stdev visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(3).sldStyle(stdev_20_50), {},\n    \"Sand content, stdev visualization, 20-50 cm\");\n\nvar converted = raw.divide(10).exp().subtract(1);\n\nvar visualization = {min: 0, max: 3000};\n\nMap.setCenter(25, -3, 2);\n\nMap.addLayer(converted.select(0), visualization, \"Sand content, mean, 0-20 cm\");\n", "environment": "[]"}, {"name": "ISDASOIL_Africa_v1_silt_content", "code": "var mean_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#00204D\" label=\"0-7\" opacity=\"1\" quantity=\"7\"/\u003e' +\n  '\u003cColorMapEntry color=\"#002D6C\" label=\"7-9\" opacity=\"1\" quantity=\"9\"/\u003e' +\n  '\u003cColorMapEntry color=\"#16396D\" label=\"9-10\" opacity=\"1\" quantity=\"10\"/\u003e' +\n  '\u003cColorMapEntry color=\"#36476B\" label=\"10-11\" opacity=\"1\" quantity=\"11\"/\u003e' +\n  '\u003cColorMapEntry color=\"#4B546C\" label=\"11-12\" opacity=\"1\" quantity=\"12\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5C616E\" label=\"12-13\" opacity=\"1\" quantity=\"13\"/\u003e' +\n  '\u003cColorMapEntry color=\"#6C6E72\" label=\"13-14\" opacity=\"1\" quantity=\"14\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7C7B78\" label=\"14-15\" opacity=\"1\" quantity=\"15\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8E8A79\" label=\"15-16\" opacity=\"1\" quantity=\"16\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A09877\" label=\"16-17\" opacity=\"1\" quantity=\"17\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B3A772\" label=\"17-18\" opacity=\"1\" quantity=\"18\"/\u003e' +\n  '\u003cColorMapEntry color=\"#C6B66B\" label=\"18-19\" opacity=\"1\" quantity=\"19\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DBC761\" label=\"19-20\" opacity=\"1\" quantity=\"20\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0D852\" label=\"20-22\" opacity=\"1\" quantity=\"22\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FFEA46\" label=\"22-70\" opacity=\"1\" quantity=\"24\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar mean_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#00204D\" label=\"0-7\" opacity=\"1\" quantity=\"7\"/\u003e' +\n  '\u003cColorMapEntry color=\"#002D6C\" label=\"7-9\" opacity=\"1\" quantity=\"9\"/\u003e' +\n  '\u003cColorMapEntry color=\"#16396D\" label=\"9-10\" opacity=\"1\" quantity=\"10\"/\u003e' +\n  '\u003cColorMapEntry color=\"#36476B\" label=\"10-11\" opacity=\"1\" quantity=\"11\"/\u003e' +\n  '\u003cColorMapEntry color=\"#4B546C\" label=\"11-12\" opacity=\"1\" quantity=\"12\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5C616E\" label=\"12-13\" opacity=\"1\" quantity=\"13\"/\u003e' +\n  '\u003cColorMapEntry color=\"#6C6E72\" label=\"13-14\" opacity=\"1\" quantity=\"14\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7C7B78\" label=\"14-15\" opacity=\"1\" quantity=\"15\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8E8A79\" label=\"15-16\" opacity=\"1\" quantity=\"16\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A09877\" label=\"16-17\" opacity=\"1\" quantity=\"17\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B3A772\" label=\"17-18\" opacity=\"1\" quantity=\"18\"/\u003e' +\n  '\u003cColorMapEntry color=\"#C6B66B\" label=\"18-19\" opacity=\"1\" quantity=\"19\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DBC761\" label=\"19-20\" opacity=\"1\" quantity=\"20\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0D852\" label=\"20-22\" opacity=\"1\" quantity=\"22\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FFEA46\" label=\"22-70\" opacity=\"1\" quantity=\"24\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"4.19000000000005\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"4.19000000000005\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar raw = ee.Image(\"ISDASOIL/Africa/v1/silt_content\");\nMap.addLayer(\n    raw.select(0).sldStyle(mean_0_20), {},\n    \"Silt content, mean visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(1).sldStyle(mean_20_50), {},\n    \"Silt content, mean visualization, 20-50 cm\");\nMap.addLayer(\n    raw.select(2).sldStyle(stdev_0_20), {},\n    \"Silt content, stdev visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(3).sldStyle(stdev_20_50), {},\n    \"Silt content, stdev visualization, 20-50 cm\");\n\nvar converted = raw.divide(10).exp().subtract(1);\n\nvar visualization = {min: 0, max: 15};\n\nMap.setCenter(25, -3, 2);\n\nMap.addLayer(converted.select(0), visualization, \"Silt content, mean, 0-20 cm\");\n", "environment": "[]"}, {"name": "ISDASOIL_Africa_v1_stone_content", "code": "var mean_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#00204D\" label=\"0-0.1\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#002D6C\" label=\"0.1-0.3\" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#16396D\" label=\"0.3-0.5\" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#36476B\" label=\"0.5-0.6\" opacity=\"1\" quantity=\"5\"/\u003e' +\n  '\u003cColorMapEntry color=\"#4B546C\" label=\"0.6-0.8\" opacity=\"1\" quantity=\"6\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5C616E\" label=\"0.8-1\" opacity=\"1\" quantity=\"7\"/\u003e' +\n  '\u003cColorMapEntry color=\"#6C6E72\" label=\"1-1.2\" opacity=\"1\" quantity=\"8\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7C7B78\" label=\"1.2-1.5\" opacity=\"1\" quantity=\"9\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8E8A79\" label=\"1.5-1.7\" opacity=\"1\" quantity=\"10\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A09877\" label=\"1.7-2\" opacity=\"1\" quantity=\"11\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B3A772\" label=\"2-2.3\" opacity=\"1\" quantity=\"12\"/\u003e' +\n  '\u003cColorMapEntry color=\"#C6B66B\" label=\"2.3-2.7\" opacity=\"1\" quantity=\"13\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DBC761\" label=\"2.7-3.1\" opacity=\"1\" quantity=\"14\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0D852\" label=\"3.1-3.5\" opacity=\"1\" quantity=\"15\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FFEA46\" label=\"3.5-80\" opacity=\"1\" quantity=\"16\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar mean_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#00204D\" label=\"0-0.1\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#002D6C\" label=\"0.1-0.3\" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#16396D\" label=\"0.3-0.5\" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#36476B\" label=\"0.5-0.6\" opacity=\"1\" quantity=\"5\"/\u003e' +\n  '\u003cColorMapEntry color=\"#4B546C\" label=\"0.6-0.8\" opacity=\"1\" quantity=\"6\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5C616E\" label=\"0.8-1\" opacity=\"1\" quantity=\"7\"/\u003e' +\n  '\u003cColorMapEntry color=\"#6C6E72\" label=\"1-1.2\" opacity=\"1\" quantity=\"8\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7C7B78\" label=\"1.2-1.5\" opacity=\"1\" quantity=\"9\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8E8A79\" label=\"1.5-1.7\" opacity=\"1\" quantity=\"10\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A09877\" label=\"1.7-2\" opacity=\"1\" quantity=\"11\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B3A772\" label=\"2-2.3\" opacity=\"1\" quantity=\"12\"/\u003e' +\n  '\u003cColorMapEntry color=\"#C6B66B\" label=\"2.3-2.7\" opacity=\"1\" quantity=\"13\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DBC761\" label=\"2.7-3.1\" opacity=\"1\" quantity=\"14\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0D852\" label=\"3.1-3.5\" opacity=\"1\" quantity=\"15\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FFEA46\" label=\"3.5-80\" opacity=\"1\" quantity=\"16\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"5\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"5\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar raw = ee.Image(\"ISDASOIL/Africa/v1/stone_content\");\nMap.addLayer(\n    raw.select(0).sldStyle(mean_0_20), {},\n    \"Stone content, mean visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(1).sldStyle(mean_20_50), {},\n    \"Stone content, mean visualization, 20-50 cm\");\nMap.addLayer(\n    raw.select(2).sldStyle(stdev_0_20), {},\n    \"Stone content, stdev visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(3).sldStyle(stdev_20_50), {},\n    \"Stone content, stdev visualization, 20-50 cm\");\n\nvar converted = raw.divide(10).exp().subtract(1);\n\nvar visualization = {min: 0, max: 6};\n\nMap.setCenter(25, -3, 2);\n\nMap.addLayer(converted.select(0), visualization, \"Stone content, mean, 0-20 cm\");\n", "environment": "[]"}, {"name": "ISDASOIL_Africa_v1_sulphur_extractable", "code": "var mean_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#0D0887\" label=\"0-2.3\" opacity=\"1\" quantity=\"12\"/\u003e' +\n  '\u003cColorMapEntry color=\"#350498\" label=\"2.3-3.1\" opacity=\"1\" quantity=\"14\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5402A3\" label=\"3.1-3.5\" opacity=\"1\" quantity=\"15\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7000A8\" label=\"3.5-4\" opacity=\"1\" quantity=\"16\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8B0AA5\" label=\"4-5\" opacity=\"1\" quantity=\"18\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A31E9A\" label=\"5-5.7\" opacity=\"1\" quantity=\"19\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B93289\" label=\"5.7-6.4\" opacity=\"1\" quantity=\"20\"/\u003e' +\n  '\u003cColorMapEntry color=\"#CC4678\" label=\"6.4-7.2\" opacity=\"1\" quantity=\"21\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DB5C68\" label=\"7.2-8\" opacity=\"1\" quantity=\"22\"/\u003e' +\n  '\u003cColorMapEntry color=\"#E97158\" label=\"8-9\" opacity=\"1\" quantity=\"23\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F48849\" label=\"9-10\" opacity=\"1\" quantity=\"24\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FBA139\" label=\"10-11.2\" opacity=\"1\" quantity=\"25\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBC2A\" label=\"11.2-12.5\" opacity=\"1\" quantity=\"26\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FADA24\" label=\"12.5-15.4\" opacity=\"1\" quantity=\"28\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0F921\" label=\"15.4-125\" opacity=\"1\" quantity=\"30\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar mean_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#0D0887\" label=\"0-2.3\" opacity=\"1\" quantity=\"12\"/\u003e' +\n  '\u003cColorMapEntry color=\"#350498\" label=\"2.3-3.1\" opacity=\"1\" quantity=\"14\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5402A3\" label=\"3.1-3.5\" opacity=\"1\" quantity=\"15\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7000A8\" label=\"3.5-4\" opacity=\"1\" quantity=\"16\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8B0AA5\" label=\"4-5\" opacity=\"1\" quantity=\"18\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A31E9A\" label=\"5-5.7\" opacity=\"1\" quantity=\"19\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B93289\" label=\"5.7-6.4\" opacity=\"1\" quantity=\"20\"/\u003e' +\n  '\u003cColorMapEntry color=\"#CC4678\" label=\"6.4-7.2\" opacity=\"1\" quantity=\"21\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DB5C68\" label=\"7.2-8\" opacity=\"1\" quantity=\"22\"/\u003e' +\n  '\u003cColorMapEntry color=\"#E97158\" label=\"8-9\" opacity=\"1\" quantity=\"23\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F48849\" label=\"9-10\" opacity=\"1\" quantity=\"24\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FBA139\" label=\"10-11.2\" opacity=\"1\" quantity=\"25\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBC2A\" label=\"11.2-12.5\" opacity=\"1\" quantity=\"26\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FADA24\" label=\"12.5-15.4\" opacity=\"1\" quantity=\"28\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0F921\" label=\"15.4-125\" opacity=\"1\" quantity=\"30\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"6\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"14\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"6\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"14\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar raw = ee.Image(\"ISDASOIL/Africa/v1/sulphur_extractable\");\nMap.addLayer(\n    raw.select(0).sldStyle(mean_0_20), {},\n    \"Sulphur extractable, mean visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(1).sldStyle(mean_20_50), {},\n    \"Sulphur extractable, mean visualization, 20-50 cm\");\nMap.addLayer(\n    raw.select(2).sldStyle(stdev_0_20), {},\n    \"Sulphur extractable, stdev visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(3).sldStyle(stdev_20_50), {},\n    \"Sulphur extractable, stdev visualization, 20-50 cm\");\n\nvar converted = raw.divide(10).exp().subtract(1);\n\nvar visualization = {min: 0, max: 20};\n\nMap.setCenter(25, -3, 2);\n\nMap.addLayer(converted.select(0), visualization, \"Sulphur extractable, mean, 0-20 cm\");\n", "environment": "[]"}, {"name": "ISDASOIL_Africa_v1_texture_class", "code": "var raw = ee.Image(\"ISDASOIL/Africa/v1/texture_class\");\nMap.addLayer(\n    raw.select(0), {}, \"Texture class, 0-20 cm\");\nMap.addLayer(\n    raw.select(1), {}, \"Texture class, 20-50 cm\");\n\nMap.setCenter(25, -3, 2);\n", "environment": "[]"}, {"name": "ISDASOIL_Africa_v1_zinc_extractable", "code": "var mean_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#0D0887\" label=\"0-0.6\" opacity=\"1\" quantity=\"5\"/\u003e' +\n  '\u003cColorMapEntry color=\"#350498\" label=\"0.6-0.8\" opacity=\"1\" quantity=\"6\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5402A3\" label=\"0.8-1\" opacity=\"1\" quantity=\"7\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7000A8\" label=\"1-1.2\" opacity=\"1\" quantity=\"8\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8B0AA5\" label=\"1.2-1.5\" opacity=\"1\" quantity=\"9\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A31E9A\" label=\"1.5-1.7\" opacity=\"1\" quantity=\"10\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B93289\" label=\"1.7-2\" opacity=\"1\" quantity=\"11\"/\u003e' +\n  '\u003cColorMapEntry color=\"#CC4678\" label=\"2-2.3\" opacity=\"1\" quantity=\"12\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DB5C68\" label=\"2.3-2.7\" opacity=\"1\" quantity=\"13\"/\u003e' +\n  '\u003cColorMapEntry color=\"#E97158\" label=\"2.7-3.1\" opacity=\"1\" quantity=\"14\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F48849\" label=\"3.1-3.5\" opacity=\"1\" quantity=\"15\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FBA139\" label=\"3.5-4\" opacity=\"1\" quantity=\"16\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBC2A\" label=\"4-4.5\" opacity=\"1\" quantity=\"17\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FADA24\" label=\"4.5-5\" opacity=\"1\" quantity=\"18\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0F921\" label=\"5-125\" opacity=\"1\" quantity=\"19\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar mean_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#0D0887\" label=\"0-0.6\" opacity=\"1\" quantity=\"5\"/\u003e' +\n  '\u003cColorMapEntry color=\"#350498\" label=\"0.6-0.8\" opacity=\"1\" quantity=\"6\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5402A3\" label=\"0.8-1\" opacity=\"1\" quantity=\"7\"/\u003e' +\n  '\u003cColorMapEntry color=\"#7000A8\" label=\"1-1.2\" opacity=\"1\" quantity=\"8\"/\u003e' +\n  '\u003cColorMapEntry color=\"#8B0AA5\" label=\"1.2-1.5\" opacity=\"1\" quantity=\"9\"/\u003e' +\n  '\u003cColorMapEntry color=\"#A31E9A\" label=\"1.5-1.7\" opacity=\"1\" quantity=\"10\"/\u003e' +\n  '\u003cColorMapEntry color=\"#B93289\" label=\"1.7-2\" opacity=\"1\" quantity=\"11\"/\u003e' +\n  '\u003cColorMapEntry color=\"#CC4678\" label=\"2-2.3\" opacity=\"1\" quantity=\"12\"/\u003e' +\n  '\u003cColorMapEntry color=\"#DB5C68\" label=\"2.3-2.7\" opacity=\"1\" quantity=\"13\"/\u003e' +\n  '\u003cColorMapEntry color=\"#E97158\" label=\"2.7-3.1\" opacity=\"1\" quantity=\"14\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F48849\" label=\"3.1-3.5\" opacity=\"1\" quantity=\"15\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FBA139\" label=\"3.5-4\" opacity=\"1\" quantity=\"16\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FEBC2A\" label=\"4-4.5\" opacity=\"1\" quantity=\"17\"/\u003e' +\n  '\u003cColorMapEntry color=\"#FADA24\" label=\"4.5-5\" opacity=\"1\" quantity=\"18\"/\u003e' +\n  '\u003cColorMapEntry color=\"#F0F921\" label=\"5-125\" opacity=\"1\" quantity=\"19\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_0_20 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"5\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar stdev_20_50 =\n'\u003cRasterSymbolizer\u003e' +\n '\u003cColorMap type=\"ramp\"\u003e' +\n  '\u003cColorMapEntry color=\"#fde725\" label=\"low\" opacity=\"1\" quantity=\"1\"/\u003e' +\n  '\u003cColorMapEntry color=\"#5dc962\" label=\" \" opacity=\"1\" quantity=\"2\"/\u003e' +\n  '\u003cColorMapEntry color=\"#20908d\" label=\" \" opacity=\"1\" quantity=\"3\"/\u003e' +\n  '\u003cColorMapEntry color=\"#3a528b\" label=\" \" opacity=\"1\" quantity=\"4\"/\u003e' +\n  '\u003cColorMapEntry color=\"#440154\" label=\"high\" opacity=\"1\" quantity=\"5\"/\u003e' +\n '\u003c/ColorMap\u003e' +\n '\u003cContrastEnhancement/\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar raw = ee.Image(\"ISDASOIL/Africa/v1/zinc_extractable\");\nMap.addLayer(\n    raw.select(0).sldStyle(mean_0_20), {},\n    \"Zinc, extractable, mean visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(1).sldStyle(mean_20_50), {},\n    \"Zinc, extractable, mean visualization, 20-50 cm\");\nMap.addLayer(\n    raw.select(2).sldStyle(stdev_0_20), {},\n    \"Zinc, extractable, stdev visualization, 0-20 cm\");\nMap.addLayer(\n    raw.select(3).sldStyle(stdev_20_50), {},\n    \"Zinc, extractable, stdev visualization, 20-50 cm\");\n\nvar converted = raw.divide(10).exp().subtract(1);\n\nvar visualization = {min: 0, max: 10};\n\nMap.setCenter(25, -3, 2);\n\nMap.addLayer(converted.select(0), visualization, \"Zinc, extractable, mean, 0-20 cm\");\n", "environment": "[]"}, {"name": "JAXA_ALOS_AVNIR-2_ORI", "code": "var dataset = ee.ImageCollection('JAXA/ALOS/AVNIR-2/ORI')\n                  .filter(ee.Filter.date('2011-01-01', '2011-04-01'));\nvar avnir2OriRgb = dataset.select(['B3', 'B2', 'B1']);\nvar avnir2OriRgbVis = {\n  min: 0.0,\n  max: 255.0,\n};\nMap.setCenter(138.7302, 35.3641, 12);\nMap.addLayer(avnir2OriRgb, avnir2OriRgbVis, 'AVNIR-2 ORI RGB');\n", "environment": "[]"}, {"name": "JAXA_ALOS_AW3D30_V1_1", "code": "var dataset = ee.Image('JAXA/ALOS/AW3D30/V1_1');\nvar elevation = dataset.select('AVE');\nvar elevationVis = {\n  min: 0.0,\n  max: 4000.0,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff'],\n};\nMap.setCenter(136.85, 37.37, 4);\nMap.addLayer(elevation, elevationVis, 'Elevation');\n", "environment": "[]"}, {"name": "JAXA_ALOS_AW3D30_V2_1", "code": "var dataset = ee.Image('JAXA/ALOS/AW3D30/V2_1');\nvar elevation = dataset.select('AVE_DSM');\nvar elevationVis = {\n  min: 0.0,\n  max: 4000.0,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff'],\n};\nMap.setCenter(136.85, 37.37, 4);\nMap.addLayer(elevation, elevationVis, 'Elevation');\n", "environment": "[]"}, {"name": "JAXA_ALOS_AW3D30_V2_2", "code": "var dataset = ee.Image('JAXA/ALOS/AW3D30/V2_2');\nvar elevation = dataset.select('AVE_DSM');\nvar elevationVis = {\n  min: -9999,\n  max: 15355,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff'],\n};\nMap.setCenter(136.85, 37.37, 4);\nMap.addLayer(elevation, elevationVis, 'Elevation');\n", "environment": "[]"}, {"name": "JAXA_ALOS_AW3D30_V3_2", "code": "var dataset = ee.ImageCollection('JAXA/ALOS/AW3D30/V3_2');\nvar elevation = dataset.select('DSM');\nvar elevationVis = {\n  min: 0,\n  max: 5000,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff']\n};\nMap.setCenter(138.73, 35.36, 11);\nMap.addLayer(elevation, elevationVis, 'Elevation');\n\n// Reproject an image mosaic using a projection from one of the image tiles,\n// rather than using the default projection returned by .mosaic().\nvar proj = elevation.first().select(0).projection();\nvar slopeReprojected = ee.Terrain.slope(elevation.mosaic()\n                             .setDefaultProjection(proj));\nMap.addLayer(slopeReprojected, {min: 0, max: 45}, 'Slope');\n", "environment": "[]"}, {"name": "JAXA_ALOS_PALSAR_YEARLY_FNF", "code": "var dataset = ee.ImageCollection('JAXA/ALOS/PALSAR/YEARLY/FNF')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar forestNonForest = dataset.select('fnf');\nvar forestNonForestVis = {\n  min: 1.0,\n  max: 3.0,\n  palette: ['006400', 'FEFF99', '0000FF'],\n};\nMap.setCenter(136.85, 37.37, 4);\nMap.addLayer(forestNonForest, forestNonForestVis, 'Forest/Non-Forest');\n", "environment": "[]"}, {"name": "JAXA_ALOS_PALSAR_YEARLY_SAR", "code": "var dataset = ee.ImageCollection('JAXA/ALOS/PALSAR/YEARLY/SAR')\n                  .filter(ee.Filter.date('2017-01-01', '2018-01-01'));\nvar sarHh = dataset.select('HH');\nvar sarHhVis = {\n  min: 0.0,\n  max: 10000.0,\n};\nMap.setCenter(136.85, 37.37, 4);\nMap.addLayer(sarHh, sarHhVis, 'SAR HH');\n", "environment": "[]"}, {"name": "JAXA_GCOM-C_L3_LAND_LAI_V1", "code": "var dataset = ee.ImageCollection(\"JAXA/GCOM-C/L3/LAND/LAI/V1\")\n                .filterDate('2020-01-01', '2020-02-01')\n                // filter to daytime data only\n                .filter(ee.Filter.eq(\"SATELLITE_DIRECTION\", \"D\"));\n\n// Multiply with slope coefficient\nvar dataset = dataset.mean().multiply(0.001);\n\nvar visualization = {\n  bands: ['LAI_AVE'],\n  min: -7,\n  max: 7,\n  palette: [\n    \"040274\",\"040281\",\"0502a3\",\"0502b8\",\"0502ce\",\"0502e6\",\n    \"0602ff\",\"235cb1\",\"307ef3\",\"269db1\",\"30c8e2\",\"32d3ef\",\n    \"3be285\",\"3ff38f\",\"86e26f\",\"3ae237\",\"b5e22e\",\"d6e21f\",\n    \"fff705\",\"ffd611\",\"ffb613\",\"ff8b13\",\"ff6e08\",\"ff500d\",\n    \"ff0000\",\"de0101\",\"c21301\",\"a71001\",\"911003\",\n  ]\n};\n\nMap.setCenter(128.45, 33.33, 5);\n\nMap.addLayer(dataset, visualization, \"Leaf Area Index\");\n", "environment": "[]"}, {"name": "JAXA_GCOM-C_L3_LAND_LAI_V2", "code": "var dataset = ee.ImageCollection(\"JAXA/GCOM-C/L3/LAND/LAI/V2\")\n                .filterDate('2020-01-01', '2020-02-01')\n                // filter to daytime data only\n                .filter(ee.Filter.eq(\"SATELLITE_DIRECTION\", \"D\"));\n\n// Multiply with slope coefficient\nvar dataset = dataset.mean().multiply(0.001);\n\nvar visualization = {\n  bands: ['LAI_AVE'],\n  min: -7,\n  max: 7,\n  palette: [\n    \"040274\",\"040281\",\"0502a3\",\"0502b8\",\"0502ce\",\"0502e6\",\n    \"0602ff\",\"235cb1\",\"307ef3\",\"269db1\",\"30c8e2\",\"32d3ef\",\n    \"3be285\",\"3ff38f\",\"86e26f\",\"3ae237\",\"b5e22e\",\"d6e21f\",\n    \"fff705\",\"ffd611\",\"ffb613\",\"ff8b13\",\"ff6e08\",\"ff500d\",\n    \"ff0000\",\"de0101\",\"c21301\",\"a71001\",\"911003\",\n  ]\n};\n\nMap.setCenter(128.45, 33.33, 5);\n\nMap.addLayer(dataset, visualization, \"Leaf Area Index\");\n", "environment": "[]"}, {"name": "JAXA_GCOM-C_L3_LAND_LAI_V3", "code": "var dataset = ee.ImageCollection(\"JAXA/GCOM-C/L3/LAND/LAI/V3\")\n                .filterDate('2021-12-01', '2022-01-01')\n                // filter to daytime data only\n                .filter(ee.Filter.eq(\"SATELLITE_DIRECTION\", \"D\"));\n\n// Multiply with slope coefficient\nvar dataset = dataset.mean().multiply(0.001);\n\nvar visualization = {\n  bands: ['LAI_AVE'],\n  min: -7,\n  max: 7,\n  palette: [\n    \"040274\",\"040281\",\"0502a3\",\"0502b8\",\"0502ce\",\"0502e6\",\n    \"0602ff\",\"235cb1\",\"307ef3\",\"269db1\",\"30c8e2\",\"32d3ef\",\n    \"3be285\",\"3ff38f\",\"86e26f\",\"3ae237\",\"b5e22e\",\"d6e21f\",\n    \"fff705\",\"ffd611\",\"ffb613\",\"ff8b13\",\"ff6e08\",\"ff500d\",\n    \"ff0000\",\"de0101\",\"c21301\",\"a71001\",\"911003\",\n  ]\n};\n\nMap.setCenter(128.45, 33.33, 5);\n\nMap.addLayer(dataset, visualization, \"Leaf Area Index\");\n", "environment": "[]"}, {"name": "JAXA_GCOM-C_L3_LAND_LST_V1", "code": "var dataset = ee.ImageCollection(\"JAXA/GCOM-C/L3/LAND/LST/V1\")\n                .filterDate('2020-01-01', '2020-02-01')\n                // filter to daytime data only\n                .filter(ee.Filter.eq(\"SATELLITE_DIRECTION\", \"D\"));\n\n// Multiply with slope coefficient\nvar dataset = dataset.mean().multiply(0.02);\n\nvar visualization = {\n  bands: ['LST_AVE'],\n  min: 250,\n  max: 316,\n  palette: [\n    \"040274\",\"040281\",\"0502a3\",\"0502b8\",\"0502ce\",\"0502e6\",\n    \"0602ff\",\"235cb1\",\"307ef3\",\"269db1\",\"30c8e2\",\"32d3ef\",\n    \"3be285\",\"3ff38f\",\"86e26f\",\"3ae237\",\"b5e22e\",\"d6e21f\",\n    \"fff705\",\"ffd611\",\"ffb613\",\"ff8b13\",\"ff6e08\",\"ff500d\",\n    \"ff0000\",\"de0101\",\"c21301\",\"a71001\",\"911003\",\n  ]\n};\n\nMap.setCenter(128.45, 33.33, 5);\n\nMap.addLayer(dataset, visualization, \"Land Surface Temperature\");\n", "environment": "[]"}, {"name": "JAXA_GCOM-C_L3_LAND_LST_V2", "code": "var dataset = ee.ImageCollection(\"JAXA/GCOM-C/L3/LAND/LST/V2\")\n                .filterDate('2020-01-01', '2020-02-01')\n                // filter to daytime data only\n                .filter(ee.Filter.eq(\"SATELLITE_DIRECTION\", \"D\"));\n\n// Multiply with slope coefficient\nvar dataset = dataset.mean().multiply(0.02);\n\nvar visualization = {\n  bands: ['LST_AVE'],\n  min: 250,\n  max: 316,\n  palette: [\n    \"040274\",\"040281\",\"0502a3\",\"0502b8\",\"0502ce\",\"0502e6\",\n    \"0602ff\",\"235cb1\",\"307ef3\",\"269db1\",\"30c8e2\",\"32d3ef\",\n    \"3be285\",\"3ff38f\",\"86e26f\",\"3ae237\",\"b5e22e\",\"d6e21f\",\n    \"fff705\",\"ffd611\",\"ffb613\",\"ff8b13\",\"ff6e08\",\"ff500d\",\n    \"ff0000\",\"de0101\",\"c21301\",\"a71001\",\"911003\",\n  ]\n};\n\nMap.setCenter(128.45, 33.33, 5);\n\nMap.addLayer(dataset, visualization, \"Land Surface Temperature\");\n", "environment": "[]"}, {"name": "JAXA_GCOM-C_L3_LAND_LST_V3", "code": "var dataset = ee.ImageCollection(\"JAXA/GCOM-C/L3/LAND/LST/V3\")\n                .filterDate('2021-12-01', '2022-01-01')\n                // filter to daytime data only\n                .filter(ee.Filter.eq(\"SATELLITE_DIRECTION\", \"D\"));\n\n// Multiply with slope coefficient\nvar dataset = dataset.mean().multiply(0.02);\n\nvar visualization = {\n  bands: ['LST_AVE'],\n  min: 250,\n  max: 316,\n  palette: [\n    \"040274\",\"040281\",\"0502a3\",\"0502b8\",\"0502ce\",\"0502e6\",\n    \"0602ff\",\"235cb1\",\"307ef3\",\"269db1\",\"30c8e2\",\"32d3ef\",\n    \"3be285\",\"3ff38f\",\"86e26f\",\"3ae237\",\"b5e22e\",\"d6e21f\",\n    \"fff705\",\"ffd611\",\"ffb613\",\"ff8b13\",\"ff6e08\",\"ff500d\",\n    \"ff0000\",\"de0101\",\"c21301\",\"a71001\",\"911003\",\n  ]\n};\n\nMap.setCenter(128.45, 33.33, 5);\n\nMap.addLayer(dataset, visualization, \"Land Surface Temperature\");\n", "environment": "[]"}, {"name": "JAXA_GCOM-C_L3_OCEAN_CHLA_V1", "code": "var dataset = ee.ImageCollection(\"JAXA/GCOM-C/L3/OCEAN/CHLA/V1\")\n                .filterDate('2020-01-01', '2020-02-01')\n                // filter to daytime data only\n                .filter(ee.Filter.eq(\"SATELLITE_DIRECTION\", \"D\"));\n\n// Multiply with slope coefficient\nvar image = dataset.mean().multiply(0.0016).log10();\n\nvar vis = {\n  bands: ['CHLA_AVE'],\n  min: -2,\n  max: 2,\n  palette: [\n    '3500a8','0800ba','003fd6',\n    '00aca9','77f800','ff8800',\n    'b30000','920000','880000'\n  ]\n};\n\nMap.addLayer(image, vis, \"Chlorophyll-a concentration\");\n\nMap.setCenter(128.45, 33.33, 5);\n", "environment": "[]"}, {"name": "JAXA_GCOM-C_L3_OCEAN_CHLA_V2", "code": "var dataset = ee.ImageCollection(\"JAXA/GCOM-C/L3/OCEAN/CHLA/V2\")\n                .filterDate('2020-01-01', '2020-02-01')\n                // filter to daytime data only\n                .filter(ee.Filter.eq(\"SATELLITE_DIRECTION\", \"D\"));\n\n// Multiply with slope coefficient\nvar image = dataset.mean().multiply(0.0016).log10();\n\nvar vis = {\n  bands: ['CHLA_AVE'],\n  min: -2,\n  max: 2,\n  palette: [\n    '3500a8','0800ba','003fd6',\n    '00aca9','77f800','ff8800',\n    'b30000','920000','880000'\n  ]\n};\n\nMap.addLayer(image, vis, \"Chlorophyll-a concentration\");\n\nMap.setCenter(128.45, 33.33, 5);\n", "environment": "[]"}, {"name": "JAXA_GCOM-C_L3_OCEAN_CHLA_V3", "code": "var dataset = ee.ImageCollection(\"JAXA/GCOM-C/L3/OCEAN/CHLA/V3\")\n                .filterDate('2021-12-01', '2022-01-01')\n                // filter to daytime data only\n                .filter(ee.Filter.eq(\"SATELLITE_DIRECTION\", \"D\"));\n\n// Multiply with slope coefficient\nvar image = dataset.mean().multiply(0.0016).log10();\n\nvar vis = {\n  bands: ['CHLA_AVE'],\n  min: -2,\n  max: 2,\n  palette: [\n    '3500a8','0800ba','003fd6',\n    '00aca9','77f800','ff8800',\n    'b30000','920000','880000'\n  ]\n};\n\nMap.addLayer(image, vis, \"Chlorophyll-a concentration\");\n\nMap.setCenter(128.45, 33.33, 5);\n", "environment": "[]"}, {"name": "JAXA_GCOM-C_L3_OCEAN_SST_V1", "code": "var dataset = ee.ImageCollection(\"JAXA/GCOM-C/L3/OCEAN/SST/V1\")\n                .filterDate('2020-01-01', '2020-02-01')\n                // filter to daytime data only\n                .filter(ee.Filter.eq(\"SATELLITE_DIRECTION\", \"D\"));\n\n// Multiply with slope coefficient and add offset\nvar dataset = dataset.mean().multiply(0.0012).add(-10);\n\nvar vis = {\n  bands: ['SST_AVE'],\n  min: 0,\n  max: 30,\n  palette: ['000000', '005aff', '43c8c8', 'fff700', 'ff0000'],\n};\n\nMap.setCenter(128.45, 33.33, 5);\n\nMap.addLayer(dataset, vis, \"Sea Surface Temperature\");\n", "environment": "[]"}, {"name": "JAXA_GCOM-C_L3_OCEAN_SST_V2", "code": "var dataset = ee.ImageCollection(\"JAXA/GCOM-C/L3/OCEAN/SST/V2\")\n                .filterDate('2020-01-01', '2020-02-01')\n                // filter to daytime data only\n                .filter(ee.Filter.eq(\"SATELLITE_DIRECTION\", \"D\"));\n\n// Multiply with slope coefficient and add offset\nvar dataset = dataset.mean().multiply(0.0012).add(-10);\n\nvar vis = {\n  bands: ['SST_AVE'],\n  min: 0,\n  max: 30,\n  palette: ['000000', '005aff', '43c8c8', 'fff700', 'ff0000'],\n};\n\nMap.setCenter(128.45, 33.33, 5);\n\nMap.addLayer(dataset, vis, \"Sea Surface Temperature\");\n", "environment": "[]"}, {"name": "JAXA_GCOM-C_L3_OCEAN_SST_V3", "code": "var dataset = ee.ImageCollection(\"JAXA/GCOM-C/L3/OCEAN/SST/V3\")\n                .filterDate('2021-12-01', '2022-01-01')\n                // filter to daytime data only\n                .filter(ee.Filter.eq(\"SATELLITE_DIRECTION\", \"D\"));\n\n// Multiply with slope coefficient and add offset\nvar dataset = dataset.mean().multiply(0.0012).add(-10);\n\nvar vis = {\n  bands: ['SST_AVE'],\n  min: 0,\n  max: 30,\n  palette: ['000000', '005aff', '43c8c8', 'fff700', 'ff0000'],\n};\n\nMap.setCenter(128.45, 33.33, 5);\n\nMap.addLayer(dataset, vis, \"Sea Surface Temperature\");\n", "environment": "[]"}, {"name": "JAXA_GPM_L3_GSMaP_v6_operational", "code": "var dataset = ee.ImageCollection('JAXA/GPM_L3/GSMaP/v6/operational')\n                  .filter(ee.Filter.date('2018-08-06', '2018-08-07'));\nvar precipitation = dataset.select('hourlyPrecipRate');\nvar precipitationVis = {\n  min: 0.0,\n  max: 30.0,\n  palette:\n      ['1621a2', 'ffffff', '03ffff', '13ff03', 'efff00', 'ffb103', 'ff2300'],\n};\nMap.setCenter(-90.7, 26.12, 2);\nMap.addLayer(precipitation, precipitationVis, 'Precipitation');\n", "environment": "[]"}, {"name": "JAXA_GPM_L3_GSMaP_v6_reanalysis", "code": "var dataset = ee.ImageCollection('JAXA/GPM_L3/GSMaP/v6/reanalysis')\n                  .filter(ee.Filter.date('2014-02-01', '2014-02-02'));\nvar precipitation = dataset.select('hourlyPrecipRate');\nvar precipitationVis = {\n  min: 0.0,\n  max: 30.0,\n  palette:\n      ['1621a2', 'ffffff', '03ffff', '13ff03', 'efff00', 'ffb103', 'ff2300'],\n};\nMap.setCenter(-90.7, 26.12, 2);\nMap.addLayer(precipitation, precipitationVis, 'Precipitation');\n", "environment": "[]"}, {"name": "JCU_Murray_GIC_global_tidal_wetland_change_2019", "code": "var dataset = ee.Image('JCU/Murray/GIC/global_tidal_wetland_change/2019');\n\nMap.setCenter(103.7, 1.3, 12);\nMap.setOptions('SATELLITE');\n\nvar plasma = [\n  '0d0887', '3d049b', '6903a5', '8d0fa1', 'ae2891', 'cb4679', 'df6363',\n  'f0844c', 'faa638', 'fbcc27', 'f0f921'\n];\nMap.addLayer(\n    dataset.select('twprobabilityStart'), {palette: plasma, min: 0, max: 100},\n    'twprobabilityStart', false, 1);\nMap.addLayer(\n    dataset.select('twprobabilityEnd'), {palette: plasma, min: 0, max: 100},\n    'twprobabilityEnd', false, 1);\n\nvar lossPalette = ['FE4A49'];\nvar gainPalette = ['2AB7CA'];\nMap.addLayer(\n    dataset.select('loss'), {palette: lossPalette, min: 1, max: 1},\n    'Tidal wetland loss', true, 1);\nMap.addLayer(\n    dataset.select('gain'), {palette: gainPalette, min: 1, max: 1},\n    'Tidal wetland gain', true, 1);\n\nvar viridis = ['440154', '414487', '2a788e', '22a884', '7ad151', 'fde725'];\nMap.addLayer(\n    dataset.select('lossYear'), {palette: viridis, min: 4, max: 19},\n    'Year of loss', false, 0.9);\nMap.addLayer(\n    dataset.select('gainYear'), {palette: viridis, min: 4, max: 19},\n    'Year of gain', false, 0.9);\n\n// ecosystem type\nvar classPalette = ['9e9d9d', 'ededed', 'FF9900', '009966', '960000', '006699'];\nvar classNames =\n    ['null', 'null', 'Tidal flat', 'Mangrove', 'null', 'Tidal marsh'];\nMap.addLayer(\n    dataset.select('lossType'), {palette: classPalette, min: 0, max: 5},\n    'Loss type', false, 0.9);\nMap.addLayer(\n    dataset.select('gainType'), {palette: classPalette, min: 0, max: 5},\n    'Gain type', false, 0.9);\n", "environment": "[]"}, {"name": "JRC_D5_EUCROPMAP_V1", "code": "var image = ee.Image('JRC/D5/EUCROPMAP/V1/2018');\nMap.addLayer(image, {}, 'EUCROPMAP 2018');\nMap.setCenter(10, 48, 4);\n", "environment": "[]"}, {"name": "JRC_GHSL_P2016_BUILT_LDSMT_GLOBE_V1", "code": "var dataset = ee.Image('JRC/GHSL/P2016/BUILT_LDSMT_GLOBE_V1');\nvar builtUpMultitemporal = dataset.select('built');\nvar visParams = {\n  min: 1.0,\n  max: 6.0,\n  palette: ['0c1d60', '000000', '448564', '70daa4', '83ffbf', 'ffffff'],\n};\nMap.setCenter(8.9957, 45.5718, 12);\nMap.addLayer(builtUpMultitemporal, visParams, 'Built-Up Multitemporal');\n", "environment": "[]"}, {"name": "JRC_GHSL_P2016_POP_GPW_GLOBE_V1", "code": "var dataset = ee.ImageCollection('JRC/GHSL/P2016/POP_GPW_GLOBE_V1')\n                  .filter(ee.Filter.date('2015-01-01', '2015-12-31'));\nvar populationCount = dataset.select('population_count');\nvar populationCountVis = {\n  min: 0.0,\n  max: 200.0,\n  palette: ['060606', '337663', '337663', 'ffffff'],\n};\nMap.setCenter(78.22, 22.59, 3);\nMap.addLayer(populationCount, populationCountVis, 'Population Count');\n", "environment": "[]"}, {"name": "JRC_GHSL_P2016_SMOD_POP_GLOBE_V1", "code": "var dataset = ee.ImageCollection('JRC/GHSL/P2016/SMOD_POP_GLOBE_V1')\n                  .filter(ee.Filter.date('2015-01-01', '2015-12-31'));\nvar degreeOfUrbanization = dataset.select('smod_code');\nvar visParams = {\n  min: 0.0,\n  max: 3.0,\n  palette: ['000000', '448564', '70daa4', 'ffffff'],\n};\nMap.setCenter(114.96, 31.13, 4);\nMap.addLayer(degreeOfUrbanization, visParams, 'Degree of Urbanization');\n", "environment": "[]"}, {"name": "JRC_GSW1_0_GlobalSurfaceWater", "code": "var dataset = ee.Image('JRC/GSW1_0/GlobalSurfaceWater');\nvar occurrence = dataset.select('occurrence');\nvar occurrenceVis = {\n  min: 0.0,\n  max: 100.0,\n  palette: ['ffffff', 'ffbbbb', '0000ff'],\n};\nMap.setCenter(59.414, 45.182, 6);\nMap.addLayer(occurrence, occurrenceVis, 'Occurrence');", "environment": "[]"}, {"name": "JRC_GSW1_0_Metadata", "code": "var dataset = ee.Image('JRC/GSW1_0/Metadata');\nvar detectionsObservations =\n    dataset.select(['detections', 'valid_obs', 'total_obs']);\nvar visParams = {\n  min: 100.0,\n  max: 900.0,\n};\nMap.setCenter(4.72, -2.48, 2);\nMap.addLayer(detectionsObservations, visParams, 'Detections/Observations');\n", "environment": "[]"}, {"name": "JRC_GSW1_0_MonthlyHistory", "code": "var dataset = ee.ImageCollection('JRC/GSW1_0/MonthlyHistory')\n                  .filter(ee.Filter.date('2015-01-01', '2015-12-31'));\nvar water = dataset.select('water');\nvar waterVis = {\n  min: 0.0,\n  max: 2.0,\n  palette: ['ffffff', 'fffcb8', '0905ff'],\n};\nMap.setCenter(-58.999, -3.373, 7);\nMap.addLayer(water, waterVis, 'Water');\n", "environment": "[]"}, {"name": "JRC_GSW1_0_MonthlyRecurrence", "code": "var dataset = ee.ImageCollection('JRC/GSW1_0/MonthlyRecurrence').first();\nvar monthlyRecurrence = dataset.select('monthly_recurrence');\nvar monthlyRecurrenceVis = {\n  min: 0.0,\n  max: 100.0,\n  palette: ['ffffff', 'ffbbbb', '0000ff'],\n};\nMap.setCenter(-51.482, -0.835, 9);\nMap.addLayer(monthlyRecurrence, monthlyRecurrenceVis, 'Monthly Recurrence');\n", "environment": "[]"}, {"name": "JRC_GSW1_0_YearlyHistory", "code": "var dataset = ee.ImageCollection('JRC/GSW1_0/YearlyHistory')\n                  .filter(ee.Filter.date('2015-01-01', '2015-12-31'));\nvar waterClass = dataset.select('waterClass');\nvar waterClassVis = {\n  min: 0.0,\n  max: 3.0,\n  palette: ['cccccc', 'ffffff', '99d9ea', '0000ff'],\n};\nMap.setCenter(59.414, 45.182, 7);\nMap.addLayer(waterClass, waterClassVis, 'Water Class');\n", "environment": "[]"}, {"name": "JRC_GSW1_1_GlobalSurfaceWater", "code": "var dataset = ee.Image('JRC/GSW1_1/GlobalSurfaceWater');\n\nvar visualization = {\n  bands: ['occurrence'],\n  min: 0.0,\n  max: 100.0,\n  palette: ['ffffff', 'ffbbbb', '0000ff']\n};\n\nMap.setCenter(59.414, 45.182, 6);\n\nMap.addLayer(dataset, visualization, 'Occurrence');\n", "environment": "[]"}, {"name": "JRC_GSW1_1_Metadata", "code": "var dataset = ee.Image('JRC/GSW1_1/Metadata');\n\nvar visualization = {\n  bands: ['detections', 'valid_obs', 'total_obs'],\n  min: 100.0,\n  max: 900.0,\n};\n\nMap.setCenter(71.72, 52.48, 0);\n\nMap.addLayer(dataset, visualization, 'Detections/Observations');\n", "environment": "[]"}, {"name": "JRC_GSW1_1_MonthlyHistory", "code": "var dataset = ee.ImageCollection('JRC/GSW1_1/MonthlyHistory');\n\nvar visualization = {\n  bands: ['water'],\n  min: 0.0,\n  max: 2.0,\n  palette: ['ffffff', 'fffcb8', '0905ff']\n};\n\nMap.setCenter(-121.234, 38.109, 7);\n\nMap.addLayer(dataset, visualization, 'Water');\n", "environment": "[]"}, {"name": "JRC_GSW1_1_MonthlyRecurrence", "code": "var dataset = ee.ImageCollection('JRC/GSW1_1/MonthlyRecurrence');\n\nvar visualization = {\n  bands: ['monthly_recurrence'],\n  min: 0.0,\n  max: 100.0,\n  palette: ['ffffff', 'ffbbbb', '0000ff']\n};\n\nMap.setCenter(-51.482, -0.835, 6);\n\nMap.addLayer(dataset, visualization, 'Monthly Recurrence');\n", "environment": "[]"}, {"name": "JRC_GSW1_1_YearlyHistory", "code": "var dataset = ee.ImageCollection('JRC/GSW1_1/YearlyHistory');\n\nvar visualization = {\n  bands: ['waterClass'],\n  min: 0.0,\n  max: 3.0,\n  palette: ['cccccc', 'ffffff', '99d9ea', '0000ff']\n};\n\nMap.setCenter(59.414, 45.182, 7);\n\nMap.addLayer(dataset, visualization, 'Water Class');\n", "environment": "[]"}, {"name": "JRC_GSW1_2_GlobalSurfaceWater", "code": "var dataset = ee.Image('JRC/GSW1_2/GlobalSurfaceWater');\n\nvar visualization = {\n  bands: ['occurrence'],\n  min: 0.0,\n  max: 100.0,\n  palette: ['ffffff', 'ffbbbb', '0000ff']\n};\n\nMap.setCenter(59.414, 45.182, 6);\n\nMap.addLayer(dataset, visualization, 'Occurrence');\n", "environment": "[]"}, {"name": "JRC_GSW1_2_Metadata", "code": "var dataset = ee.Image('JRC/GSW1_2/Metadata');\n\nvar visualization = {\n  bands: ['detections', 'valid_obs', 'total_obs'],\n  min: 100.0,\n  max: 900.0,\n};\n\nMap.setCenter(71.72, 52.48, 0);\n\nMap.addLayer(dataset, visualization, 'Detections/Observations');\n", "environment": "[]"}, {"name": "JRC_GSW1_2_MonthlyHistory", "code": "var dataset = ee.ImageCollection('JRC/GSW1_2/MonthlyHistory');\n\nvar visualization = {\n  bands: ['water'],\n  min: 0.0,\n  max: 2.0,\n  palette: ['ffffff', 'fffcb8', '0905ff']\n};\n\nMap.setCenter(-121.234, 38.109, 7);\n\nMap.addLayer(dataset, visualization, 'Water');\n", "environment": "[]"}, {"name": "JRC_GSW1_2_MonthlyRecurrence", "code": "var dataset = ee.ImageCollection('JRC/GSW1_2/MonthlyRecurrence');\n\nvar visualization = {\n  bands: ['monthly_recurrence'],\n  min: 0.0,\n  max: 100.0,\n  palette: ['ffffff', 'ffbbbb', '0000ff']\n};\n\nMap.setCenter(-51.482, -0.835, 6);\n\nMap.addLayer(dataset, visualization, 'Monthly Recurrence');\n", "environment": "[]"}, {"name": "JRC_GSW1_2_YearlyHistory", "code": "var dataset = ee.ImageCollection('JRC/GSW1_2/YearlyHistory');\n\nvar visualization = {\n  bands: ['waterClass'],\n  min: 0.0,\n  max: 3.0,\n  palette: ['cccccc', 'ffffff', '99d9ea', '0000ff']\n};\n\nMap.setCenter(59.414, 45.182, 7);\n\nMap.addLayer(dataset, visualization, 'Water Class');\n", "environment": "[]"}, {"name": "JRC_GSW1_3_GlobalSurfaceWater", "code": "var dataset = ee.Image('JRC/GSW1_3/GlobalSurfaceWater');\n\nvar visualization = {\n  bands: ['occurrence'],\n  min: 0.0,\n  max: 100.0,\n  palette: ['ffffff', 'ffbbbb', '0000ff']\n};\n\nMap.setCenter(59.414, 45.182, 6);\n\nMap.addLayer(dataset, visualization, 'Occurrence');\n", "environment": "[]"}, {"name": "JRC_GSW1_3_Metadata", "code": "var dataset = ee.Image('JRC/GSW1_3/Metadata');\n\nvar visualization = {\n  bands: ['detections', 'valid_obs', 'total_obs'],\n  min: 100.0,\n  max: 900.0,\n};\n\nMap.setCenter(71.72, 52.48, 0);\n\nMap.addLayer(dataset, visualization, 'Detections/Observations');\n", "environment": "[]"}, {"name": "JRC_GSW1_3_MonthlyHistory", "code": "var dataset = ee.ImageCollection('JRC/GSW1_3/MonthlyHistory');\n\nvar visualization = {\n  bands: ['water'],\n  min: 0.0,\n  max: 2.0,\n  palette: ['ffffff', 'fffcb8', '0905ff']\n};\n\nMap.setCenter(-121.234, 38.109, 7);\n\nMap.addLayer(dataset, visualization, 'Water');\n", "environment": "[]"}, {"name": "JRC_GSW1_3_MonthlyRecurrence", "code": "var dataset = ee.ImageCollection('JRC/GSW1_3/MonthlyRecurrence');\n\nvar visualization = {\n  bands: ['monthly_recurrence'],\n  min: 0.0,\n  max: 100.0,\n  palette: ['ffffff', 'ffbbbb', '0000ff']\n};\n\nMap.setCenter(-51.482, -0.835, 6);\n\nMap.addLayer(dataset, visualization, 'Monthly Recurrence');\n", "environment": "[]"}, {"name": "JRC_GSW1_3_YearlyHistory", "code": "var dataset = ee.ImageCollection('JRC/GSW1_3/YearlyHistory');\n\nvar visualization = {\n  bands: ['waterClass'],\n  min: 0.0,\n  max: 3.0,\n  palette: ['cccccc', 'ffffff', '99d9ea', '0000ff']\n};\n\nMap.setCenter(59.414, 45.182, 7);\n\nMap.addLayer(dataset, visualization, 'Water Class');\n", "environment": "[]"}, {"name": "JRC_GWIS_GlobFire_v2_DailyPerimeters", "code": "// Folder name for a series of tables.\nvar folder = 'JRC/GWIS/GlobFire/v2/DailyPerimeters';\n\n// List available tables using ee.data.listAssets with asynchronous callback.\nfunction printAssetList(listAssetsOutput) {\n  print('Asset list:', listAssetsOutput['assets']);\n}\nee.data.listAssets(folder, {}, printAssetList);\n\n// Define a table name (table id) identified from the list of available tables.\nvar tableName = 'JRC/GWIS/GlobFire/v2/DailyPerimeters/2020';\n\nvar computeArea = function (f) {\n  return f.set({'area': f.area()});\n}\n// Import a selected table as a FeatureCollection.\nvar features = ee.FeatureCollection(tableName).map(computeArea);\n\n// Visualization parameters for linear fire area gradient.\nvar visParams = {\n  palette: ['f5ff64', 'b5ffb4', 'beeaff', 'ffc0e8', '8e8dff', 'adadad'],\n  min: 0.0,\n  max: 600000000.0,\n  opacity: 0.8,\n};\n\n// Paint fire perimeters to an image using computed fire area as the value property.\nvar image = ee.Image().float().paint(features, 'area')\n\n// Display the image to the map (include features for exploring with Inspector).\nMap.addLayer(image, visParams, 'GlobFire 2020');\nMap.addLayer(features, null, 'For Inspector', false);\nMap.setCenter(-121.23, 39.7, 12);\n", "environment": "[]"}, {"name": "JRC_GWIS_GlobFire_v2_FinalPerimeters", "code": "var dataset = ee.FeatureCollection('JRC/GWIS/GlobFire/v2/FinalPerimeters');\nvar visParams = {\n  palette: ['f5ff64', 'b5ffb4', 'beeaff', 'ffc0e8', '8e8dff', 'adadad'],\n  min: 0.0,\n  max: 600000000.0,\n  opacity: 0.8,\n};\nvar image = ee.Image().float().paint(dataset, 'area');\nMap.addLayer(image, visParams, 'GlobFire Final');\nMap.addLayer(dataset, null, 'for Inspector', false);\nMap.setCenter(-122.121, 38.56, 12)\n", "environment": "[]"}, {"name": "JRC_LUCAS_HARMO_COPERNICUS_POLYGONS_V1_2018", "code": "var dataset = ee.FeatureCollection(\n    'JRC/LUCAS_HARMO/COPERNICUS_POLYGONS/V1/2018');\n\nvar visParams = {\n  min: 35,\n  max: 60,\n};\n\n// plotting the GPS latitude per polygon\nvar dataset2 = dataset.map(function (f) {\n  return ee.Feature(f.buffer(5000));\n});\n\nvar image = ee.Image().float().paint(dataset2, 'gps_lat').randomVisualizer();\n\nMap.addLayer(ee.Image(1), {min:0, max:1}, 'background');\nMap.addLayer(image, visParams, 'LUCAS Polygons');\nMap.addLayer(dataset, null, 'for Inspector', false);\n\nMap.setCenter(19.514, 51.82, 8);\n", "environment": "[]"}, {"name": "JRC_LUCAS_HARMO_THLOC_V1", "code": "var dataset = ee.FeatureCollection(\"JRC/LUCAS_HARMO/THLOC/V1\");\n\n// For the Inspector\nMap.addLayer(dataset, {}, \"LUCAS Points (data)\", false);\n\ndataset = dataset.style({\n  color: \"489734\",\n  pointSize: 3,\n});\n\nMap.setCenter(-3.8233, 40.609, 10);\n\nMap.addLayer(dataset, {}, \"LUCAS Points (styled green)\");\n", "environment": "[]"}, {"name": "JRC_LUCAS_HARMO_THLOC_V1_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('JRC/LUCAS_HARMO/THLOC/V1_FeatureView');\n\nvar visParams = {\n  pointSize: 8,\n  color: '808080',\n  pointFillColor: {\n    property: 'inspire_plcc4',\n    mode: 'linear',\n    palette: ['ffffcc','c2e699','78c679','238443'],\n    min: 0,\n    max: 100\n  }\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('LUCAS herbaceous cover');\n\nMap.setCenter(-3.8233, 40.609, 10);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "KNTU_LiDARLab_IranLandCover_V1", "code": "var dataset = ee.Image(\"KNTU/LiDARLab/IranLandCover/V1\");\n\nvar visualization = {\n  bands: ['classification']\n};\n\nMap.setCenter(54.0, 33.0, 5);\n\nMap.addLayer(dataset, visualization, \"Classification\");\n", "environment": "[]"}, {"name": "LANDFIRE_Fire_FRG_v1_2_0", "code": "var dataset = ee.ImageCollection('LANDFIRE/Fire/FRG/v1_2_0');\n\nvar visualization = {\n  bands: ['FRG'],\n};\n\nMap.setCenter(-121.671, 40.699, 5);\n\nMap.addLayer(dataset, visualization, 'FRG');\n", "environment": "[]"}, {"name": "LANDFIRE_Fire_MFRI_v1_2_0", "code": "var dataset = ee.ImageCollection('LANDFIRE/Fire/MFRI/v1_2_0');\n\nvar visualization = {\n  bands: ['MFRI'],\n};\n\nMap.setCenter(-121.671, 40.699, 5);\n\nMap.addLayer(dataset, visualization, 'MFRI');\n", "environment": "[]"}, {"name": "LANDFIRE_Fire_PLS_v1_2_0", "code": "var dataset = ee.ImageCollection('LANDFIRE/Fire/PLS/v1_2_0');\n\nvar visualization = {\n  bands: ['PLS'],\n};\n\nMap.setCenter(-121.671, 40.699, 5);\n\nMap.addLayer(dataset, visualization, 'PLS');\n", "environment": "[]"}, {"name": "LANDFIRE_Fire_PMS_v1_2_0", "code": "var dataset = ee.ImageCollection('LANDFIRE/Fire/PMS/v1_2_0');\n\nvar visualization = {\n  bands: ['PMS'],\n};\n\nMap.setCenter(-121.671, 40.699, 5);\n\nMap.addLayer(dataset, visualization, 'PMS');\n", "environment": "[]"}, {"name": "LANDFIRE_Fire_PRS_v1_2_0", "code": "var dataset = ee.ImageCollection('LANDFIRE/Fire/PRS/v1_2_0');\n\nvar visualization = {\n  bands: ['PRS'],\n};\n\nMap.setCenter(-121.671, 40.699, 5);\n\nMap.addLayer(dataset, visualization, 'PRS');\n", "environment": "[]"}, {"name": "LANDFIRE_Fire_SClass_v1_4_0", "code": "var dataset = ee.ImageCollection('LANDFIRE/Fire/SClass/v1_4_0');\n\nvar visualization = {\n  bands: ['SClass'],\n};\n\nMap.setCenter(-121.671, 40.699, 5);\n\nMap.addLayer(dataset, visualization, 'SClass');\n", "environment": "[]"}, {"name": "LANDFIRE_Fire_VCC_v1_4_0", "code": "var dataset = ee.ImageCollection('LANDFIRE/Fire/VCC/v1_4_0');\n\nvar visualization = {\n  bands: ['VCC'],\n};\n\nMap.setCenter(-121.671, 40.699, 5);\n\nMap.addLayer(dataset, visualization, 'VCC');\n", "environment": "[]"}, {"name": "LANDFIRE_Fire_VDep_v1_4_0", "code": "var dataset = ee.ImageCollection('LANDFIRE/Fire/VDep/v1_4_0');\n\nvar visualization = {\n  bands: ['VDep'],\n};\n\nMap.setCenter(-121.671, 40.699, 5);\n\nMap.addLayer(dataset, visualization, 'VDep');\n", "environment": "[]"}, {"name": "LANDFIRE_Vegetation_BPS_v1_4_0", "code": "var dataset = ee.ImageCollection('LANDFIRE/Vegetation/BPS/v1_4_0');\n\nvar visualization = {\n  bands: ['BPS'],\n};\n\nMap.setCenter(-121.671, 40.699, 5);\n\nMap.addLayer(dataset, visualization, 'BPS');\n", "environment": "[]"}, {"name": "LANDFIRE_Vegetation_ESP_v1_2_0_AK", "code": "var dataset = ee.Image('LANDFIRE/Vegetation/ESP/v1_2_0/AK');\n\nvar visualization = {\n  bands: ['ESP'],\n};\n\nMap.setCenter(-151.011, 63.427, 8);\n\nMap.addLayer(dataset, visualization, 'ESP');\n", "environment": "[]"}, {"name": "LANDFIRE_Vegetation_ESP_v1_2_0_CONUS", "code": "var dataset = ee.Image('LANDFIRE/Vegetation/ESP/v1_2_0/CONUS');\n\nvar visualization = {\n  bands: ['ESP'],\n};\n\nMap.setCenter(-121.671, 40.699, 5);\n\nMap.addLayer(dataset, visualization, 'ESP');\n", "environment": "[]"}, {"name": "LANDFIRE_Vegetation_ESP_v1_2_0_HI", "code": "var dataset = ee.Image('LANDFIRE/Vegetation/ESP/v1_2_0/HI');\n\nvar visualization = {\n  bands: ['ESP'],\n};\n\nMap.setCenter(-155.3, 19.627, 8);\n\nMap.addLayer(dataset, visualization, 'ESP');\n", "environment": "[]"}, {"name": "LANDFIRE_Vegetation_EVC_v1_4_0", "code": "var dataset = ee.ImageCollection('LANDFIRE/Vegetation/EVC/v1_4_0');\n\nvar visualization = {\n  bands: ['EVC'],\n};\n\nMap.setCenter(-121.671, 40.699, 5);\n\nMap.addLayer(dataset, visualization, 'EVC');\n", "environment": "[]"}, {"name": "LANDFIRE_Vegetation_EVH_v1_4_0", "code": "var dataset = ee.ImageCollection('LANDFIRE/Vegetation/EVH/v1_4_0');\n\nvar visualization = {\n  bands: ['EVH'],\n};\n\nMap.setCenter(-121.671, 40.699, 5);\n\nMap.addLayer(dataset, visualization, 'EVH');\n", "environment": "[]"}, {"name": "LANDFIRE_Vegetation_EVT_v1_4_0", "code": "var dataset = ee.ImageCollection('LANDFIRE/Vegetation/EVT/v1_4_0');\n\nvar visualization = {\n  bands: ['EVT'],\n};\n\nMap.setCenter(-121.671, 40.699, 5);\n\nMap.addLayer(dataset, visualization, 'EVT');\n", "environment": "[]"}, {"name": "LANDSAT_GLS1975", "code": "var dataset = ee.ImageCollection('LANDSAT/GLS1975');\nvar falseColor = dataset.select(['30', '20', '10']);\nvar falseColorVis = {\n  gamma: 1.6,\n};\nMap.setCenter(44.517, 25.998, 5);\nMap.addLayer(falseColor, falseColorVis, 'False Color');", "environment": "[]"}, {"name": "LANDSAT_GLS1975_MOSAIC", "code": "var dataset = ee.ImageCollection('LANDSAT/GLS1975_MOSAIC');\nvar falseColor = dataset.select(['30', '20', '10']);\nvar falseColorVis = {\n  gamma: 1.6,\n};\nMap.setCenter(44.517, 25.998, 5);\nMap.addLayer(falseColor, falseColorVis, 'False Color');\n", "environment": "[]"}, {"name": "LANDSAT_GLS2005", "code": "var dataset = ee.ImageCollection('LANDSAT/GLS2005');\nvar trueColor321 = dataset.select(['30', '20', '10']);\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, {}, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_GLS2005_L5", "code": "var dataset = ee.ImageCollection('LANDSAT/GLS2005_L5');\nvar trueColor321 = dataset.select(['30', '20', '10']);\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, {}, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_GLS2005_L7", "code": "var dataset = ee.ImageCollection('LANDSAT/GLS2005_L7');\nvar trueColor321 = dataset.select(['30', '20', '10']);\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, {}, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar trueColor432 = dataset.select(['B4', 'B3', 'B2']);\nvar trueColor432Vis = {\n  min: 0.0,\n  max: 30000.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor432, trueColor432Vis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_32DAY_BAI", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_32DAY_BAI')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar scaled = dataset.select('BAI');\nvar scaledVis = {\n  min: 0.0,\n  max: 100.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(scaled, scaledVis, 'Scaled');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_32DAY_EVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_32DAY_EVI')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar colorized = dataset.select('EVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_32DAY_NBRT", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_32DAY_NBRT')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar colorized = dataset.select('NBRT');\nvar colorizedVis = {\n  min: 0.9,\n  max: 1.0,\n  palette: ['000000', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_32DAY_NDSI", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_32DAY_NDSI')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar colorized = dataset.select('NDSI');\nvar colorizedVis = {\n  palette: ['000088', '0000FF', '8888FF', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_32DAY_NDVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_32DAY_NDVI')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar colorized = dataset.select('NDVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_32DAY_NDWI", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_32DAY_NDWI')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar colorized = dataset.select('NDWI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_32DAY_RAW", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_32DAY_RAW')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar visParams = {\n  min: 0,\n  max: 20000,\n  gamma: 1.2,\n  bands: ['B4', 'B3', 'B2'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(dataset, visParams, 'LANDSAT/LC08/C01/T1_32DAY_RAW');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_32DAY_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_32DAY_TOA')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar trueColor = dataset.select(['B4', 'B3', 'B2']);\nvar trueColorVis = {\n  min: 0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor, trueColorVis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_8DAY_BAI", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_8DAY_BAI')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar scaled = dataset.select('BAI');\nvar scaledVis = {\n  min: 0.0,\n  max: 100.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(scaled, scaledVis, 'Scaled');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_8DAY_EVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_8DAY_EVI')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar colorized = dataset.select('EVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_8DAY_NBRT", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_8DAY_NBRT')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar colorized = dataset.select('NBRT');\nvar colorizedVis = {\n  min: 0.9,\n  max: 1.0,\n  palette: ['000000', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_8DAY_NDSI", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_8DAY_NDSI')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar colorized = dataset.select('NDSI');\nvar colorizedVis = {\n  palette: ['000088', '0000FF', '8888FF', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_8DAY_NDVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_8DAY_NDVI')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar colorized = dataset.select('NDVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_8DAY_NDWI", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_8DAY_NDWI')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar colorized = dataset.select('NDWI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_8DAY_RAW", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_8DAY_RAW')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar visParams = {\n  min: 0,\n  max: 20000,\n  gamma: 1.2,\n  bands: ['B4', 'B3', 'B2'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(dataset, visParams, 'LANDSAT/LC08/C01/T1_8DAY_RAW');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_8DAY_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_8DAY_TOA')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar trueColor = dataset.select(['B4', 'B3', 'B2']);\nvar trueColorVis = {\n  min: 0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor, trueColorVis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_ANNUAL_BAI", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_ANNUAL_BAI')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar scaled = dataset.select('BAI');\nvar scaledVis = {\n  min: 0.0,\n  max: 100.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(scaled, scaledVis, 'Scaled');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_ANNUAL_EVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_ANNUAL_EVI')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar colorized = dataset.select('EVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_ANNUAL_GREENEST_TOA", "code": "// Import the dataset, filter to 2017, get the image.\nvar dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_ANNUAL_GREENEST_TOA')\n                  .filterDate('2017-01-01', '2017-12-31')\n                  .first();\n\n// Get the greenness band.\nvar greenness = dataset.select('greenness');\n\n// Get bands for true color RGB display.\nvar trueColor = dataset.select(['B4', 'B3', 'B2']);\n\n// Define a mask for low greenness, make low greenness partially transparent.\nvar mask = dataset.select('greenness').gt(0.1).remap([0, 1], [0.5, 1]);\n\n// Visualization parameters for greenness display.\nvar greennessVis = {\n  min: 0.1,\n  max: 0.85,\n  palette: ['fffdcd', 'e1cd73', 'aaac20', '5f920c', '187328', '144b2a', '172313']\n};\n\n// Visualization parameters for true color display.\nvar trueColorVis = {\n  min: 0.0,\n  max: 0.4,\n  gamma: 1.2,\n};\n\n// Display the layers on the map with mask applied.\nMap.setCenter(43.4, 40.0, 7);\nMap.addLayer(trueColor.updateMask(mask), trueColorVis, 'True Color (432)', false);\nMap.addLayer(greenness.updateMask(mask), greennessVis, 'Greenness');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_ANNUAL_NBRT", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_ANNUAL_NBRT')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar colorized = dataset.select('NBRT');\nvar colorizedVis = {\n  min: 0.9,\n  max: 1.0,\n  palette: ['000000', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_ANNUAL_NDSI", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_ANNUAL_NDSI')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar colorized = dataset.select('NDSI');\nvar colorizedVis = {\n  palette: ['000088', '0000FF', '8888FF', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_ANNUAL_NDVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_ANNUAL_NDVI')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar colorized = dataset.select('NDVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_ANNUAL_NDWI", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_ANNUAL_NDWI')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar colorized = dataset.select('NDWI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_ANNUAL_RAW", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_ANNUAL_RAW')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar visParams = {\n  min: 0,\n  max: 20000,\n  gamma: 1.2,\n  bands: ['B4', 'B3', 'B2'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(dataset, visParams, 'LANDSAT/LC08/C01/T1_ANNUAL_RAW');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_ANNUAL_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_ANNUAL_TOA')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar trueColor = dataset.select(['B4', 'B3', 'B2']);\nvar trueColorVis = {\n  min: 0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor, trueColorVis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_RT", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_RT')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar trueColor432 = dataset.select(['B4', 'B3', 'B2']);\nvar trueColor432Vis = {\n  min: 0.0,\n  max: 30000.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor432, trueColor432Vis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_RT_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_RT_TOA')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar trueColor432 = dataset.select(['B4', 'B3', 'B2']);\nvar trueColor432Vis = {\n  min: 0.0,\n  max: 0.4,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor432, trueColor432Vis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_SR", "code": "/**\n * Function to mask clouds based on the pixel_qa band of Landsat 8 SR data.\n * @param {ee.Image} image input Landsat 8 SR image\n * @return {ee.Image} cloudmasked Landsat 8 image\n */\nfunction maskL8sr(image) {\n  // Bits 3 and 5 are cloud shadow and cloud, respectively.\n  var cloudShadowBitMask = (1 \u003c\u003c 3);\n  var cloudsBitMask = (1 \u003c\u003c 5);\n  // Get the pixel QA band.\n  var qa = image.select('pixel_qa');\n  // Both flags should be set to zero, indicating clear conditions.\n  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)\n                 .and(qa.bitwiseAnd(cloudsBitMask).eq(0));\n  return image.updateMask(mask);\n}\n\nvar dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')\n                  .filterDate('2016-01-01', '2016-12-31')\n                  .map(maskL8sr);\n\nvar visParams = {\n  bands: ['B4', 'B3', 'B2'],\n  min: 0,\n  max: 3000,\n  gamma: 1.4,\n};\nMap.setCenter(114.0079, -26.0765, 9);\nMap.addLayer(dataset.median(), visParams);\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T1_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T1_TOA')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar trueColor432 = dataset.select(['B4', 'B3', 'B2']);\nvar trueColor432Vis = {\n  min: 0.0,\n  max: 0.4,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor432, trueColor432Vis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T2", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T2')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar trueColor432 = dataset.select(['B4', 'B3', 'B2']);\nvar trueColor432Vis = {\n  min: 0.0,\n  max: 30000.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor432, trueColor432Vis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T2_SR", "code": "/**\n * Function to mask clouds based on the pixel_qa band of Landsat 8 SR data.\n * @param {ee.Image} image Input Landsat 8 SR image\n * @return {ee.Image} Cloudmasked Landsat 8 image\n */\nfunction maskL8sr(image) {\n  // Bits 3 and 5 are cloud shadow and cloud, respectively.\n  var cloudShadowBitMask = (1 \u003c\u003c 3);\n  var cloudsBitMask = (1 \u003c\u003c 5);\n  // Get the pixel QA band.\n  var qa = image.select('pixel_qa');\n  // Both flags should be set to zero, indicating clear conditions.\n  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)\n                 .and(qa.bitwiseAnd(cloudsBitMask).eq(0));\n  return image.updateMask(mask);\n}\n\nvar dataset = ee.ImageCollection('LANDSAT/LC08/C01/T2_SR')\n                  .filterDate('2015-01-01', '2017-12-31')\n                  .map(maskL8sr);\n\nvar visParams = {\n  bands: ['B4', 'B3', 'B2'],\n  min: 0,\n  max: 3000,\n  gamma: 1.4,\n};\nMap.setCenter(-52.4048, -1.17, 8);\nMap.addLayer(dataset.median(), visParams);\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C01_T2_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C01/T2_TOA')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar trueColor432 = dataset.select(['B4', 'B3', 'B2']);\nvar trueColor432Vis = {\n  min: 0.0,\n  max: 0.4,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor432, trueColor432Vis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C02_T1", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C02/T1')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar trueColor432 = dataset.select(['B4', 'B3', 'B2']);\nvar trueColor432Vis = {\n  min: 0.0,\n  max: 30000.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor432, trueColor432Vis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C02_T1_L2", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')\n    .filterDate('2021-05-01', '2021-06-01');\n\n// Applies scaling factors.\nfunction applyScaleFactors(image) {\n  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);\n  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);\n  return image.addBands(opticalBands, null, true)\n              .addBands(thermalBands, null, true);\n}\n\ndataset = dataset.map(applyScaleFactors);\n\nvar visualization = {\n  bands: ['SR_B4', 'SR_B3', 'SR_B2'],\n  min: 0.0,\n  max: 0.3,\n};\n\nMap.setCenter(-114.2579, 38.9275, 8);\n\nMap.addLayer(dataset, visualization, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C02_T1_RT", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C02/T1_RT')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar trueColor432 = dataset.select(['B4', 'B3', 'B2']);\nvar trueColor432Vis = {\n  min: 0.0,\n  max: 30000.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor432, trueColor432Vis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C02_T1_RT_TOA", "code": "var dataset = ee.ImageCollection(\"LANDSAT/LC08/C02/T1_RT_TOA\")\n    .filterDate('2017-01-01', '2017-12-31');\nvar trueColor432 = dataset.select(['B4', 'B3', 'B2']);\nvar trueColor432Vis = {\n  min: 0.0,\n  max: 0.4,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor432, trueColor432Vis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C02_T1_TOA", "code": "var dataset = ee.ImageCollection(\"LANDSAT/LC08/C02/T1_TOA\")\n  .filterDate('2017-01-01', '2017-12-31');\nvar trueColor432 = dataset.select(['B4', 'B3', 'B2']);\nvar trueColor432Vis = {\n  min: 0.0,\n  max: 0.4,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor432, trueColor432Vis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C02_T2", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C02/T2')\n                  .filterDate('2017-01-01', '2017-12-31');\nvar trueColor432 = dataset.select(['B4', 'B3', 'B2']);\nvar trueColor432Vis = {\n  min: 0.0,\n  max: 30000.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor432, trueColor432Vis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C02_T2_L2", "code": "var dataset = ee.ImageCollection('LANDSAT/LC08/C02/T2_L2')\n    .filterDate('2021-05-01', '2021-06-01');\n\n// Applies scaling factors.\nfunction applyScaleFactors(image) {\n  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);\n  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);\n  return image.addBands(opticalBands, null, true)\n              .addBands(thermalBands, null, true);\n}\n\ndataset = dataset.map(applyScaleFactors);\n\nvar visualization = {\n  bands: ['SR_B4', 'SR_B3', 'SR_B2'],\n  min: 0.0,\n  max: 0.3,\n};\n\nMap.setCenter(-83, 24, 8);\n\nMap.addLayer(dataset, visualization, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LC08_C02_T2_TOA", "code": "var dataset = ee.ImageCollection(\"LANDSAT/LC08/C02/T2_TOA\")\n    .filterDate('2017-01-01', '2017-12-31');\nvar trueColor432 = dataset.select(['B4', 'B3', 'B2']);\nvar trueColor432Vis = {\n  min: 0.0,\n  max: 0.4,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor432, trueColor432Vis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LC09_C02_T1", "code": "var dataset = ee.ImageCollection('LANDSAT/LC09/C02/T1')\n                  .filterDate('2022-01-01', '2022-02-01');\nvar trueColor432 = dataset.select(['B4', 'B3', 'B2']);\nvar trueColor432Vis = {\n  min: 0.0,\n  max: 30000.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor432, trueColor432Vis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LC09_C02_T1_L2", "code": "var dataset = ee.ImageCollection('LANDSAT/LC09/C02/T1_L2')\n    .filterDate('2022-01-01', '2022-02-01');\n\n// Applies scaling factors.\nfunction applyScaleFactors(image) {\n  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);\n  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);\n  return image.addBands(opticalBands, null, true)\n              .addBands(thermalBands, null, true);\n}\n\ndataset = dataset.map(applyScaleFactors);\n\nvar visualization = {\n  bands: ['SR_B4', 'SR_B3', 'SR_B2'],\n  min: 0.0,\n  max: 0.3,\n};\n\nMap.setCenter(-114.2579, 38.9275, 8);\n\nMap.addLayer(dataset, visualization, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LC09_C02_T1_TOA", "code": "var dataset = ee.ImageCollection(\"LANDSAT/LC09/C02/T1_TOA\")\n  .filterDate('2022-01-01', '2022-02-01');\nvar trueColor432 = dataset.select(['B4', 'B3', 'B2']);\nvar trueColor432Vis = {\n  min: 0.0,\n  max: 0.4,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor432, trueColor432Vis, 'True Color (432)')\n", "environment": "[]"}, {"name": "LANDSAT_LC09_C02_T2", "code": "var dataset = ee.ImageCollection('LANDSAT/LC09/C02/T2')\n                  .filterDate('2022-01-01', '2022-02-01');\nvar trueColor432 = dataset.select(['B4', 'B3', 'B2']);\nvar trueColor432Vis = {\n  min: 0.0,\n  max: 30000.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor432, trueColor432Vis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LC09_C02_T2_L2", "code": "var dataset = ee.ImageCollection('LANDSAT/LC09/C02/T2_L2')\n    .filterDate('2022-01-01', '2022-02-01');\n\n// Applies scaling factors.\nfunction applyScaleFactors(image) {\n  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);\n  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);\n  return image.addBands(opticalBands, null, true)\n              .addBands(thermalBands, null, true);\n}\n\ndataset = dataset.map(applyScaleFactors);\n\nvar visualization = {\n  bands: ['SR_B4', 'SR_B3', 'SR_B2'],\n  min: 0.0,\n  max: 0.3,\n};\n\nMap.setCenter(-83, 24, 8);\n\nMap.addLayer(dataset, visualization, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LC09_C02_T2_TOA", "code": "var dataset = ee.ImageCollection(\"LANDSAT/LC09/C02/T2_TOA\")\n      .filterDate('2022-01-01', '2022-02-01');\nvar trueColor432 = dataset.select(['B4', 'B3', 'B2']);\nvar trueColor432Vis = {\n  min: 0.0,\n  max: 0.4,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor432, trueColor432Vis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LC8_L1T_ANNUAL_GREENEST_TOA", "code": "// NOTE: This ImageCollection is deprecated.\n\nvar dataset = ee.ImageCollection(\"LANDSAT/LC8_L1T_ANNUAL_GREENEST_TOA\");\n\nMap.setCenter( -119.0446, 35.1195, 12);\nMap.addLayer(dataset.select(\"greenness\"), null, \"greenness\");\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_32DAY_BAI", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_32DAY_BAI')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar scaled = dataset.select('BAI');\nvar scaledVis = {\n  min: 0.0,\n  max: 100.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(scaled, scaledVis, 'Scaled');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_32DAY_EVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_32DAY_EVI')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar colorized = dataset.select('EVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_32DAY_NBRT", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_32DAY_NBRT')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar colorized = dataset.select('NBRT');\nvar colorizedVis = {\n  min: 0.9,\n  max: 1.0,\n  palette: ['000000', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_32DAY_NDSI", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_32DAY_NDSI')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar colorized = dataset.select('NDSI');\nvar colorizedVis = {\n  palette: ['000088', '0000FF', '8888FF', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_32DAY_NDVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_32DAY_NDVI')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar colorized = dataset.select('NDVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_32DAY_NDWI", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_32DAY_NDWI')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar colorized = dataset.select('NDWI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_32DAY_RAW", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_32DAY_RAW')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar visParams = {\n  min: 0,\n  max: 255,\n  gamma: 1.2,\n  bands: ['B3', 'B2', 'B1'],\n};\nMap.setCenter(24.236, -28.941, 6);\nMap.addLayer(dataset, visParams, 'LANDSAT/LE07/C01/T1_32DAY_RAW');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_32DAY_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_32DAY_TOA')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar trueColor = dataset.select(['B3', 'B2', 'B1']);\nvar trueColorVis = {\n  min: 0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(-3.7408, 40.4386, 8);\nMap.addLayer(trueColor, trueColorVis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_8DAY_BAI", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_BAI')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar scaled = dataset.select('BAI');\nvar scaledVis = {\n  min: 0.0,\n  max: 100.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(scaled, scaledVis, 'Scaled');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_8DAY_EVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar colorized = dataset.select('EVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_8DAY_NBRT", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_NBRT')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar colorized = dataset.select('NBRT');\nvar colorizedVis = {\n  min: 0.9,\n  max: 1.0,\n  palette: ['000000', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_8DAY_NDSI", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_NDSI')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar colorized = dataset.select('NDSI');\nvar colorizedVis = {\n  palette: ['000088', '0000FF', '8888FF', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_8DAY_NDVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_NDVI')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar colorized = dataset.select('NDVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_8DAY_NDWI", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_NDWI')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar colorized = dataset.select('NDWI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_8DAY_RAW", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_RAW')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar visParams = {\n  min: 0,\n  max: 255,\n  gamma: 1.2,\n  bands: ['B3', 'B2', 'B1'],\n};\nMap.setCenter(24.236, -28.941, 6);\nMap.addLayer(dataset, visParams, 'LANDSAT/LE07/C01/T1_8DAY_RAW');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_8DAY_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_TOA')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar trueColor = dataset.select(['B3', 'B2', 'B1']);\nvar trueColorVis = {\n  min: 0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(-3.7408, 40.4386, 8);\nMap.addLayer(trueColor, trueColorVis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_ANNUAL_BAI", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_ANNUAL_BAI')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar scaled = dataset.select('BAI');\nvar scaledVis = {\n  min: 0.0,\n  max: 100.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(scaled, scaledVis, 'Scaled');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_ANNUAL_EVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_ANNUAL_EVI')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar colorized = dataset.select('EVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_ANNUAL_GREENEST_TOA", "code": "// Import the dataset, filter to 2002, get the image.\nvar dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_ANNUAL_GREENEST_TOA')\n                  .filterDate('2002-01-01', '2002-12-31')\n                  .first();\n\n// Get the greenness band.\nvar greenness = dataset.select('greenness');\n\n// Get bands for true color RGB display.\nvar trueColor = dataset.select(['B3', 'B2', 'B1']);\n\n// Define a mask for low greenness, make low greenness partially transparent.\nvar mask = dataset.select('greenness').gt(0.1).remap([0, 1], [0.5, 1]);\n\n// Visualization parameters for greenness display.\nvar greennessVis = {\n  min: 0.1,\n  max: 0.85,\n  palette: ['fffdcd', 'e1cd73', 'aaac20', '5f920c', '187328', '144b2a', '172313']\n};\n\n// Visualization parameters for true color display.\nvar trueColorVis = {\n  min: 0.0,\n  max: 0.4,\n  gamma: 1.2,\n};\n\n// Display the layers on the map with mask applied.\nMap.setCenter(43.4, 40.0, 7);\nMap.addLayer(trueColor.updateMask(mask), trueColorVis, 'True Color (432)', false);\nMap.addLayer(greenness.updateMask(mask), greennessVis, 'Greenness');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_ANNUAL_NBRT", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_ANNUAL_NBRT')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar colorized = dataset.select('NBRT');\nvar colorizedVis = {\n  min: 0.9,\n  max: 1.0,\n  palette: ['000000', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_ANNUAL_NDSI", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_ANNUAL_NDSI')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar colorized = dataset.select('NDSI');\nvar colorizedVis = {\n  palette: ['000088', '0000FF', '8888FF', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_ANNUAL_NDVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_ANNUAL_NDVI')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar colorized = dataset.select('NDVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_ANNUAL_NDWI", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_ANNUAL_NDWI')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar colorized = dataset.select('NDWI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_ANNUAL_RAW", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_ANNUAL_RAW')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar visParams = {\n  min: 0,\n  max: 255,\n  gamma: 1.2,\n  bands: ['B3', 'B2', 'B1'],\n};\nMap.setCenter(24.236, -28.941, 6);\nMap.addLayer(dataset, visParams, 'LANDSAT/LE07/C01/T1_ANNUAL_RAW');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_ANNUAL_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_ANNUAL_TOA')\n                  .filterDate('1999-01-01', '2006-12-31');\nvar trueColor = dataset.select(['B3', 'B2', 'B1']);\nvar trueColorVis = {\n  min: 0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(-3.7408, 40.4386, 8);\nMap.addLayer(trueColor, trueColorVis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_RT", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_RT')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_RT_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_RT_TOA')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {\n  min: 0.0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_SR", "code": "/**\n * Function to mask clouds based on the pixel_qa band of Landsat SR data.\n * @param {ee.Image} image Input Landsat SR image\n * @return {ee.Image} Cloudmasked Landsat image\n */\nvar cloudMaskL457 = function(image) {\n  var qa = image.select('pixel_qa');\n  // If the cloud bit (5) is set and the cloud confidence (7) is high\n  // or the cloud shadow bit is set (3), then it's a bad pixel.\n  var cloud = qa.bitwiseAnd(1 \u003c\u003c 5)\n                  .and(qa.bitwiseAnd(1 \u003c\u003c 7))\n                  .or(qa.bitwiseAnd(1 \u003c\u003c 3));\n  // Remove edge pixels that don't occur in all bands\n  var mask2 = image.mask().reduce(ee.Reducer.min());\n  return image.updateMask(cloud.not()).updateMask(mask2);\n};\n\nvar dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR')\n                  .filterDate('1999-01-01', '2002-12-31')\n                  .map(cloudMaskL457);\n\nvar visParams = {\n  bands: ['B3', 'B2', 'B1'],\n  min: 0,\n  max: 3000,\n  gamma: 1.4,\n};\nMap.setCenter(-83.0539, 42.3159, 10);\nMap.addLayer(dataset.median(), visParams);\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T1_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_TOA')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {\n  min: 0.0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T2", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T2')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T2_SR", "code": "/**\n * Function to mask clouds based on the pixel_qa band of Landsat SR data.\n * @param {ee.Image} image Input Landsat SR image\n * @return {ee.Image} Cloudmasked Landsat image\n */\nvar cloudMaskL457 = function(image) {\n  var qa = image.select('pixel_qa');\n  // If the cloud bit (5) is set and the cloud confidence (7) is high\n  // or the cloud shadow bit is set (3), then it's a bad pixel.\n  var cloud = qa.bitwiseAnd(1 \u003c\u003c 5)\n                  .and(qa.bitwiseAnd(1 \u003c\u003c 7))\n                  .or(qa.bitwiseAnd(1 \u003c\u003c 3));\n  // Remove edge pixels that don't occur in all bands\n  var mask2 = image.mask().reduce(ee.Reducer.min());\n  return image.updateMask(cloud.not()).updateMask(mask2);\n};\n\nvar dataset = ee.ImageCollection('LANDSAT/LE07/C01/T2_SR')\n                  .filterDate('2014-01-01', '2017-12-31')\n                  .map(cloudMaskL457);\n\nvar visParams = {\n  bands: ['B3', 'B2', 'B1'],\n  min: 0,\n  max: 3000,\n  gamma: 1.4,\n};\nMap.setCenter(12.9261, -18.89, 11);\nMap.addLayer(dataset.median(), visParams);\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C01_T2_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T2_TOA')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {\n  min: 0.0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C02_T1", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C02/T1')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C02_T1_L2", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2')\n    .filterDate('2017-06-01', '2017-07-01');\n\n// Applies scaling factors.\nfunction applyScaleFactors(image) {\n  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);\n  var thermalBand = image.select('ST_B6').multiply(0.00341802).add(149.0);\n  return image.addBands(opticalBands, null, true)\n              .addBands(thermalBand, null, true);\n}\n\ndataset = dataset.map(applyScaleFactors);\n\nvar visualization = {\n  bands: ['SR_B3', 'SR_B2', 'SR_B1'],\n  min: 0.0,\n  max: 0.3,\n};\n\nMap.setCenter(-114.2579, 38.9275, 8);\n\nMap.addLayer(dataset, visualization, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C02_T1_RT", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C02/T1_RT')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C02_T1_RT_TOA", "code": "var dataset = ee.ImageCollection(\"LANDSAT/LE07/C02/T1_RT_TOA\")\n    .filterDate('1999-01-01', '2002-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {\n  min: 0.0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C02_T1_TOA", "code": "var dataset = ee.ImageCollection(\"LANDSAT/LE07/C02/T1_TOA\")\n    .filterDate('1999-01-01', '2002-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = { \n  min: 0.0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6); \nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C02_T2", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C02/T2')\n                  .filterDate('1999-01-01', '2002-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C02_T2_L2", "code": "var dataset = ee.ImageCollection('LANDSAT/LE07/C02/T2_L2')\n    .filterDate('2017-06-01', '2017-07-01');\n\n// Applies scaling factors.\nfunction applyScaleFactors(image) {\n  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);\n  var thermalBand = image.select('ST_B6').multiply(0.00341802).add(149.0);\n  return image.addBands(opticalBands, null, true)\n              .addBands(thermalBand, null, true);\n}\n\ndataset = dataset.map(applyScaleFactors);\n\nvar visualization = {\n  bands: ['SR_B3', 'SR_B2', 'SR_B1'],\n  min: 0.0,\n  max: 0.3,\n};\n\nMap.setCenter(-83, 24, 8);\n\nMap.addLayer(dataset, visualization, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LE07_C02_T2_TOA", "code": "var dataset = ee.ImageCollection(\"LANDSAT/LE07/C02/T2_TOA\")\n    .filterDate('1999-01-01', '2002-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {\n  min: 0.0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LE7_L1T_ANNUAL_GREENEST_TOA", "code": "// NOTE: This ImageCollection is deprecated.\n\nvar dataset = ee.ImageCollection(\"LANDSAT/LE7_L1T_ANNUAL_GREENEST_TOA\");\n\nMap.setCenter( -119.0446, 35.1195, 12);\nMap.addLayer(dataset.select(\"greenness\"), null, \"greenness\");\n", "environment": "[]"}, {"name": "LANDSAT_LE7_TOA_1YEAR", "code": "var dataset = ee.ImageCollection('LANDSAT/LE7_TOA_1YEAR');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {\n  min: 0.0,\n  max: 120.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');", "environment": "[]"}, {"name": "LANDSAT_LE7_TOA_3YEAR", "code": "var dataset = ee.ImageCollection('LANDSAT/LE7_TOA_3YEAR');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {\n  min: 0.0,\n  max: 120.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');", "environment": "[]"}, {"name": "LANDSAT_LE7_TOA_5YEAR", "code": "var dataset = ee.ImageCollection('LANDSAT/LE7_TOA_5YEAR');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {\n  min: 0.0,\n  max: 120.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');", "environment": "[]"}, {"name": "LANDSAT_LM01_C01_T1", "code": "var dataset = ee.ImageCollection('LANDSAT/LM01/C01/T1')\n                  .filterDate('1974-01-01', '1978-12-31');\nvar nearInfrared321 = dataset.select(['B6', 'B5', 'B4']);\nvar nearInfrared321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(nearInfrared321, nearInfrared321Vis, 'Near Infrared (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LM01_C01_T2", "code": "var dataset = ee.ImageCollection('LANDSAT/LM01/C01/T2')\n                  .filterDate('1974-01-01', '1978-12-31');\nvar nearInfrared321 = dataset.select(['B6', 'B5', 'B4']);\nvar nearInfrared321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(nearInfrared321, nearInfrared321Vis, 'Near Infrared (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LM01_C02_T1", "code": "var dataset = ee.ImageCollection('LANDSAT/LM01/C02/T1')\n                  .filterDate('1974-01-01', '1978-12-31');\nvar nearInfrared321 = dataset.select(['B6', 'B5', 'B4']);\nvar nearInfrared321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(nearInfrared321, nearInfrared321Vis, 'Near Infrared (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LM01_C02_T2", "code": "var dataset = ee.ImageCollection('LANDSAT/LM01/C02/T2')\n                  .filterDate('1974-01-01', '1978-12-31');\nvar nearInfrared321 = dataset.select(['B6', 'B5', 'B4']);\nvar nearInfrared321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(nearInfrared321, nearInfrared321Vis, 'Near Infrared (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LM02_C01_T1", "code": "var dataset = ee.ImageCollection('LANDSAT/LM02/C01/T1')\n                  .filterDate('1978-01-01', '1980-12-31');\nvar nearInfrared321 = dataset.select(['B6', 'B5', 'B4']);\nvar nearInfrared321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(nearInfrared321, nearInfrared321Vis, 'Near Infrared (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LM02_C01_T2", "code": "var dataset = ee.ImageCollection('LANDSAT/LM02/C01/T2')\n                  .filterDate('1978-01-01', '1980-12-31');\nvar nearInfrared321 = dataset.select(['B6', 'B5', 'B4']);\nvar nearInfrared321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(nearInfrared321, nearInfrared321Vis, 'Near Infrared (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LM02_C02_T1", "code": "var dataset = ee.ImageCollection('LANDSAT/LM02/C02/T1')\n                  .filterDate('1978-01-01', '1980-12-31');\nvar nearInfrared321 = dataset.select(['B6', 'B5', 'B4']);\nvar nearInfrared321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(nearInfrared321, nearInfrared321Vis, 'Near Infrared (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LM02_C02_T2", "code": "var dataset = ee.ImageCollection('LANDSAT/LM02/C02/T2')\n                  .filterDate('1978-01-01', '1980-12-31');\nvar nearInfrared321 = dataset.select(['B6', 'B5', 'B4']);\nvar nearInfrared321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(nearInfrared321, nearInfrared321Vis, 'Near Infrared (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LM03_C01_T1", "code": "var dataset = ee.ImageCollection('LANDSAT/LM03/C01/T1')\n                  .filterDate('1978-01-01', '1980-12-31');\nvar nearInfrared321 = dataset.select(['B6', 'B5', 'B4']);\nvar nearInfrared321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(nearInfrared321, nearInfrared321Vis, 'Near Infrared (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LM03_C01_T2", "code": "var dataset = ee.ImageCollection('LANDSAT/LM03/C01/T2')\n                  .filterDate('1978-01-01', '1980-12-31');\nvar nearInfrared321 = dataset.select(['B6', 'B5', 'B4']);\nvar nearInfrared321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(nearInfrared321, nearInfrared321Vis, 'Near Infrared (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LM03_C02_T1", "code": "var dataset = ee.ImageCollection('LANDSAT/LM03/C02/T1')\n                  .filterDate('1978-01-01', '1980-12-31');\nvar nearInfrared321 = dataset.select(['B6', 'B5', 'B4']);\nvar nearInfrared321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(nearInfrared321, nearInfrared321Vis, 'Near Infrared (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LM03_C02_T2", "code": "var dataset = ee.ImageCollection('LANDSAT/LM03/C02/T2')\n                  .filterDate('1978-01-01', '1980-12-31');\nvar nearInfrared321 = dataset.select(['B6', 'B5', 'B4']);\nvar nearInfrared321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(nearInfrared321, nearInfrared321Vis, 'Near Infrared (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LM04_C01_T1", "code": "var dataset = ee.ImageCollection('LANDSAT/LM04/C01/T1')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar nearInfrared321 = dataset.select(['B3', 'B2', 'B1']);\nvar nearInfrared321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(nearInfrared321, nearInfrared321Vis, 'Near Infrared (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LM04_C01_T2", "code": "var dataset = ee.ImageCollection('LANDSAT/LM04/C01/T2')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar nearInfrared321 = dataset.select(['B3', 'B2', 'B1']);\nvar nearInfrared321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(nearInfrared321, nearInfrared321Vis, 'Near Infrared (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LM04_C02_T1", "code": "var dataset = ee.ImageCollection('LANDSAT/LM04/C02/T1')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar nearInfrared321 = dataset.select(['B3', 'B2', 'B1']);\nvar nearInfrared321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(nearInfrared321, nearInfrared321Vis, 'Near Infrared (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LM04_C02_T2", "code": "var dataset = ee.ImageCollection('LANDSAT/LM04/C02/T2')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar nearInfrared321 = dataset.select(['B3', 'B2', 'B1']);\nvar nearInfrared321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(nearInfrared321, nearInfrared321Vis, 'Near Infrared (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LM05_C01_T1", "code": "var dataset = ee.ImageCollection('LANDSAT/LM05/C01/T1')\n                  .filterDate('1985-01-01', '1989-12-31');\nvar nearInfrared321 = dataset.select(['B3', 'B2', 'B1']);\nvar nearInfrared321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(nearInfrared321, nearInfrared321Vis, 'Near Infrared (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LM05_C01_T2", "code": "var dataset = ee.ImageCollection('LANDSAT/LM05/C01/T2')\n                  .filterDate('1987-01-01', '1987-12-31');\nvar nearInfrared321 = dataset.select(['B3', 'B2', 'B1']);\nvar nearInfrared321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(nearInfrared321, nearInfrared321Vis, 'Near Infrared (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LM05_C02_T1", "code": "var dataset = ee.ImageCollection('LANDSAT/LM05/C02/T1')\n                  .filterDate('1985-01-01', '1989-12-31');\nvar nearInfrared321 = dataset.select(['B3', 'B2', 'B1']);\nvar nearInfrared321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(nearInfrared321, nearInfrared321Vis, 'Near Infrared (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LM05_C02_T2", "code": "var dataset = ee.ImageCollection('LANDSAT/LM05/C02/T2')\n                  .filterDate('1985-01-01', '1989-12-31');\nvar nearInfrared321 = dataset.select(['B3', 'B2', 'B1']);\nvar nearInfrared321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(nearInfrared321, nearInfrared321Vis, 'Near Infrared (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LO08_C01_T1", "code": "var dataset = ee.ImageCollection(\"LANDSAT/LO08/C01/T1\");\n\nvar visualization = {\n  bands: ['B4', 'B3', 'B2'],\n  min: 0.0,\n  max: 30000.0,\n};\n\nMap.setCenter(15.05, 18.18, 4);\n\nMap.addLayer(dataset, visualization, \"True Color (432)\");\n", "environment": "[]"}, {"name": "LANDSAT_LO08_C01_T1_RT", "code": "var dataset = ee.ImageCollection(\"LANDSAT/LO08/C01/T1_RT\");\n\nvar visualization = {\n  bands: ['B4', 'B3', 'B2'],\n  min: 0.0,\n  max: 30000.0,\n};\n\nMap.setCenter(15.05, 18.18, 4);\n\nMap.addLayer(dataset, visualization, \"True Color (432)\");\n", "environment": "[]"}, {"name": "LANDSAT_LO08_C01_T2", "code": "var dataset = ee.ImageCollection(\"LANDSAT/LO08/C01/T2\");\n\nvar visualization = {\n  bands: ['B4', 'B3', 'B2'],\n  min: 0.0,\n  max: 30000.0,\n};\n\nMap.setCenter(27.54, 63.34, 4);\n\nMap.addLayer(dataset, visualization, \"True Color (432)\");\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_32DAY_BAI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_32DAY_BAI')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar scaled = dataset.select('BAI');\nvar scaledVis = {\n  min: 0.0,\n  max: 100.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(scaled, scaledVis, 'Scaled');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_32DAY_EVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_32DAY_EVI')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar colorized = dataset.select('EVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_32DAY_NBRT", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_32DAY_NBRT')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar colorized = dataset.select('NBRT');\nvar colorizedVis = {\n  min: 0.9,\n  max: 1.0,\n  palette: ['000000', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_32DAY_NDSI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_32DAY_NDSI')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar colorized = dataset.select('NDSI');\nvar colorizedVis = {\n  palette: ['000088', '0000FF', '8888FF', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_32DAY_NDVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_32DAY_NDVI')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar colorized = dataset.select('NDVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_32DAY_NDWI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_32DAY_NDWI')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar colorized = dataset.select('NDWI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_32DAY_RAW", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_32DAY_RAW')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_32DAY_RAW');\nvar visParams = {\n  min: 0,\n  max: 255,\n  gamma: 1.2,\n  bands: ['B3', 'B2', 'B1'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(dataset, visParams, 'LANDSAT/LT04/C01/T1_32DAY_RAW');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_32DAY_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_32DAY_TOA')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar trueColor = dataset.select(['B3', 'B2', 'B1']);\nvar trueColorVis = {\n  min: 0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor, trueColorVis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_8DAY_BAI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_8DAY_BAI')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar scaled = dataset.select('BAI');\nvar scaledVis = {\n  min: 0.0,\n  max: 100.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(scaled, scaledVis, 'Scaled');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_8DAY_EVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_8DAY_EVI')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar colorized = dataset.select('EVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_8DAY_NBRT", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_8DAY_NBRT')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar colorized = dataset.select('NBRT');\nvar colorizedVis = {\n  min: 0.9,\n  max: 1.0,\n  palette: ['000000', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_8DAY_NDSI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_8DAY_NDSI')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar colorized = dataset.select('NDSI');\nvar colorizedVis = {\n  palette: ['000088', '0000FF', '8888FF', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_8DAY_NDVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_8DAY_NDVI')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar colorized = dataset.select('NDVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_8DAY_NDWI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_8DAY_NDWI')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar colorized = dataset.select('NDWI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_8DAY_RAW", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_8DAY_RAW')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_8DAY_RAW');\nvar visParams = {\n  min: 0,\n  max: 255,\n  gamma: 1.2,\n  bands: ['B3', 'B2', 'B1'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(dataset, visParams, 'LANDSAT/LT04/C01/T1_8DAY_RAW');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_8DAY_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_8DAY_TOA')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar trueColor = dataset.select(['B3', 'B2', 'B1']);\nvar trueColorVis = {\n  min: 0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor, trueColorVis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_ANNUAL_BAI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_ANNUAL_BAI')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar scaled = dataset.select('BAI');\nvar scaledVis = {\n  min: 0.0,\n  max: 100.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(scaled, scaledVis, 'Scaled');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_ANNUAL_EVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_ANNUAL_EVI')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar colorized = dataset.select('EVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_ANNUAL_GREENEST_TOA", "code": "// Import the dataset and mosaic the collection.\nvar dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_ANNUAL_GREENEST_TOA')\n                  .mosaic();  // For greater visualization coverage.\n\n// Get the greenness band.\nvar greenness = dataset.select('greenness');\n\n// Get bands for true color RGB display.\nvar trueColor = dataset.select(['B3', 'B2', 'B1']);\n\n// Define a mask for low greenness, make low greenness partially transparent.\nvar mask = dataset.select('greenness').gt(0.1).remap([0, 1], [0.5, 1]);\n\n// Visualization parameters for greenness display.\nvar greennessVis = {\n  min: 0.1,\n  max: 0.85,\n  palette: ['fffdcd', 'e1cd73', 'aaac20', '5f920c', '187328', '144b2a', '172313']\n};\n\n// Visualization parameters for true color display.\nvar trueColorVis = {\n  min: 0.0,\n  max: 0.4,\n  gamma: 1.2,\n};\n\n// Display the layers on the map with mask applied.\nMap.setCenter(43.4, 40.0, 7);\nMap.addLayer(trueColor.updateMask(mask), trueColorVis, 'True Color (432)', false);\nMap.addLayer(greenness.updateMask(mask), greennessVis, 'Greenness');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_ANNUAL_NBRT", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_ANNUAL_NBRT')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar colorized = dataset.select('NBRT');\nvar colorizedVis = {\n  min: 0.9,\n  max: 1.0,\n  palette: ['000000', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_ANNUAL_NDSI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_ANNUAL_NDSI')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar colorized = dataset.select('NDSI');\nvar colorizedVis = {\n  palette: ['000088', '0000FF', '8888FF', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_ANNUAL_NDVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_ANNUAL_NDVI')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar colorized = dataset.select('NDVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_ANNUAL_NDWI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_ANNUAL_NDWI')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar colorized = dataset.select('NDWI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_ANNUAL_RAW", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_ANNUAL_RAW')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_ANNUAL_RAW');\nvar visParams = {\n  min: 0,\n  max: 255,\n  gamma: 1.2,\n  bands: ['B3', 'B2', 'B1'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(dataset, visParams, 'LANDSAT/LT04/C01/T1_ANNUAL_RAW');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_ANNUAL_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_ANNUAL_TOA')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar trueColor = dataset.select(['B3', 'B2', 'B1']);\nvar trueColorVis = {\n  min: 0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor, trueColorVis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_SR", "code": "/**\n * Function to mask clouds based on the pixel_qa band of Landsat SR data.\n * @param {ee.Image} image Input Landsat SR image\n * @return {ee.Image} Cloudmasked Landsat image\n */\nvar cloudMaskL457 = function(image) {\n  var qa = image.select('pixel_qa');\n  // If the cloud bit (5) is set and the cloud confidence (7) is high\n  // or the cloud shadow bit is set (3), then it's a bad pixel.\n  var cloud = qa.bitwiseAnd(1 \u003c\u003c 5)\n                  .and(qa.bitwiseAnd(1 \u003c\u003c 7))\n                  .or(qa.bitwiseAnd(1 \u003c\u003c 3));\n  // Remove edge pixels that don't occur in all bands\n  var mask2 = image.mask().reduce(ee.Reducer.min());\n  return image.updateMask(cloud.not()).updateMask(mask2);\n};\n\nvar dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_SR')\n                  .filterDate('1989-01-01', '1992-12-31')\n                  .map(cloudMaskL457);\n\nvar visParams = {\n  bands: ['B3', 'B2', 'B1'],\n  min: 0,\n  max: 3000,\n  gamma: 1.4,\n};\nMap.setCenter(-114.6588, 31.6569, 10);\nMap.addLayer(dataset.median(), visParams);\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T1_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T1_TOA')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {\n  min: 0.0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T2", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T2')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T2_SR", "code": "/**\n * Function to mask clouds based on the pixel_qa band of Landsat SR data.\n * @param {ee.Image} image Input Landsat SR image\n * @return {ee.Image} Cloudmasked Landsat image\n */\nvar cloudMaskL457 = function(image) {\n  var qa = image.select('pixel_qa');\n  // If the cloud bit (5) is set and the cloud confidence (7) is high\n  // or the cloud shadow bit is set (3), then it's a bad pixel.\n  var cloud = qa.bitwiseAnd(1 \u003c\u003c 5)\n                  .and(qa.bitwiseAnd(1 \u003c\u003c 7))\n                  .or(qa.bitwiseAnd(1 \u003c\u003c 3));\n  // Remove edge pixels that don't occur in all bands\n  var mask2 = image.mask().reduce(ee.Reducer.min());\n  return image.updateMask(cloud.not()).updateMask(mask2);\n};\n\nvar dataset = ee.ImageCollection('LANDSAT/LT04/C01/T2_SR')\n                  .filterDate('1988-01-01', '1992-12-31')\n                  .map(cloudMaskL457);\n\nvar visParams = {\n  bands: ['B3', 'B2', 'B1'],\n  min: 0,\n  max: 3000,\n  gamma: 1.4,\n};\nMap.setCenter(-101.6496, 39.0146, 11);\nMap.addLayer(dataset.median(), visParams);\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C01_T2_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C01/T2_TOA')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {\n  min: 0.0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C02_T1", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C02/T1')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C02_T1_L2", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C02/T1_L2')\n    .filterDate('1990-04-01', '1990-05-01');\n\n// Applies scaling factors.\nfunction applyScaleFactors(image) {\n  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);\n  var thermalBand = image.select('ST_B6').multiply(0.00341802).add(149.0);\n  return image.addBands(opticalBands, null, true)\n              .addBands(thermalBand, null, true);\n}\n\ndataset = dataset.map(applyScaleFactors);\n\nvar visualization = {\n  bands: ['SR_B3', 'SR_B2', 'SR_B1'],\n  min: 0.0,\n  max: 0.3,\n};\n\nMap.setCenter(15, 53, 8);\n\nMap.addLayer(dataset, visualization, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C02_T1_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C02/T1_TOA')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {\n  min: 0.0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C02_T2", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C02/T2')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C02_T2_L2", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C02/T2_L2')\n    .filterDate('1990-04-01', '1990-05-01');\n\n// Applies scaling factors.\nfunction applyScaleFactors(image) {\n  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);\n  var thermalBand = image.select('ST_B6').multiply(0.00341802).add(149.0);\n  return image.addBands(opticalBands, null, true)\n              .addBands(thermalBand, null, true);\n}\n\ndataset = dataset.map(applyScaleFactors);\n\nvar visualization = {\n  bands: ['SR_B3', 'SR_B2', 'SR_B1'],\n  min: 0.0,\n  max: 0.3,\n};\n\nMap.setCenter(-83, 24, 8);\n\nMap.addLayer(dataset, visualization, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LT04_C02_T2_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LT04/C02/T2_TOA')\n                  .filterDate('1989-01-01', '1992-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {\n  min: 0.0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_32DAY_BAI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_32DAY_BAI')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar scaled = dataset.select('BAI');\nvar scaledVis = {\n  min: 0.0,\n  max: 100.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(scaled, scaledVis, 'Scaled');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_32DAY_EVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_32DAY_EVI')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar colorized = dataset.select('EVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_32DAY_NBRT", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_32DAY_NBRT')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar colorized = dataset.select('NBRT');\nvar colorizedVis = {\n  min: 0.9,\n  max: 1.0,\n  palette: ['000000', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_32DAY_NDSI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_32DAY_NDSI')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar colorized = dataset.select('NDSI');\nvar colorizedVis = {\n  palette: ['000088', '0000FF', '8888FF', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_32DAY_NDVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_32DAY_NDVI')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar colorized = dataset.select('NDVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_32DAY_NDWI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_32DAY_NDWI')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar colorized = dataset.select('NDWI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_32DAY_RAW", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_32DAY_RAW')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_32DAY_RAW');\nvar visParams = {\n  min: 0,\n  max: 255,\n  gamma: 1.2,\n  bands: ['B3', 'B2', 'B1'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(dataset, visParams, 'LANDSAT/LT05/C01/T1_32DAY_RAW');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_32DAY_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_32DAY_TOA')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar trueColor = dataset.select(['B3', 'B2', 'B1']);\nvar trueColorVis = {\n  min: 0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor, trueColorVis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_8DAY_BAI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_8DAY_BAI')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar scaled = dataset.select('BAI');\nvar scaledVis = {\n  min: 0.0,\n  max: 100.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(scaled, scaledVis, 'Scaled');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_8DAY_EVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_8DAY_EVI')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar colorized = dataset.select('EVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_8DAY_NBRT", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_8DAY_NBRT')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar colorized = dataset.select('NBRT');\nvar colorizedVis = {\n  min: 0.9,\n  max: 1.0,\n  palette: ['000000', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_8DAY_NDSI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_8DAY_NDSI')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar colorized = dataset.select('NDSI');\nvar colorizedVis = {\n  palette: ['000088', '0000FF', '8888FF', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_8DAY_NDVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_8DAY_NDVI')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar colorized = dataset.select('NDVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_8DAY_NDWI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_8DAY_NDWI')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar colorized = dataset.select('NDWI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_8DAY_RAW", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_8DAY_RAW')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_8DAY_RAW');\nvar visParams = {\n  min: 0,\n  max: 255,\n  gamma: 1.2,\n  bands: ['B3', 'B2', 'B1'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(dataset, visParams, 'LANDSAT/LT05/C01/T1_8DAY_RAW');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_8DAY_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_8DAY_TOA')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar trueColor = dataset.select(['B3', 'B2', 'B1']);\nvar trueColorVis = {\n  min: 0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor, trueColorVis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_ANNUAL_BAI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_ANNUAL_BAI')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar scaled = dataset.select('BAI');\nvar scaledVis = {\n  min: 0.0,\n  max: 100.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(scaled, scaledVis, 'Scaled');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_ANNUAL_EVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_ANNUAL_EVI')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar colorized = dataset.select('EVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_ANNUAL_GREENEST_TOA", "code": "// Import the dataset, filter to 2011, get the image.\nvar dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_ANNUAL_GREENEST_TOA')\n                  .filterDate('2011-01-01', '2011-12-31')\n                  .first();\n\n// Get the greenness band.\nvar greenness = dataset.select('greenness');\n\n// Get bands for true color RGB display.\nvar trueColor = dataset.select(['B3', 'B2', 'B1']);\n\n// Define a mask for low greenness, make low greenness partially transparent.\nvar mask = dataset.select('greenness').gt(0.1).remap([0, 1], [0.5, 1]);\n\n// Visualization parameters for greenness display.\nvar greennessVis = {\n  min: 0.1,\n  max: 0.85,\n  palette: ['fffdcd', 'e1cd73', 'aaac20', '5f920c', '187328', '144b2a', '172313']\n};\n\n// Visualization parameters for true color display.\nvar trueColorVis = {\n  min: 0.0,\n  max: 0.4,\n  gamma: 1.2,\n};\n\n// Display the layers on the map with mask applied.\nMap.setCenter(43.4, 40.0, 7);\nMap.addLayer(trueColor.updateMask(mask), trueColorVis, 'True Color (432)', false);\nMap.addLayer(greenness.updateMask(mask), greennessVis, 'Greenness');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_ANNUAL_NBRT", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_ANNUAL_NBRT')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar colorized = dataset.select('NBRT');\nvar colorizedVis = {\n  min: 0.9,\n  max: 1.0,\n  palette: ['000000', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_ANNUAL_NDSI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_ANNUAL_NDSI')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar colorized = dataset.select('NDSI');\nvar colorizedVis = {\n  palette: ['000088', '0000FF', '8888FF', 'FFFFFF'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_ANNUAL_NDVI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_ANNUAL_NDVI')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar colorized = dataset.select('NDVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_ANNUAL_NDWI", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_ANNUAL_NDWI')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar colorized = dataset.select('NDWI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(colorized, colorizedVis, 'Colorized');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_ANNUAL_RAW", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_ANNUAL_RAW')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_ANNUAL_RAW');\nvar visParams = {\n  min: 0,\n  max: 255,\n  gamma: 1.2,\n  bands: ['B3', 'B2', 'B1'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(dataset, visParams, 'LANDSAT/LT05/C01/T1_ANNUAL_RAW');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_ANNUAL_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_ANNUAL_TOA')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar trueColor = dataset.select(['B3', 'B2', 'B1']);\nvar trueColorVis = {\n  min: 0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor, trueColorVis, 'True Color (432)');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_SR", "code": "/**\n * Function to mask clouds based on the pixel_qa band of Landsat SR data.\n * @param {ee.Image} image Input Landsat SR image\n * @return {ee.Image} Cloudmasked Landsat image\n */\nvar cloudMaskL457 = function(image) {\n  var qa = image.select('pixel_qa');\n  // If the cloud bit (5) is set and the cloud confidence (7) is high\n  // or the cloud shadow bit is set (3), then it's a bad pixel.\n  var cloud = qa.bitwiseAnd(1 \u003c\u003c 5)\n                  .and(qa.bitwiseAnd(1 \u003c\u003c 7))\n                  .or(qa.bitwiseAnd(1 \u003c\u003c 3));\n  // Remove edge pixels that don't occur in all bands\n  var mask2 = image.mask().reduce(ee.Reducer.min());\n  return image.updateMask(cloud.not()).updateMask(mask2);\n};\n\nvar dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_SR')\n                  .filterDate('2011-01-01', '2011-12-31')\n                  .map(cloudMaskL457);\n\nvar visParams = {\n  bands: ['B3', 'B2', 'B1'],\n  min: 0,\n  max: 3000,\n  gamma: 1.4,\n};\nMap.setCenter(7.1356, 44.9648, 8);\nMap.addLayer(dataset.median(), visParams);\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T1_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_TOA')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {\n  min: 0.0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T2", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T2')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T2_SR", "code": "/**\n * Function to mask clouds based on the pixel_qa band of Landsat SR data.\n * @param {ee.Image} image Input Landsat SR image\n * @return {ee.Image} Cloudmasked Landsat image\n */\nvar cloudMaskL457 = function(image) {\n  var qa = image.select('pixel_qa');\n  // If the cloud bit (5) is set and the cloud confidence (7) is high\n  // or the cloud shadow bit is set (3), then it's a bad pixel.\n  var cloud = qa.bitwiseAnd(1 \u003c\u003c 5)\n                  .and(qa.bitwiseAnd(1 \u003c\u003c 7))\n                  .or(qa.bitwiseAnd(1 \u003c\u003c 3));\n  // Remove edge pixels that don't occur in all bands\n  var mask2 = image.mask().reduce(ee.Reducer.min());\n  return image.updateMask(cloud.not()).updateMask(mask2);\n};\n\nvar dataset = ee.ImageCollection('LANDSAT/LT05/C01/T2_SR')\n                  .filterDate('2010-01-01', '2011-12-31')\n                  .map(cloudMaskL457);\n\nvar visParams = {\n  bands: ['B3', 'B2', 'B1'],\n  min: 0,\n  max: 3000,\n  gamma: 1.4,\n};\nMap.setCenter(-91.0725, 33.2513, 10);\nMap.addLayer(dataset.median(), visParams);\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C01_T2_TOA", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T2_TOA')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {\n  min: 0.0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C02_T1", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C02/T1')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C02_T1_L2", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')\n    .filterDate('2000-06-01', '2000-07-01');\n\n// Applies scaling factors.\nfunction applyScaleFactors(image) {\n  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);\n  var thermalBand = image.select('ST_B6').multiply(0.00341802).add(149.0);\n  return image.addBands(opticalBands, null, true)\n              .addBands(thermalBand, null, true);\n}\n\ndataset = dataset.map(applyScaleFactors);\n\nvar visualization = {\n  bands: ['SR_B3', 'SR_B2', 'SR_B1'],\n  min: 0.0,\n  max: 0.3,\n};\n\nMap.setCenter(-114.2579, 38.9275, 8);\n\nMap.addLayer(dataset, visualization, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C02_T1_TOA", "code": "var dataset = ee.ImageCollection(\"LANDSAT/LT05/C02/T1_TOA\")\n  .filterDate('2011-01-01', '2011-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {\n  min: 0.0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C02_T2", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C02/T2')\n                  .filterDate('2011-01-01', '2011-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C02_T2_L2", "code": "var dataset = ee.ImageCollection('LANDSAT/LT05/C02/T2_L2')\n    .filterDate('2000-06-01', '2000-07-01');\n\n// Applies scaling factors.\nfunction applyScaleFactors(image) {\n  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);\n  var thermalBand = image.select('ST_B6').multiply(0.00341802).add(149.0);\n  return image.addBands(opticalBands, null, true)\n              .addBands(thermalBand, null, true);\n}\n\ndataset = dataset.map(applyScaleFactors);\n\nvar visualization = {\n  bands: ['SR_B3', 'SR_B2', 'SR_B1'],\n  min: 0.0,\n  max: 0.3,\n};\n\nMap.setCenter(-83, 24, 8);\n\nMap.addLayer(dataset, visualization, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LT05_C02_T2_TOA", "code": "var dataset = ee.ImageCollection(\"LANDSAT/LT05/C02/T2_TOA\")\n  .filterDate('2011-01-01', '2011-12-31');\nvar trueColor321 = dataset.select(['B3', 'B2', 'B1']);\nvar trueColor321Vis = {\n  min: 0.0,\n  max: 0.4,\n  gamma: 1.2,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');\n", "environment": "[]"}, {"name": "LANDSAT_LT08_C01_T2", "code": "var dataset = ee.ImageCollection(\"LANDSAT/LT08/C01/T2\");\n\nvar visualization = {\n  bands: ['B10', 'B11'],\n  min: 0.0,\n  max: 30000.0,\n};\n\nMap.setCenter(99.46, 68.91, 4);\n\nMap.addLayer(dataset, visualization, \"Thermal Infrared\");\n", "environment": "[]"}, {"name": "LANDSAT_LT4_L1T_ANNUAL_GREENEST_TOA", "code": "// NOTE: This ImageCollection is deprecated.\n\nvar dataset = ee.ImageCollection(\"LANDSAT/LT4_L1T_ANNUAL_GREENEST_TOA\");\n\nMap.setCenter( -119.0446, 35.1195, 12);\nMap.addLayer(dataset.select(\"greenness\"), null, \"greenness\");\n", "environment": "[]"}, {"name": "LANDSAT_LT5_L1T_ANNUAL_GREENEST_TOA", "code": "// NOTE: This ImageCollection is deprecated.\n\nvar dataset = ee.ImageCollection(\"LANDSAT/LT5_L1T_ANNUAL_GREENEST_TOA\");\n\nMap.setCenter( -119.0446, 35.1195, 12);\nMap.addLayer(dataset.select(\"greenness\"), null, \"greenness\");\n", "environment": "[]"}, {"name": "LANDSAT_MANGROVE_FORESTS", "code": "var dataset = ee.ImageCollection('LANDSAT/MANGROVE_FORESTS');\nvar mangrovesVis = {\n  min: 0,\n  max: 1.0,\n  palette: ['d40115'],\n};\nMap.setCenter(-44.5626, -2.0164, 9);\nMap.addLayer(dataset, mangrovesVis, 'Mangroves');\n", "environment": "[]"}, {"name": "LARSE_GEDI_GEDI02_A_002", "code": "var dataset = ee.FeatureCollection('LARSE/GEDI/GEDI02_A_002/GEDI02_A_2021244154857_O15413_04_T05622_02_003_02_V002');\ndataset = dataset.style({color: 'black',  pointSize: 1});\nMap.setCenter(-64.88, -31.77, 15);\nMap.addLayer(dataset);\n", "environment": "[]"}, {"name": "LARSE_GEDI_GEDI02_A_002_MONTHLY", "code": "var qualityMask = function(im) {\n  return im.updateMask(im.select('quality_flag').eq(1))\n      .updateMask(im.select('degrade_flag').eq(0));\n};\nvar dataset = ee.ImageCollection('LARSE/GEDI/GEDI02_A_002_MONTHLY')\n                  .map(qualityMask)\n                  .select('rh98');\n\nvar gediVis = {\n  min: 1,\n  max: 60,\n  palette: 'darkred,red,orange,green,darkgreen',\n};\nMap.setCenter(-74.803466, -9.342209, 10);\nMap.addLayer(dataset, gediVis, 'rh98');\n", "environment": "[]"}, {"name": "LARSE_GEDI_GEDI04_B_002", "code": "var l4b = ee.Image('LARSE/GEDI/GEDI04_B_002')\n\nMap.addLayer(\n    l4b.select('MU'),\n    {min: 10, max: 250, palette: '440154,414387,2a788e,23a884,7ad151,fde725'},\n    'Mean Biomass');\nMap.addLayer(\n    l4b.select('SE'),\n    {min: 10, max: 50, palette: '000004,3b0f6f,8c2981,dd4a69,fe9f6d,fcfdbf'},\n    'Standard Error');\n", "environment": "[]"}, {"name": "MERIT_DEM_v1_0_3", "code": "var dataset = ee.Image(\"MERIT/DEM/v1_0_3\");\n\nvar visualization = {\n  bands: ['dem'],\n  min: -3,\n  max: 18,\n  palette: ['000000', '478FCD', '86C58E', 'AFC35E', '8F7131',\n           'B78D4F', 'E2B8A6', 'FFFFFF']\n};\n\nMap.setCenter(90.301, 23.052, 10);\n\nMap.addLayer(dataset, visualization, \"Elevation\");\n", "environment": "[]"}, {"name": "MERIT_Hydro_reduced_v1_0_1", "code": "var dataset = ee.Image(\"MERIT/Hydro_reduced/v1_0_1\");\n\nvar visualization = {\n  bands: 'wth',\n  min: 0,\n  max: 400\n};\n\nMap.setCenter(90.301, 23.052, 10);\n\nMap.addLayer(dataset, visualization, \"River width\");\n", "environment": "[]"}, {"name": "MERIT_Hydro_v1_0_1", "code": "var dataset = ee.Image(\"MERIT/Hydro/v1_0_1\");\n\nvar visualization = {\n  bands: ['viswth'],\n};\n\nMap.setCenter(90.301, 23.052, 10);\n\nMap.addLayer(dataset, visualization, \"River width\");\n", "environment": "[]"}, {"name": "MODIS_006_MCD12Q1", "code": "var dataset = ee.ImageCollection('MODIS/006/MCD12Q1');\nvar igbpLandCover = dataset.select('LC_Type1');\nvar igbpLandCoverVis = {\n  min: 1.0,\n  max: 17.0,\n  palette: [\n    '05450a', '086a10', '54a708', '78d203', '009900', 'c6b044', 'dcd159',\n    'dade48', 'fbff13', 'b6ff05', '27ff87', 'c24f44', 'a5a5a5', 'ff6d4c',\n    '69fff8', 'f9ffa4', '1c0dff'\n  ],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(igbpLandCover, igbpLandCoverVis, 'IGBP Land Cover');", "environment": "[]"}, {"name": "MODIS_006_MCD12Q2", "code": "var dataset = ee.ImageCollection('MODIS/006/MCD12Q2')\n                  .filter(ee.Filter.date('2001-01-01', '2002-01-01'));\nvar vegetationPeak = dataset.select('Peak_1');\nvar vegetationPeakVis = {\n  min: 11400,\n  max: 11868,\n  palette: ['0f17ff', 'b11406', 'f1ff23'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(\n    vegetationPeak, vegetationPeakVis,\n    'Vegetation Peak 2001');\n", "environment": "[]"}, {"name": "MODIS_006_MCD15A3H", "code": "var dataset = ee.ImageCollection('MODIS/006/MCD15A3H');\nvar defaultVisualization = dataset.first().select('Fpar');\nvar defaultVisualizationVis = {\n  min: 0.0,\n  max: 100.0,\n  palette: ['e1e4b4', '999d60', '2ec409', '0a4b06'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(\n    defaultVisualization, defaultVisualizationVis, 'Default visualization');\n", "environment": "[]"}, {"name": "MODIS_006_MCD19A2_GRANULES", "code": "var collection = ee.ImageCollection('MODIS/006/MCD19A2_GRANULES')\n                  .select('Optical_Depth_047')\n                  .filterDate('2019-01-01', '2019-01-15');\n\nvar band_viz = {\n  min: 0,\n  max: 500,\n  palette: ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']\n};\n\nMap.addLayer(collection.mean(), band_viz, 'Optical Depth 047');\nMap.setCenter(76, 13, 6);\n", "environment": "[]"}, {"name": "MODIS_006_MCD43A1", "code": "var dataset = ee.ImageCollection('MODIS/006/MCD43A1')\n                  .filter(ee.Filter.date('2018-05-01', '2018-07-01'));\nvar defaultVisualization = dataset.select([\n  'BRDF_Albedo_Parameters_Band1_iso', 'BRDF_Albedo_Parameters_Band4_iso',\n  'BRDF_Albedo_Parameters_Band3_iso'\n]);\nvar defaultVisualizationVis = {\n  min: 0.0,\n  max: 1400.0,\n  gamma: 2.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(\n    defaultVisualization, defaultVisualizationVis, 'Default visualization');\n", "environment": "[]"}, {"name": "MODIS_006_MCD43A2", "code": "var dataset = ee.ImageCollection('MODIS/006/MCD43A2')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar defaultVisualization = dataset.select('Snow_BRDF_Albedo');\nvar defaultVisualizationVis = {\n  min: 0.0,\n  max: 1.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(\n    defaultVisualization, defaultVisualizationVis, 'Default visualization');\n", "environment": "[]"}, {"name": "MODIS_006_MCD43A3", "code": "var dataset = ee.ImageCollection('MODIS/006/MCD43A3')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar blackSkyAlbedo = dataset.select('Albedo_BSA_Band1');\nvar blackSkyAlbedoVis = {\n  min: 0.0,\n  max: 400.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(blackSkyAlbedo, blackSkyAlbedoVis, 'Black-Sky Albedo');\n", "environment": "[]"}, {"name": "MODIS_006_MCD43A4", "code": "var dataset = ee.ImageCollection('MODIS/006/MCD43A4')\n                  .filter(ee.Filter.date('2018-04-01', '2018-06-01'));\nvar trueColor = dataset.select([\n  'Nadir_Reflectance_Band1', 'Nadir_Reflectance_Band4',\n  'Nadir_Reflectance_Band3'\n]);\nvar trueColorVis = {\n  min: 0.0,\n  max: 4000.0,\n  gamma: 1.4,\n};\nMap.setCenter(-7.03125, 31.0529339857, 2);\nMap.addLayer(trueColor, trueColorVis, 'True Color');", "environment": "[]"}, {"name": "MODIS_006_MCD43C3", "code": "var dataset = ee.ImageCollection('MODIS/006/MCD43C3')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar blackSkyAlbedo = dataset.select('Albedo_BSA_Band1');\nvar blackSkyAlbedoVis = {\n  min: 0.0,\n  max: 400.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(blackSkyAlbedo, blackSkyAlbedoVis, 'Black-Sky Albedo');\n", "environment": "[]"}, {"name": "MODIS_006_MCD64A1", "code": "var dataset = ee.ImageCollection('MODIS/006/MCD64A1')\n                  .filter(ee.Filter.date('2017-01-01', '2018-05-01'));\nvar burnedArea = dataset.select('BurnDate');\nvar burnedAreaVis = {\n  min: 30.0,\n  max: 341.0,\n  palette: ['4e0400', '951003', 'c61503', 'ff1901'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(burnedArea, burnedAreaVis, 'Burned Area');\n", "environment": "[]"}, {"name": "MODIS_006_MOD08_M3", "code": "var dataset = ee.ImageCollection('MODIS/006/MOD08_M3')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar aerosolOpticalDepth =\n    dataset.select('Aerosol_Optical_Depth_Land_Ocean_Mean_Mean');\nvar aerosolOpticalDepthVis = {\n  min: 0.0,\n  max: 3000.0,\n  palette: ['ffffff', '1303ff', '01ff09', 'ff2f00'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(\n    aerosolOpticalDepth, aerosolOpticalDepthVis, 'Aerosol Optical Depth');\n", "environment": "[]"}, {"name": "MODIS_006_MOD09A1", "code": "var dataset = ee.ImageCollection('MODIS/006/MOD09A1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar trueColor =\n    dataset.select(['sur_refl_b01', 'sur_refl_b04', 'sur_refl_b03']);\nvar trueColorVis = {\n  min: -100.0,\n  max: 3000.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor, trueColorVis, 'True Color');\n", "environment": "[]"}, {"name": "MODIS_006_MOD09GA", "code": "var dataset = ee.ImageCollection('MODIS/006/MOD09GA')\n                  .filter(ee.Filter.date('2018-04-01', '2018-06-01'));\nvar trueColor143 =\n    dataset.select(['sur_refl_b01', 'sur_refl_b04', 'sur_refl_b03']);\nvar trueColor143Vis = {\n  min: -100.0,\n  max: 8000.0,\n};\nMap.setCenter(-7.03125, 31.0529339857, 2);\nMap.addLayer(trueColor143, trueColor143Vis, 'True Color (143)');", "environment": "[]"}, {"name": "MODIS_006_MOD09GQ", "code": "var dataset = ee.ImageCollection('MODIS/006/MOD09GQ')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar falseColorVis = {\n  min: -100.0,\n  max: 8000.0,\n  bands: ['sur_refl_b02', 'sur_refl_b02', 'sur_refl_b01'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(dataset, falseColorVis, 'False Color');\n", "environment": "[]"}, {"name": "MODIS_006_MOD09Q1", "code": "var dataset = ee.ImageCollection('MODIS/006/MOD09Q1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar falseColorVis = {\n  min: -100.0,\n  max: 8000.0,\n  bands: ['sur_refl_b02', 'sur_refl_b02', 'sur_refl_b01'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(dataset, falseColorVis, 'False Color');\n", "environment": "[]"}, {"name": "MODIS_006_MOD10A1", "code": "var dataset = ee.ImageCollection('MODIS/006/MOD10A1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar snowCover = dataset.select('NDSI_Snow_Cover');\nvar snowCoverVis = {\n  min: 0.0,\n  max: 100.0,\n  palette: ['black', '0dffff', '0524ff', 'ffffff'],\n};\nMap.setCenter(-41.13, 76.35, 2);\nMap.addLayer(snowCover, snowCoverVis, 'Snow Cover');\n", "environment": "[]"}, {"name": "MODIS_006_MOD11A1", "code": "var dataset = ee.ImageCollection('MODIS/006/MOD11A1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar landSurfaceTemperature = dataset.select('LST_Day_1km');\nvar landSurfaceTemperatureVis = {\n  min: 13000.0,\n  max: 16500.0,\n  palette: [\n    '040274', '040281', '0502a3', '0502b8', '0502ce', '0502e6',\n    '0602ff', '235cb1', '307ef3', '269db1', '30c8e2', '32d3ef',\n    '3be285', '3ff38f', '86e26f', '3ae237', 'b5e22e', 'd6e21f',\n    'fff705', 'ffd611', 'ffb613', 'ff8b13', 'ff6e08', 'ff500d',\n    'ff0000', 'de0101', 'c21301', 'a71001', '911003'\n  ],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(\n    landSurfaceTemperature, landSurfaceTemperatureVis,\n    'Land Surface Temperature');\n", "environment": "[]"}, {"name": "MODIS_006_MOD11A2", "code": "var dataset = ee.ImageCollection('MODIS/006/MOD11A2')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar landSurfaceTemperature = dataset.select('LST_Day_1km');\nvar landSurfaceTemperatureVis = {\n  min: 14000.0,\n  max: 16000.0,\n  palette: [\n    '040274', '040281', '0502a3', '0502b8', '0502ce', '0502e6',\n    '0602ff', '235cb1', '307ef3', '269db1', '30c8e2', '32d3ef',\n    '3be285', '3ff38f', '86e26f', '3ae237', 'b5e22e', 'd6e21f',\n    'fff705', 'ffd611', 'ffb613', 'ff8b13', 'ff6e08', 'ff500d',\n    'ff0000', 'de0101', 'c21301', 'a71001', '911003'\n  ],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(\n    landSurfaceTemperature, landSurfaceTemperatureVis,\n    'Land Surface Temperature');\n", "environment": "[]"}, {"name": "MODIS_006_MOD13A1", "code": "var dataset = ee.ImageCollection('MODIS/006/MOD13A1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar ndvi = dataset.select('NDVI');\nvar ndviVis = {\n  min: 0.0,\n  max: 9000.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(ndvi, ndviVis, 'NDVI');\n", "environment": "[]"}, {"name": "MODIS_006_MOD13A2", "code": "var dataset = ee.ImageCollection('MODIS/006/MOD13A2')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar ndvi = dataset.select('NDVI');\nvar ndviVis = {\n  min: 0.0,\n  max: 9000.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(ndvi, ndviVis, 'NDVI');\n", "environment": "[]"}, {"name": "MODIS_006_MOD13Q1", "code": "var dataset = ee.ImageCollection('MODIS/006/MOD13Q1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar ndvi = dataset.select('NDVI');\nvar ndviVis = {\n  min: 0.0,\n  max: 8000.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(ndvi, ndviVis, 'NDVI');\n", "environment": "[]"}, {"name": "MODIS_006_MOD14A1", "code": "var dataset = ee.ImageCollection('MODIS/006/MOD14A1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar fireMaskVis = {\n  min: 0.0,\n  max: 6000.0,\n  bands: ['MaxFRP', 'FireMask', 'FireMask'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(dataset, fireMaskVis, 'Fire Mask');\n", "environment": "[]"}, {"name": "MODIS_006_MOD14A2", "code": "var dataset = ee.ImageCollection('MODIS/006/MOD14A2')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar fireMask = dataset.select('FireMask');\nvar fireMaskVis = {\n  min: 3.0,\n  max: 8.0,\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(fireMask, fireMaskVis, 'Fire Mask');\n", "environment": "[]"}, {"name": "MODIS_006_MOD15A2H", "code": "var collection = ee.ImageCollection('MODIS/006/MOD15A2H')\n                  .filterDate('2019-01-01', '2019-10-01');\n\nvar colorizedVis = {\n  min: 0,\n  max: 100,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\n\nMap.setCenter(-10.88, 40.94, 2);\nMap.addLayer(collection.select('Lai_500m'), colorizedVis, 'Lai');\nMap.addLayer(collection.select('Fpar_500m'), colorizedVis, 'Fpar');\n", "environment": "[]"}, {"name": "MODIS_006_MOD16A2", "code": "var dataset = ee.ImageCollection('MODIS/006/MOD16A2')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar evapotranspiration = dataset.select('ET');\nvar evapotranspirationVis = {\n  min: 0.0,\n  max: 300.0,\n  palette: [\n    'ffffff', 'fcd163', '99b718', '66a000', '3e8601', '207401', '056201',\n    '004c00', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(evapotranspiration, evapotranspirationVis, 'Evapotranspiration');\n", "environment": "[]"}, {"name": "MODIS_006_MOD17A2H", "code": "var dataset = ee.ImageCollection('MODIS/006/MOD17A2H')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\n\nvar gpp = dataset.select('Gpp');\nvar gppVis = {\n  min: 0.0,\n  max: 600.0,\n  palette: ['bbe029', '0a9501', '074b03'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(gpp, gppVis, 'GPP');\n", "environment": "[]"}, {"name": "MODIS_006_MOD17A3GFH", "code": "var dataset = ee.ImageCollection('MODIS/006/MOD17A3HGF')\n                  .filter(ee.Filter.date('2014-01-01', '2015-05-01'));\nvar npp = dataset.select('Npp');\nvar nppVis = {\n  min: 0.0,\n  max: 19000.0,\n  palette: ['bbe029', '0a9501', '074b03'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(npp, nppVis, 'NPP');\n", "environment": "[]"}, {"name": "MODIS_006_MOD17A3H", "code": "var dataset = ee.ImageCollection('MODIS/006/MOD17A3H')\n                  .filter(ee.Filter.date('2014-01-01', '2015-05-01'));\nvar npp = dataset.select('Npp');\nvar nppVis = {\n  min: 0.0,\n  max: 19000.0,\n  palette: ['bbe029', '0a9501', '074b03'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(npp, nppVis, 'NPP');\n", "environment": "[]"}, {"name": "MODIS_006_MOD17A3HGF", "code": "var dataset = ee.ImageCollection('MODIS/006/MOD17A3HGF');\n\nvar visualization = {\n  bands: ['Npp'],\n  min: 0.0,\n  max: 19000.0,\n  palette: ['bbe029', '0a9501', '074b03']\n};\n\nMap.centerObject(dataset);\n\nMap.addLayer(dataset, visualization, 'NPP');\n", "environment": "[]"}, {"name": "MODIS_006_MOD44B", "code": "var dataset = ee.ImageCollection('MODIS/006/MOD44B');\n\nvar visualization = {\n  bands: ['Percent_Tree_Cover'],\n  min: 0.0,\n  max: 100.0,\n  palette: ['bbe029', '0a9501', '074b03']\n};\n\nMap.centerObject(dataset);\n\nMap.addLayer(dataset, visualization, 'Percent Tree Cover');\n", "environment": "[]"}, {"name": "MODIS_006_MOD44W", "code": "var dataset = ee.ImageCollection('MODIS/006/MOD44W')\n                  .filter(ee.Filter.date('2015-01-01', '2015-05-01'));\nvar waterMask = dataset.select('water_mask');\nvar waterMaskVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: ['bcba99', '2d0491'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(waterMask, waterMaskVis, 'Water Mask');\n", "environment": "[]"}, {"name": "MODIS_006_MODOCGA", "code": "var dataset = ee.ImageCollection('MODIS/006/MODOCGA')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar falseColor =\n    dataset.select(['sur_refl_b11', 'sur_refl_b10', 'sur_refl_b09']);\nvar falseColorVis = {\n  min: 0.0,\n  max: 2000.0,\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(falseColor, falseColorVis, 'False Color');\n", "environment": "[]"}, {"name": "MODIS_006_MYD08_M3", "code": "var dataset = ee.ImageCollection('MODIS/006/MYD08_M3')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar aerosolOpticalDepth =\n    dataset.select('Aerosol_Optical_Depth_Land_Ocean_Mean_Mean');\nvar aerosolOpticalDepthVis = {\n  min: 0.0,\n  max: 3000.0,\n  palette: ['ffffff', '1303ff', '01ff09', 'ff2f00'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(\n    aerosolOpticalDepth, aerosolOpticalDepthVis, 'Aerosol Optical Depth');\n", "environment": "[]"}, {"name": "MODIS_006_MYD09A1", "code": "var dataset = ee.ImageCollection('MODIS/006/MYD09A1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar trueColor =\n    dataset.select(['sur_refl_b01', 'sur_refl_b04', 'sur_refl_b03']);\nvar trueColorVis = {\n  min: -100.0,\n  max: 3000.0,\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(trueColor, trueColorVis, 'True Color');\n", "environment": "[]"}, {"name": "MODIS_006_MYD09GA", "code": "var dataset = ee.ImageCollection('MODIS/006/MYD09GA')\n                  .filter(ee.Filter.date('2018-04-01', '2018-06-01'));\nvar trueColor143 =\n    dataset.select(['sur_refl_b01', 'sur_refl_b04', 'sur_refl_b03']);\nvar trueColor143Vis = {\n  min: -100.0,\n  max: 8000.0,\n};\nMap.setCenter(-7.03125, 31.0529339857, 2);\nMap.addLayer(trueColor143, trueColor143Vis, 'True Color (143)');\n", "environment": "[]"}, {"name": "MODIS_006_MYD09GQ", "code": "var dataset = ee.ImageCollection('MODIS/006/MYD09GQ')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar falseColorVis = {\n  min: -100.0,\n  max: 8000.0,\n  bands: ['sur_refl_b02', 'sur_refl_b02', 'sur_refl_b01'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(dataset, falseColorVis, 'False Color');\n", "environment": "[]"}, {"name": "MODIS_006_MYD09Q1", "code": "var dataset = ee.ImageCollection('MODIS/006/MYD09Q1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\n\nvar falseColorVis = {\n  min: -100.0,\n  max: 6000.0,\n  bands: ['sur_refl_b02', 'sur_refl_b02', 'sur_refl_b01'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(dataset, falseColorVis, 'False Color');\n", "environment": "[]"}, {"name": "MODIS_006_MYD10A1", "code": "var dataset = ee.ImageCollection('MODIS/006/MYD10A1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar snowCover = dataset.select('NDSI_Snow_Cover');\nvar snowCoverVis = {\n  min: 0.0,\n  max: 100.0,\n  palette: ['black', '0dffff', '0524ff', 'ffffff'],\n};\nMap.setCenter(-38.13, 40, 2);\nMap.addLayer(snowCover, snowCoverVis, 'Snow Cover');\n", "environment": "[]"}, {"name": "MODIS_006_MYD11A1", "code": "var dataset = ee.ImageCollection('MODIS/006/MYD11A1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar landSurfaceTemperature = dataset.select('LST_Day_1km');\nvar landSurfaceTemperatureVis = {\n  min: 13000.0,\n  max: 16500.0,\n  palette: [\n    '040274', '040281', '0502a3', '0502b8', '0502ce', '0502e6',\n    '0602ff', '235cb1', '307ef3', '269db1', '30c8e2', '32d3ef',\n    '3be285', '3ff38f', '86e26f', '3ae237', 'b5e22e', 'd6e21f',\n    'fff705', 'ffd611', 'ffb613', 'ff8b13', 'ff6e08', 'ff500d',\n    'ff0000', 'de0101', 'c21301', 'a71001', '911003'\n  ],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(\n    landSurfaceTemperature, landSurfaceTemperatureVis,\n    'Land Surface Temperature');\n", "environment": "[]"}, {"name": "MODIS_006_MYD11A2", "code": "var dataset = ee.ImageCollection('MODIS/006/MYD11A2')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar landSurfaceTemperature = dataset.select('LST_Day_1km');\nvar landSurfaceTemperatureVis = {\n  min: 14000.0,\n  max: 16000.0,\n  palette: [\n    '040274', '040281', '0502a3', '0502b8', '0502ce', '0502e6',\n    '0602ff', '235cb1', '307ef3', '269db1', '30c8e2', '32d3ef',\n    '3be285', '3ff38f', '86e26f', '3ae237', 'b5e22e', 'd6e21f',\n    'fff705', 'ffd611', 'ffb613', 'ff8b13', 'ff6e08', 'ff500d',\n    'ff0000', 'de0101', 'c21301', 'a71001', '911003'\n  ],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(\n    landSurfaceTemperature, landSurfaceTemperatureVis,\n    'Land Surface Temperature');\n", "environment": "[]"}, {"name": "MODIS_006_MYD13A1", "code": "var dataset = ee.ImageCollection('MODIS/006/MYD13A1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar ndvi = dataset.select('NDVI');\nvar ndviVis = {\n  min: 0.0,\n  max: 9000.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(ndvi, ndviVis, 'NDVI');\n", "environment": "[]"}, {"name": "MODIS_006_MYD13A2", "code": "var dataset = ee.ImageCollection('MODIS/006/MYD13A2')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar ndvi = dataset.select('NDVI');\nvar ndviVis = {\n  min: 0.0,\n  max: 9000.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(ndvi, ndviVis, 'NDVI');\n", "environment": "[]"}, {"name": "MODIS_006_MYD13Q1", "code": "var dataset = ee.ImageCollection('MODIS/006/MYD13Q1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar ndvi = dataset.select('NDVI');\nvar ndviVis = {\n  min: 0.0,\n  max: 8000.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(ndvi, ndviVis, 'NDVI');\n", "environment": "[]"}, {"name": "MODIS_006_MYD14A1", "code": "var dataset = ee.ImageCollection('MODIS/006/MYD14A1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar fireMaskVis = {\n  min: 0.0,\n  max: 6000.0,\n  bands: ['MaxFRP', 'FireMask', 'FireMask'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(dataset, fireMaskVis, 'Fire Mask');\n", "environment": "[]"}, {"name": "MODIS_006_MYD14A2", "code": "var dataset = ee.ImageCollection('MODIS/006/MYD14A2')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar fireMask = dataset.select('FireMask');\nvar fireMaskVis = {\n  min: 3.0,\n  max: 8.0,\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(fireMask, fireMaskVis, 'Fire Mask');\n", "environment": "[]"}, {"name": "MODIS_006_MYD15A2H", "code": "var collection = ee.ImageCollection('MODIS/006/MYD15A2H')\n                  .filterDate('2019-01-01', '2019-10-01');\n\nvar colorizedVis = {\n  min: 0,\n  max: 100,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\n\nMap.setCenter(-10.88, 40.94, 2);\nMap.addLayer(collection.select('Lai_500m'), colorizedVis, 'Lai');\nMap.addLayer(collection.select('Fpar_500m'), colorizedVis, 'Fpar');\n", "environment": "[]"}, {"name": "MODIS_006_MYD17A2H", "code": "var dataset = ee.ImageCollection('MODIS/006/MYD17A2H')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar gpp = dataset.select('Gpp');\nvar gppVis = {\n  min: 0.0,\n  max: 600.0,\n  palette: ['bbe029', '0a9501', '074b03'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(gpp, gppVis, 'GPP');\n", "environment": "[]"}, {"name": "MODIS_006_MYD17A3H", "code": "var dataset = ee.ImageCollection('MODIS/006/MYD17A3H')\n                  .filter(ee.Filter.date('2014-01-01', '2014-05-01'));\n\nvar npp = dataset.select('Npp');\nvar nppVis = {\n  min: 0.0,\n  max: 19000.0,\n  palette: ['bbe029', '0a9501', '074b03'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(npp, nppVis, 'NPP');\n", "environment": "[]"}, {"name": "MODIS_006_MYD17A3HGF", "code": "var dataset = ee.ImageCollection('MODIS/006/MYD17A3HGF')\n                  .filter(ee.Filter.date('2014-01-01', '2014-05-01'));\n\nvar npp = dataset.select('Npp');\nvar nppVis = {\n  min: 0.0,\n  max: 19000.0,\n  palette: ['bbe029', '0a9501', '074b03'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(npp, nppVis, 'NPP');\n", "environment": "[]"}, {"name": "MODIS_006_MYDOCGA", "code": "var dataset = ee.ImageCollection('MODIS/006/MYDOCGA')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar falseColor =\n    dataset.select(['sur_refl_b11', 'sur_refl_b10', 'sur_refl_b09']);\nvar falseColorVis = {\n  min: 0.0,\n  max: 2000.0,\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(falseColor, falseColorVis, 'False Color');\n", "environment": "[]"}, {"name": "MODIS_055_MOD17A3", "code": "var dataset = ee.ImageCollection('MODIS/055/MOD17A3')\n                  .filter(ee.Filter.date('2014-01-01', '2014-05-01'));\nvar npp = dataset.select('Npp');\nvar nppVis = {\n  min: 0.0,\n  max: 18000.0,\n  palette: ['bbe029', '0a9501', '074b03'],\n};\nMap.setCenter(6.746, 46.529, 3);\nMap.addLayer(npp, nppVis, 'NPP');\n", "environment": "[]"}, {"name": "MODIS_061_MCD15A3H", "code": "var dataset = ee.ImageCollection('MODIS/061/MCD15A3H');\nvar defaultVisualization = dataset.first().select('Fpar');\nvar defaultVisualizationVis = {\n  min: 0.0,\n  max: 100.0,\n  palette: ['e1e4b4', '999d60', '2ec409', '0a4b06'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(\n    defaultVisualization, defaultVisualizationVis, 'Default visualization');\n", "environment": "[]"}, {"name": "MODIS_061_MCD43A1", "code": "var dataset = ee.ImageCollection('MODIS/061/MCD43A1')\n                  .filter(ee.Filter.date('2018-05-01', '2018-07-01'));\nvar defaultVisualization = dataset.select([\n  'BRDF_Albedo_Parameters_Band1_iso', 'BRDF_Albedo_Parameters_Band4_iso',\n  'BRDF_Albedo_Parameters_Band3_iso'\n]);\nvar defaultVisualizationVis = {\n  min: 0.0,\n  max: 1400.0,\n  gamma: 2.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(\n    defaultVisualization, defaultVisualizationVis, 'Default visualization');\n", "environment": "[]"}, {"name": "MODIS_061_MCD64A1", "code": "var dataset = ee.ImageCollection('MODIS/061/MCD64A1')\n                  .filter(ee.Filter.date('2017-01-01', '2018-05-01'));\nvar burnedArea = dataset.select('BurnDate');\nvar burnedAreaVis = {\n  min: 30.0,\n  max: 341.0,\n  palette: ['4e0400', '951003', 'c61503', 'ff1901'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(burnedArea, burnedAreaVis, 'Burned Area');\n", "environment": "[]"}, {"name": "MODIS_061_MOD08_M3", "code": "var dataset = ee.ImageCollection('MODIS/061/MOD08_M3')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar aerosolOpticalDepth =\n    dataset.select('Aerosol_Optical_Depth_Land_Ocean_Mean_Mean');\nvar aerosolOpticalDepthVis = {\n  min: 0.0,\n  max: 3000.0,\n  palette: ['ffffff', '1303ff', '01ff09', 'ff2f00'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(\n    aerosolOpticalDepth, aerosolOpticalDepthVis, 'Aerosol Optical Depth');\n", "environment": "[]"}, {"name": "MODIS_061_MOD09A1", "code": "var dataset = ee.ImageCollection('MODIS/061/MOD09A1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar trueColor =\n    dataset.select(['sur_refl_b01', 'sur_refl_b04', 'sur_refl_b03']);\nvar trueColorVis = {\n  min: -100.0,\n  max: 3000.0,\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(trueColor, trueColorVis, 'True Color');\n", "environment": "[]"}, {"name": "MODIS_061_MOD09GA", "code": "var dataset = ee.ImageCollection('MODIS/061/MOD09GA')\n                  .filter(ee.Filter.date('2018-04-01', '2018-06-01'));\nvar trueColor143 =\n    dataset.select(['sur_refl_b01', 'sur_refl_b04', 'sur_refl_b03']);\nvar trueColor143Vis = {\n  min: -100.0,\n  max: 8000.0,\n};\nMap.setCenter(-7.03125, 31.0529339857, 2);\nMap.addLayer(trueColor143, trueColor143Vis, 'True Color (143)');\n", "environment": "[]"}, {"name": "MODIS_061_MOD09GQ", "code": "var dataset = ee.ImageCollection('MODIS/061/MOD09GQ')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar falseColorVis = {\n  min: -100.0,\n  max: 8000.0,\n  bands: ['sur_refl_b02', 'sur_refl_b02', 'sur_refl_b01'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(dataset, falseColorVis, 'False Color');\n", "environment": "[]"}, {"name": "MODIS_061_MOD09Q1", "code": "var dataset = ee.ImageCollection('MODIS/061/MOD09Q1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar falseColorVis = {\n  min: -100.0,\n  max: 8000.0,\n  bands: ['sur_refl_b02', 'sur_refl_b02', 'sur_refl_b01'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(dataset, falseColorVis, 'False Color');\n", "environment": "[]"}, {"name": "MODIS_061_MOD11A1", "code": "var dataset = ee.ImageCollection('MODIS/061/MOD11A1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar landSurfaceTemperature = dataset.select('LST_Day_1km');\nvar landSurfaceTemperatureVis = {\n  min: 13000.0,\n  max: 16500.0,\n  palette: [\n    '040274', '040281', '0502a3', '0502b8', '0502ce', '0502e6',\n    '0602ff', '235cb1', '307ef3', '269db1', '30c8e2', '32d3ef',\n    '3be285', '3ff38f', '86e26f', '3ae237', 'b5e22e', 'd6e21f',\n    'fff705', 'ffd611', 'ffb613', 'ff8b13', 'ff6e08', 'ff500d',\n    'ff0000', 'de0101', 'c21301', 'a71001', '911003'\n  ],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(\n    landSurfaceTemperature, landSurfaceTemperatureVis,\n    'Land Surface Temperature');\n", "environment": "[]"}, {"name": "MODIS_061_MOD11A2", "code": "var dataset = ee.ImageCollection('MODIS/061/MOD11A2')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar landSurfaceTemperature = dataset.select('LST_Day_1km');\nvar landSurfaceTemperatureVis = {\n  min: 14000.0,\n  max: 16000.0,\n  palette: [\n    '040274', '040281', '0502a3', '0502b8', '0502ce', '0502e6',\n    '0602ff', '235cb1', '307ef3', '269db1', '30c8e2', '32d3ef',\n    '3be285', '3ff38f', '86e26f', '3ae237', 'b5e22e', 'd6e21f',\n    'fff705', 'ffd611', 'ffb613', 'ff8b13', 'ff6e08', 'ff500d',\n    'ff0000', 'de0101', 'c21301', 'a71001', '911003'\n  ],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(\n    landSurfaceTemperature, landSurfaceTemperatureVis,\n    'Land Surface Temperature');\n", "environment": "[]"}, {"name": "MODIS_061_MOD13A1", "code": "var dataset = ee.ImageCollection('MODIS/061/MOD13A1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar ndvi = dataset.select('NDVI');\nvar ndviVis = {\n  min: 0.0,\n  max: 9000.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(ndvi, ndviVis, 'NDVI');\n", "environment": "[]"}, {"name": "MODIS_061_MOD13A2", "code": "var dataset = ee.ImageCollection('MODIS/061/MOD13A2')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar ndvi = dataset.select('NDVI');\nvar ndviVis = {\n  min: 0.0,\n  max: 9000.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(ndvi, ndviVis, 'NDVI');\n", "environment": "[]"}, {"name": "MODIS_061_MOD13Q1", "code": "var dataset = ee.ImageCollection('MODIS/061/MOD13Q1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar ndvi = dataset.select('NDVI');\nvar ndviVis = {\n  min: 0.0,\n  max: 8000.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(ndvi, ndviVis, 'NDVI');\n", "environment": "[]"}, {"name": "MODIS_061_MOD14A2", "code": "var dataset = ee.ImageCollection('MODIS/061/MOD14A2')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar fireMask = dataset.select('FireMask');\nvar fireMaskVis = {\n  min: 3.0,\n  max: 8.0,\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(fireMask, fireMaskVis, 'Fire Mask');\n", "environment": "[]"}, {"name": "MODIS_061_MOD15A2H", "code": "var collection = ee.ImageCollection('MODIS/061/MOD15A2H')\n                  .filterDate('2019-01-01', '2019-10-01');\n\nvar colorizedVis = {\n  min: 0,\n  max: 100,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\n\nMap.setCenter(-10.88, 40.94, 2);\nMap.addLayer(collection.select('Lai_500m'), colorizedVis, 'Lai');\nMap.addLayer(collection.select('Fpar_500m'), colorizedVis, 'Fpar');\n", "environment": "[]"}, {"name": "MODIS_061_MYD08_M3", "code": "var dataset = ee.ImageCollection('MODIS/006/MYD08_M3')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar aerosolOpticalDepth =\n    dataset.select('Aerosol_Optical_Depth_Land_Ocean_Mean_Mean');\nvar aerosolOpticalDepthVis = {\n  min: 0.0,\n  max: 3000.0,\n  palette: ['ffffff', '1303ff', '01ff09', 'ff2f00'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(\n    aerosolOpticalDepth, aerosolOpticalDepthVis, 'Aerosol Optical Depth');\n", "environment": "[]"}, {"name": "MODIS_061_MYD09A1", "code": "var dataset = ee.ImageCollection('MODIS/061/MYD09A1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar trueColor =\n    dataset.select(['sur_refl_b01', 'sur_refl_b04', 'sur_refl_b03']);\nvar trueColorVis = {\n  min: -100.0,\n  max: 3000.0,\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(trueColor, trueColorVis, 'True Color');\n", "environment": "[]"}, {"name": "MODIS_061_MYD09GA", "code": "var dataset = ee.ImageCollection('MODIS/061/MYD09GA')\n                  .filter(ee.Filter.date('2018-04-01', '2018-06-01'));\nvar trueColor143 =\n    dataset.select(['sur_refl_b01', 'sur_refl_b04', 'sur_refl_b03']);\nvar trueColor143Vis = {\n  min: -100.0,\n  max: 8000.0,\n};\nMap.setCenter(-7.03125, 31.0529339857, 2);\nMap.addLayer(trueColor143, trueColor143Vis, 'True Color (143)');\n", "environment": "[]"}, {"name": "MODIS_061_MYD09GQ", "code": "var dataset = ee.ImageCollection('MODIS/061/MYD09GQ')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar falseColorVis = {\n  min: -100.0,\n  max: 8000.0,\n  bands: ['sur_refl_b02', 'sur_refl_b02', 'sur_refl_b01'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(dataset, falseColorVis, 'False Color');\n", "environment": "[]"}, {"name": "MODIS_061_MYD09Q1", "code": "var dataset = ee.ImageCollection('MODIS/061/MYD09Q1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\n\nvar falseColorVis = {\n  min: -100.0,\n  max: 6000.0,\n  bands: ['sur_refl_b02', 'sur_refl_b02', 'sur_refl_b01'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(dataset, falseColorVis, 'False Color');\n", "environment": "[]"}, {"name": "MODIS_061_MYD11A1", "code": "var dataset = ee.ImageCollection('MODIS/061/MYD11A1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar landSurfaceTemperature = dataset.select('LST_Day_1km');\nvar landSurfaceTemperatureVis = {\n  min: 13000.0,\n  max: 16500.0,\n  palette: [\n    '040274', '040281', '0502a3', '0502b8', '0502ce', '0502e6',\n    '0602ff', '235cb1', '307ef3', '269db1', '30c8e2', '32d3ef',\n    '3be285', '3ff38f', '86e26f', '3ae237', 'b5e22e', 'd6e21f',\n    'fff705', 'ffd611', 'ffb613', 'ff8b13', 'ff6e08', 'ff500d',\n    'ff0000', 'de0101', 'c21301', 'a71001', '911003'\n  ],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(\n    landSurfaceTemperature, landSurfaceTemperatureVis,\n    'Land Surface Temperature');\n", "environment": "[]"}, {"name": "MODIS_061_MYD11A2", "code": "var dataset = ee.ImageCollection('MODIS/061/MYD11A2')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar landSurfaceTemperature = dataset.select('LST_Day_1km');\nvar landSurfaceTemperatureVis = {\n  min: 14000.0,\n  max: 16000.0,\n  palette: [\n    '040274', '040281', '0502a3', '0502b8', '0502ce', '0502e6',\n    '0602ff', '235cb1', '307ef3', '269db1', '30c8e2', '32d3ef',\n    '3be285', '3ff38f', '86e26f', '3ae237', 'b5e22e', 'd6e21f',\n    'fff705', 'ffd611', 'ffb613', 'ff8b13', 'ff6e08', 'ff500d',\n    'ff0000', 'de0101', 'c21301', 'a71001', '911003'\n  ],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(\n    landSurfaceTemperature, landSurfaceTemperatureVis,\n    'Land Surface Temperature');\n", "environment": "[]"}, {"name": "MODIS_061_MYD13A1", "code": "var dataset = ee.ImageCollection('MODIS/061/MYD13A1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar ndvi = dataset.select('NDVI');\nvar ndviVis = {\n  min: 0.0,\n  max: 9000.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(ndvi, ndviVis, 'NDVI');\n", "environment": "[]"}, {"name": "MODIS_061_MYD13A2", "code": "var dataset = ee.ImageCollection('MODIS/061/MYD13A2')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar ndvi = dataset.select('NDVI');\nvar ndviVis = {\n  min: 0.0,\n  max: 9000.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(ndvi, ndviVis, 'NDVI');\n", "environment": "[]"}, {"name": "MODIS_061_MYD13Q1", "code": "var dataset = ee.ImageCollection('MODIS/061/MYD13Q1')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar ndvi = dataset.select('NDVI');\nvar ndviVis = {\n  min: 0.0,\n  max: 8000.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(ndvi, ndviVis, 'NDVI');\n", "environment": "[]"}, {"name": "MODIS_061_MYD14A2", "code": "var dataset = ee.ImageCollection('MODIS/061/MYD14A2')\n                  .filter(ee.Filter.date('2018-01-01', '2018-05-01'));\nvar fireMask = dataset.select('FireMask');\nvar fireMaskVis = {\n  min: 3.0,\n  max: 8.0,\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(fireMask, fireMaskVis, 'Fire Mask');\n", "environment": "[]"}, {"name": "MODIS_061_MYD15A2H", "code": "var collection = ee.ImageCollection('MODIS/061/MYD15A2H')\n                  .filterDate('2019-01-01', '2019-10-01');\n\nvar colorizedVis = {\n  min: 0,\n  max: 100,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\n\nMap.setCenter(-10.88, 40.94, 2);\nMap.addLayer(collection.select('Lai_500m'), colorizedVis, 'Lai');\nMap.addLayer(collection.select('Fpar_500m'), colorizedVis, 'Fpar');\n", "environment": "[]"}, {"name": "MODIS_MCD43A4_006_BAI", "code": "var dataset = ee.ImageCollection('MODIS/MCD43A4_006_BAI')\n                  .filter(ee.Filter.date('2018-04-01', '2018-06-01'));\nvar scaled = dataset.select('BAI');\nvar scaledVis = {\n  min: 0.0,\n  max: 100.0,\n};\nMap.setCenter(-7.03125, 31.0529339857, 2);\nMap.addLayer(scaled, scaledVis, 'Scaled');", "environment": "[]"}, {"name": "MODIS_MCD43A4_006_EVI", "code": "var dataset = ee.ImageCollection('MODIS/MCD43A4_006_EVI')\n                  .filter(ee.Filter.date('2018-04-01', '2018-06-01'));\nvar colorized = dataset.select('EVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(-7.03125, 31.0529339857, 2);\nMap.addLayer(colorized, colorizedVis, 'Colorized');", "environment": "[]"}, {"name": "MODIS_MCD43A4_006_NDSI", "code": "var dataset = ee.ImageCollection('MODIS/MCD43A4_006_NDSI')\n                  .filter(ee.Filter.date('2018-04-01', '2018-06-01'));\nvar colorized = dataset.select('NDSI');\nvar colorizedVis = {\n  palette: ['000088', '0000FF', '8888FF', 'FFFFFF'],\n};\nMap.setCenter(-7.03125, 31.0529339857, 2);\nMap.addLayer(colorized, colorizedVis, 'Colorized');", "environment": "[]"}, {"name": "MODIS_MCD43A4_006_NDVI", "code": "var dataset = ee.ImageCollection('MODIS/MCD43A4_006_NDVI')\n                  .filter(ee.Filter.date('2018-04-01', '2018-06-01'));\nvar colorized = dataset.select('NDVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(-7.03125, 31.0529339857, 2);\nMap.addLayer(colorized, colorizedVis, 'Colorized');", "environment": "[]"}, {"name": "MODIS_MCD43A4_006_NDWI", "code": "var dataset = ee.ImageCollection('MODIS/MCD43A4_006_NDWI')\n                  .filter(ee.Filter.date('2018-04-01', '2018-06-01'));\nvar colorized = dataset.select('NDWI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff'],\n};\nMap.setCenter(-7.03125, 31.0529339857, 2);\nMap.addLayer(colorized, colorizedVis, 'Colorized');", "environment": "[]"}, {"name": "MODIS_MOD09GA_006_BAI", "code": "var dataset = ee.ImageCollection('MODIS/MOD09GA_006_BAI')\n                  .filter(ee.Filter.date('2018-04-01', '2018-06-01'));\nvar scaled = dataset.select('BAI');\nvar scaledVis = {\n  min: 0.0,\n  max: 100.0,\n};\nMap.setCenter(-7.03125, 31.0529339857, 2);\nMap.addLayer(scaled, scaledVis, 'Scaled');", "environment": "[]"}, {"name": "MODIS_MOD09GA_006_EVI", "code": "var dataset = ee.ImageCollection('MODIS/MOD09GA_006_EVI')\n                  .filter(ee.Filter.date('2018-04-01', '2018-06-01'));\nvar colorized = dataset.select('EVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(-7.03125, 31.0529339857, 2);\nMap.addLayer(colorized, colorizedVis, 'Colorized');", "environment": "[]"}, {"name": "MODIS_MOD09GA_006_NDSI", "code": "var dataset = ee.ImageCollection('MODIS/MOD09GA_006_NDSI')\n                  .filter(ee.Filter.date('2018-04-01', '2018-06-01'));\nvar colorized = dataset.select('NDSI');\nvar colorizedVis = {\n  palette: ['000088', '0000FF', '8888FF', 'FFFFFF'],\n};\nMap.setCenter(-7.03125, 31.0529339857, 2);\nMap.addLayer(colorized, colorizedVis, 'Colorized');", "environment": "[]"}, {"name": "MODIS_MOD09GA_006_NDVI", "code": "var dataset = ee.ImageCollection('MODIS/MOD09GA_006_NDVI')\n                  .filter(ee.Filter.date('2018-04-01', '2018-06-01'));\nvar colorized = dataset.select('NDVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(-7.03125, 31.0529339857, 2);\nMap.addLayer(colorized, colorizedVis, 'Colorized');", "environment": "[]"}, {"name": "MODIS_MOD09GA_006_NDWI", "code": "var dataset = ee.ImageCollection('MODIS/MOD09GA_006_NDWI')\n                  .filter(ee.Filter.date('2018-04-01', '2018-06-01'));\nvar colorized = dataset.select('NDWI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff'],\n};\nMap.setCenter(-7.03125, 31.0529339857, 2);\nMap.addLayer(colorized, colorizedVis, 'Colorized');", "environment": "[]"}, {"name": "MODIS_MOD10A1", "code": "var dataset = ee.ImageCollection('MODIS/MOD10A1')\n    .filterDate('2015-01-01', '2016-01-01');\n\nvar visualization = {\n  bands: ['Snow_Cover_Daily_Tile'],\n  min: 0.0,\n  max: 100.0,\n  palette: ['black', '0dffff', '0524ff', 'ffffff']\n};\n\nMap.setCenter(-41.13, 76.35, 3);\n\nMap.addLayer(dataset, visualization, 'Snow Cover');\n", "environment": "[]"}, {"name": "MODIS_MOD13A1", "code": "var dataset = ee.ImageCollection('MODIS/MOD13A1')\n                  .filter(ee.Filter.date('2014-04-01', '2014-06-01'));\nvar ndvi = dataset.select('NDVI');\nvar ndviVis = {\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(-7.03125, 31.0529339857, 2);\nMap.addLayer(ndvi, ndviVis, 'NDVI');\n", "environment": "[]"}, {"name": "MODIS_MOD44W_MOD44W_005_2000_02_24", "code": "var dataset = ee.Image('MODIS/MOD44W/MOD44W_005_2000_02_24');\nvar waterMask = dataset.select('water_mask');\nvar waterMaskVis = {\n  min: 0.0,\n  max: 1,\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(waterMask, waterMaskVis, 'Water Mask');\n", "environment": "[]"}, {"name": "MODIS_MYD09GA_006_BAI", "code": "var dataset = ee.ImageCollection('MODIS/MYD09GA_006_BAI')\n                  .filter(ee.Filter.date('2018-04-01', '2018-06-01'));\nvar scaled = dataset.select('BAI');\nvar scaledVis = {\n  min: 0.0,\n  max: 100.0,\n};\nMap.setCenter(-7.03125, 31.0529339857, 2);\nMap.addLayer(scaled, scaledVis, 'Scaled');", "environment": "[]"}, {"name": "MODIS_MYD09GA_006_EVI", "code": "var dataset = ee.ImageCollection('MODIS/MYD09GA_006_EVI')\n                  .filter(ee.Filter.date('2018-04-01', '2018-06-01'));\nvar colorized = dataset.select('EVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(-7.03125, 31.0529339857, 2);\nMap.addLayer(colorized, colorizedVis, 'Colorized');", "environment": "[]"}, {"name": "MODIS_MYD09GA_006_NDSI", "code": "var dataset = ee.ImageCollection('MODIS/MYD09GA_006_NDSI')\n                  .filter(ee.Filter.date('2018-04-01', '2018-06-01'));\nvar colorized = dataset.select('NDSI');\nvar colorizedVis = {\n  palette: ['000088', '0000FF', '8888FF', 'FFFFFF'],\n};\nMap.setCenter(-7.03125, 31.0529339857, 2);\nMap.addLayer(colorized, colorizedVis, 'Colorized');", "environment": "[]"}, {"name": "MODIS_MYD09GA_006_NDVI", "code": "var dataset = ee.ImageCollection('MODIS/MYD09GA_006_NDVI')\n                  .filter(ee.Filter.date('2018-04-01', '2018-06-01'));\nvar colorized = dataset.select('NDVI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(-7.03125, 31.0529339857, 2);\nMap.addLayer(colorized, colorizedVis, 'Colorized');", "environment": "[]"}, {"name": "MODIS_MYD09GA_006_NDWI", "code": "var dataset = ee.ImageCollection('MODIS/MYD09GA_006_NDWI')\n                  .filter(ee.Filter.date('2018-04-01', '2018-06-01'));\nvar colorized = dataset.select('NDWI');\nvar colorizedVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff'],\n};\nMap.setCenter(-7.03125, 31.0529339857, 2);\nMap.addLayer(colorized, colorizedVis, 'Colorized');", "environment": "[]"}, {"name": "MODIS_MYD13A1", "code": "var dataset = ee.ImageCollection('MODIS/MYD13A1')\n                  .filter(ee.Filter.date('2014-04-01', '2014-06-01'));\nvar ndvi = dataset.select('NDVI');\nvar ndviVis = {\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(-7.03125, 31.0529339857, 2);\nMap.addLayer(ndvi, ndviVis, 'NDVI');\n", "environment": "[]"}, {"name": "MODIS_NTSG_MOD16A2_105", "code": "var dataset = ee.ImageCollection('MODIS/NTSG/MOD16A2/105')\n                  .filter(ee.Filter.date('2014-04-01', '2014-06-01'));\nvar evapotranspiration = dataset.select('ET');\nvar evapotranspirationVis = {\n  min: 0.0,\n  max: 300.0,\n  palette:\n      ['a50000', 'ff4f1a', 'f1e342', 'c7ef1f', '05fff3', '1707ff', 'd90bff'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(evapotranspiration, evapotranspirationVis, 'Evapotranspiration');\n", "environment": "[]"}, {"name": "NASA_ASTER_GED_AG100_003", "code": "var dataset = ee.Image('NASA/ASTER_GED/AG100_003');\nvar elevation = dataset.select('elevation');\nvar elevationVis = {\n  min: -15.0,\n  max: 5000.0,\n  palette: [\n    '0602ff', '235cb1', '307ef3', '269db1', '30c8e2', '32d3ef', '3ae237',\n    'b5e22e', 'd6e21f', 'fff705', 'ffd611', 'ffb613', 'ff8b13', 'ff6e08',\n    'ff500d', 'ff0000', 'de0101', 'c21301'\n  ],\n};\nMap.setCenter(89.12, 37.72, 3);\nMap.addLayer(elevation, elevationVis, 'Elevation');", "environment": "[]"}, {"name": "NASA_FLDAS_NOAH01_C_GL_M_V001", "code": "var dataset=ee.ImageCollection('NASA/FLDAS/NOAH01/C/GL/M/V001')\n              .filter(ee.Filter.date('2018-11-01', '2018-12-01'));\nvar layer = dataset.select('Evap_tavg');\n\nvar band_viz = {\n  min: 0.0,\n  max: 0.00005,\n  opacity: 1.0,\n  palette: [\"black\", \"blue\", \"purple\", \"cyan\", \"green\", \"yellow\", \"red\"]\n};\n\nMap.setCenter(30.0, 30.0, 2);\nMap.addLayer(layer, band_viz, 'Average Evapotranspiration');\n\n", "environment": "[]"}, {"name": "NASA_GEOS-CF_v1_rpl_htf", "code": "var imageVisParamNO2 = {\n  'bands': ['NO2'],\n  'min': 6.96e-11,\n  'max': 4.42e-8,\n};\n\nvar imageVisParamT = {\n  'bands': ['T'],\n  'min': 220,\n  'max': 320,\n  'palette': ['d7191c', 'fdae61', 'ffffbf', 'abd9e9', '2c7bb6'],\n};\n\nvar geosCf = ee.ImageCollection('NASA/GEOS-CF/v1/rpl/htf');\n\nMap.setCenter(100, 20, 3);\n\nvar weeklyT =\n    geosCf.select('T').filterDate('2019-06-01', '2019-06-08').median();\nMap.addLayer(weeklyT, imageVisParamT, 'Weekly T', false, 1);\n\nvar NO2 = ee.Image('NASA/GEOS-CF/v1/rpl/htf/20190601_0000z');\nMap.addLayer(NO2, imageVisParamNO2, 'NO2', true, 1);\n", "environment": "[]"}, {"name": "NASA_GIMMS_3GV0", "code": "var dataset = ee.ImageCollection('NASA/GIMMS/3GV0')\n                  .filter(ee.Filter.date('2013-06-01', '2013-12-31'));\nvar ndvi = dataset.select('ndvi');\nvar ndviVis = {\n  min: -1.0,\n  max: 1.0,\n  palette: ['000000', 'f5f5f5', '119701'],\n};\nMap.setCenter(-88.6, 26.4, 1);\nMap.addLayer(ndvi, ndviVis, 'NDVI');\n", "environment": "[]"}, {"name": "NASA_GLDAS_V021_NOAH_G025_T3H", "code": "var dataset = ee.ImageCollection('NASA/GLDAS/V021/NOAH/G025/T3H')\n                  .filter(ee.Filter.date('2010-06-01', '2010-06-02'));\nvar averageSurfaceSkinTemperatureK = dataset.select('AvgSurfT_inst');\nvar averageSurfaceSkinTemperatureKVis = {\n  min: 250.0,\n  max: 300.0,\n  palette: ['1303ff', '42fff6', 'f3ff40', 'ff5d0f'],\n};\nMap.setCenter(71.72, 52.48, 3.0);\nMap.addLayer(\n    averageSurfaceSkinTemperatureK, averageSurfaceSkinTemperatureKVis,\n    'Average Surface Skin Temperature [K]');\n", "environment": "[]"}, {"name": "NASA_GLDAS_V20_NOAH_G025_T3H", "code": "var dataset = ee.ImageCollection('NASA/GLDAS/V20/NOAH/G025/T3H')\n                  .filter(ee.Filter.date('2010-06-01', '2010-06-02'));\nvar averageSurfaceSkinTemperatureK = dataset.select('AvgSurfT_inst');\nvar averageSurfaceSkinTemperatureKVis = {\n  min: 250.0,\n  max: 300.0,\n  palette: ['1303ff', '42fff6', 'f3ff40', 'ff5d0f'],\n};\nMap.setCenter(71.72, 52.48, 3.0);\nMap.addLayer(\n    averageSurfaceSkinTemperatureK, averageSurfaceSkinTemperatureKVis,\n    'Average Surface Skin Temperature [K]');\n", "environment": "[]"}, {"name": "NASA_GPM_L3_IMERG_MONTHLY_V06", "code": "var dataset = ee.ImageCollection('NASA/GPM_L3/IMERG_MONTHLY_V06')\n    .filterDate('2019-01-01', '2020-01-01');\n\n// Select the max precipitation and mask out low precipitation values.\nvar precipitation = dataset.select('precipitation').max();\nvar mask = precipitation.gt(0.25);\nvar precipitation = precipitation.updateMask(mask);\n\nvar palette = [ \n  '000096','0064ff', '00b4ff', '33db80', '9beb4a',\n  'ffeb00', 'ffb300', 'ff6400', 'eb1e00', 'af0000'\n];\nvar precipitationVis = {min: 0.0, max: 1.5, palette: palette};\nMap.addLayer(precipitation, precipitationVis, 'Precipitation');\nMap.setCenter(-76, 33, 3);\n", "environment": "[]"}, {"name": "NASA_GPM_L3_IMERG_V06", "code": "// GPM V6 30 minute data around hurricane Dorian for a single day.\nvar range = ee.Date('2019-09-03').getRange('day');\nvar dataset = ee.ImageCollection('NASA/GPM_L3/IMERG_V06')\n    .filter(ee.Filter.date(range));\n\n// Select the max precipitation and mask out low precipitation values.\nvar precipitation = dataset.select('precipitationCal').max();\nvar mask = precipitation.gt(0.5);\nvar precipitation = precipitation.updateMask(mask);\n\nvar palette = [\n  '000096','0064ff', '00b4ff', '33db80', '9beb4a',\n  'ffeb00', 'ffb300', 'ff6400', 'eb1e00', 'af0000'\n];\nvar precipitationVis = {min: 0.0, max: 15.0, palette: palette};\nMap.addLayer(precipitation, precipitationVis, 'Precipitation');\nMap.setCenter(-76, 33, 3);\n", "environment": "[]"}, {"name": "NASA_GRACE_MASS_GRIDS_LAND", "code": "var dataset = ee.ImageCollection('NASA/GRACE/MASS_GRIDS/LAND')\n                  .filter(ee.Filter.date('2016-08-01', '2016-08-30'));\nvar equivalentWaterThicknessCsr = dataset.select('lwe_thickness_csr');\nvar equivalentWaterThicknessCsrVis = {\n  min: -25.0,\n  max: 25.0,\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(\n    equivalentWaterThicknessCsr, equivalentWaterThicknessCsrVis,\n    'Equivalent Water Thickness CSR');\n", "environment": "[]"}, {"name": "NASA_GRACE_MASS_GRIDS_MASCON", "code": "var dataset = ee.ImageCollection('NASA/GRACE/MASS_GRIDS/MASCON')\n                  .filter(ee.Filter.date('2016-08-01', '2016-08-30'));\nvar equivalentWaterThickness = dataset.select('lwe_thickness');\nvar equivalentWaterThicknessVis = {\n  min: -25.0,\n  max: 25.0,\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(\n    equivalentWaterThickness, equivalentWaterThicknessVis,\n    'Equivalent Water Thickness');\n", "environment": "[]"}, {"name": "NASA_GRACE_MASS_GRIDS_MASCON_CRI", "code": "var dataset = ee.ImageCollection('NASA/GRACE/MASS_GRIDS/MASCON_CRI')\n                  .filter(ee.Filter.date('2016-08-01', '2016-08-30'));\nvar equivalentWaterThickness = dataset.select('lwe_thickness');\nvar equivalentWaterThicknessVis = {\n  min: -25.0,\n  max: 25.0,\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(\n    equivalentWaterThickness, equivalentWaterThicknessVis,\n    'Equivalent Water Thickness');\n", "environment": "[]"}, {"name": "NASA_GRACE_MASS_GRIDS_OCEAN", "code": "var dataset = ee.ImageCollection('NASA/GRACE/MASS_GRIDS/OCEAN')\n                  .filter(ee.Filter.date('2016-08-01', '2016-08-30'));\nvar equivalentWaterThicknessCsr = dataset.select('lwe_thickness_csr');\nvar equivalentWaterThicknessCsrVis = {\n  min: -10.0,\n  max: 10.0,\n};\nMap.setCenter(6.746, 46.529, 1);\nMap.addLayer(\n    equivalentWaterThicknessCsr, equivalentWaterThicknessCsrVis,\n    'Equivalent Water Thickness CSR');\n", "environment": "[]"}, {"name": "NASA_GRACE_MASS_GRIDS_OCEAN_EOFR", "code": "var dataset = ee.ImageCollection('NASA/GRACE/MASS_GRIDS/OCEAN_EOFR')\n                  .filter(ee.Filter.date('2016-08-01', '2016-08-30'));\nvar equivalentWaterThicknessCsr = dataset.select('lwe_thickness_csr');\nvar equivalentWaterThicknessCsrVis = {\n  min: -10.0,\n  max: 10.0,\n};\nMap.setCenter(6.746, 46.529, 1);\nMap.addLayer(\n    equivalentWaterThicknessCsr, equivalentWaterThicknessCsrVis,\n    'Equivalent Water Thickness CSR');\n", "environment": "[]"}, {"name": "NASA_GSFC_MERRA_aer_2", "code": "var dataset = ee.ImageCollection('NASA/GSFC/MERRA/aer/2')\n                  .filter(ee.Filter.date('2022-02-01', '2022-02-02'));\nvar black_carbon_column_u_wind_mass_flux = dataset.select('BCFLUXU');\nvar bccVis = {\n  min: -0.0000116,\n  max: 0.0000165,\n  palette: ['001137', '01abab', 'e7eb05', '620500']\n};\nMap.setCenter(-95.62, 39.91, 2);\nMap.addLayer(black_carbon_column_u_wind_mass_flux, bccVis);\n", "environment": "[]"}, {"name": "NASA_GSFC_MERRA_slv_2", "code": "var dataset = ee.ImageCollection('NASA/GSFC/MERRA/slv/2')\n                  .filter(ee.Filter.date('2022-02-01', '2022-02-02'));\nvar surface_pressure = dataset.select('PS');\nvar surface_pressure_vis = {\n  min: 81100,\n  max: 117000,\n  palette: ['001137', '01abab', 'e7eb05', '620500']\n};\nMap.setCenter(-95.62, 39.91, 2);\nMap.addLayer(surface_pressure, surface_pressure_vis);\n", "environment": "[]"}, {"name": "NASA_JPL_global_forest_canopy_height_2005", "code": "var dataset = ee.Image('NASA/JPL/global_forest_canopy_height_2005');\nvar forestCanopyHeight = dataset.select('1');\nvar forestCanopyHeightVis = {\n  min: 0.0,\n  max: 30.0,\n  palette: [\n    'ffffff', 'fcd163', '99b718', '66a000', '3e8601', '207401', '056201',\n    '004c00', '011301'\n  ],\n};\nMap.setCenter(-28.1, 28.3, 1);\nMap.addLayer(forestCanopyHeight, forestCanopyHeightVis, 'Forest Canopy Height');", "environment": "[]"}, {"name": "NASA_MEASURES_GFCC_TC_v3", "code": "var dataset = ee.ImageCollection('NASA/MEASURES/GFCC/TC/v3')\n                  .filter(ee.Filter.date('2015-01-01', '2015-12-31'));\nvar treeCanopyCover = dataset.select('tree_canopy_cover');\nvar treeCanopyCoverVis = {\n  min: 0.0,\n  max: 100.0,\n  palette: ['ffffff', 'afce56', '5f9c00', '0e6a00', '003800'],\n};\nMap.setCenter(-88.6, 26.4, 3);\nMap.addLayer(treeCanopyCover.mean(), treeCanopyCoverVis, 'Tree Canopy Cover');\n", "environment": "[]"}, {"name": "NASA_NASADEM_HGT_001", "code": "// Import the dataset and select the elevation band.\nvar dataset = ee.Image('NASA/NASADEM_HGT/001');\nvar elevation = dataset.select('elevation');\n\n// Add a white background image to the map.\nvar background = ee.Image(1);\nMap.addLayer(background, {min: 0, max: 1});\n\n// Set elevation visualization properties.\nvar elevationVis = {\n  min: 0,\n  max: 2000,\n};\n\n// Set elevation \u003c= 0 as transparent and add to the map.\nMap.addLayer(elevation.updateMask(elevation.gt(0)), elevationVis, 'Elevation');\nMap.setCenter(17.93, 7.71, 2);\n", "environment": "[]"}, {"name": "NASA_NEX-DCP30", "code": "var dataset = ee.ImageCollection('NASA/NEX-DCP30')\n                  .filter(ee.Filter.date('2018-07-01', '2018-07-30'));\nvar minimumAirTemperature = dataset.select('tasmin');\nvar minimumAirTemperatureVis = {\n  min: 265.0,\n  max: 285.0,\n  palette: ['blue', 'purple', 'cyan', 'green', 'yellow', 'red'],\n};\nMap.setCenter(-115.356, 38.686, 5);\nMap.addLayer(\n    minimumAirTemperature, minimumAirTemperatureVis, 'Minimum Air Temperature');\n", "environment": "[]"}, {"name": "NASA_NEX-DCP30_ENSEMBLE_STATS", "code": "var dataset = ee.ImageCollection('NASA/NEX-DCP30_ENSEMBLE_STATS')\n                  .filter(ee.Filter.date('2018-07-01', '2018-07-30'));\nvar monthlyMeanMinimumAirTemperature = dataset.select('tasmin_mean');\nvar monthlyMeanMinimumAirTemperatureVis = {\n  min: 247.0,\n  max: 311.0,\n  palette: ['blue', 'purple', 'cyan', 'green', 'yellow', 'red'],\n};\nMap.setCenter(-115.356, 38.686, 5);\nMap.addLayer(\n    monthlyMeanMinimumAirTemperature, monthlyMeanMinimumAirTemperatureVis,\n    'Monthly Mean Minimum Air Temperature');\n", "environment": "[]"}, {"name": "NASA_NEX-GDDP", "code": "var dataset = ee.ImageCollection('NASA/NEX-GDDP')\n                  .filter(ee.Filter.date('2018-07-01', '2018-07-02'));\nvar minimumAirTemperature = dataset.select('tasmin');\nvar minimumAirTemperatureVis = {\n  min: 240.0,\n  max: 300.0,\n  palette: ['blue', 'purple', 'cyan', 'green', 'yellow', 'red'],\n};\nMap.setCenter(71.72, 52.48, 3.0);\nMap.addLayer(\n    minimumAirTemperature, minimumAirTemperatureVis, 'Minimum Air Temperature');\n", "environment": "[]"}, {"name": "NASA_NLDAS_FORA0125_H002", "code": "var dataset = ee.ImageCollection('NASA/NLDAS/FORA0125_H002')\n                  .filter(ee.Filter.date('2018-07-01', '2018-07-30'));\nvar temperature = dataset.select('temperature');\nvar temperatureVis = {\n  min: -5.0,\n  max: 40.0,\n  palette: ['3d2bd8', '4e86da', '62c7d8', '91ed90', 'e4f178', 'ed6a4c'],\n};\nMap.setCenter(-110.21, 35.1, 4);\nMap.addLayer(temperature, temperatureVis, 'Temperature');\n", "environment": "[]"}, {"name": "NASA_OCEANDATA_MODIS-Aqua_L3SMI", "code": "var dataset = ee.ImageCollection('NASA/OCEANDATA/MODIS-Aqua/L3SMI')\n                  .filterDate('2016-01-01', '2016-01-31');\nvar remoteSensingReflectance =\n    dataset.select(['Rrs_645', 'Rrs_555', 'Rrs_443']);\nvar remoteSensingReflectanceVis = {\n  min: 0.0,\n  max: 0.011,\n};\nMap.setCenter(-52.12, -46.13, 4);\nMap.addLayer(\n    remoteSensingReflectance, remoteSensingReflectanceVis,\n    'Remote Sensing Reflectance');\n", "environment": "[]"}, {"name": "NASA_OCEANDATA_MODIS-Terra_L3SMI", "code": "var dataset = ee.ImageCollection('NASA/OCEANDATA/MODIS-Terra/L3SMI')\n                  .filterDate('2016-01-01', '2016-01-31');\nvar remoteSensingReflectance =\n    dataset.select(['Rrs_645', 'Rrs_555', 'Rrs_443']);\nvar remoteSensingReflectanceVis = {\n  min: 0.0,\n  max: 0.02,\n};\nMap.setCenter(-52.12, -46.13, 4);\nMap.addLayer(\n    remoteSensingReflectance, remoteSensingReflectanceVis,\n    'Remote Sensing Reflectance');\n", "environment": "[]"}, {"name": "NASA_OCEANDATA_SeaWiFS_L3SMI", "code": "var dataset = ee.ImageCollection('NASA/OCEANDATA/SeaWiFS/L3SMI')\n                  .filter(ee.Filter.date('2009-07-01', '2009-08-30'));\nvar remoteSensingReflectance =\n    dataset.select(['Rrs_670', 'Rrs_555', 'Rrs_443']);\nvar remoteSensingReflectanceVis = {\n  min: 0.0,\n  max: 0.03,\n};\nMap.setCenter(-52.12, -46.13, 1);\nMap.addLayer(\n    remoteSensingReflectance, remoteSensingReflectanceVis,\n    'Remote Sensing Reflectance');\n", "environment": "[]"}, {"name": "NASA_ORNL_DAYMET_V3", "code": "var dataset = ee.ImageCollection('NASA/ORNL/DAYMET_V3')\n                  .filter(ee.Filter.date('2017-04-01', '2017-04-30'));\nvar maximumTemperature = dataset.select('tmax');\nvar maximumTemperatureVis = {\n  min: -40.0,\n  max: 30.0,\n  palette: ['1621A2', 'white', 'cyan', 'green', 'yellow', 'orange', 'red'],\n};\nMap.setCenter(-110.21, 35.1, 4);\nMap.addLayer(maximumTemperature, maximumTemperatureVis, 'Maximum Temperature');\n", "environment": "[]"}, {"name": "NASA_ORNL_DAYMET_V4", "code": "var dataset = ee.ImageCollection('NASA/ORNL/DAYMET_V4')\n                  .filter(ee.Filter.date('2017-04-01', '2017-04-30'));\nvar maximumTemperature = dataset.select('tmax');\nvar maximumTemperatureVis = {\n  min: -40.0,\n  max: 30.0,\n  palette: ['1621A2', 'white', 'cyan', 'green', 'yellow', 'orange', 'red'],\n};\nMap.setCenter(-110.21, 35.1, 4);\nMap.addLayer(maximumTemperature, maximumTemperatureVis, 'Maximum Temperature');\n", "environment": "[]"}, {"name": "NASA_ORNL_biomass_carbon_density_v1", "code": "var dataset = ee.ImageCollection(\"NASA/ORNL/biomass_carbon_density/v1\");\n\nvar visualization = {\n  bands: ['agb'],\n  min: -50.0,\n  max: 80.0,\n  palette: ['d9f0a3', 'addd8e', '78c679', '41ab5d', '238443', '005a32']\n};\n\nMap.setCenter(-60.0, 7.0, 4);\n\nMap.addLayer(dataset, visualization, \"Aboveground biomass carbon\");", "environment": "[]"}, {"name": "NASA_USDA_HSL_SMAP10KM_soil_moisture", "code": "var dataset = ee.ImageCollection('NASA_USDA/HSL/SMAP10KM_soil_moisture')\n                  .filter(ee.Filter.date('2017-04-01', '2017-04-30'));\nvar soilMoisture = dataset.select('ssm');\nvar soilMoistureVis = {\n  min: 0.0,\n  max: 28.0,\n  palette: ['0300ff', '418504', 'efff07', 'efff07', 'ff0303'],\n};\nMap.setCenter(-6.746, 46.529, 2);\nMap.addLayer(soilMoisture, soilMoistureVis, 'Soil Moisture');\n", "environment": "[]"}, {"name": "NASA_USDA_HSL_SMAP_soil_moisture", "code": "var dataset = ee.ImageCollection('NASA_USDA/HSL/SMAP_soil_moisture')\n                  .filter(ee.Filter.date('2017-04-01', '2017-04-30'));\nvar soilMoisture = dataset.select('ssm');\nvar soilMoistureVis = {\n  min: 0.0,\n  max: 28.0,\n  palette: ['0300ff', '418504', 'efff07', 'efff07', 'ff0303'],\n};\nMap.setCenter(-6.746, 46.529, 2);\nMap.addLayer(soilMoisture, soilMoistureVis, 'Soil Moisture');\n", "environment": "[]"}, {"name": "NASA_USDA_HSL_soil_moisture", "code": "var dataset = ee.ImageCollection('NASA_USDA/HSL/soil_moisture')\n                  .filter(ee.Filter.date('2017-04-01', '2017-04-30'));\nvar soilMoisture = dataset.select('ssm');\nvar soilMoistureVis = {\n  min: 0.0,\n  max: 28.0,\n  palette: ['0300ff', '418504', 'efff07', 'efff07', 'ff0303'],\n};\nMap.setCenter(-6.746, 15.529, 2);\nMap.addLayer(soilMoisture, soilMoistureVis, 'Soil Moisture');\n", "environment": "[]"}, {"name": "NCEP_RE_sea_level_pressure", "code": "var dataset = ee.ImageCollection('NCEP_RE/sea_level_pressure')\n                  .filter(ee.Filter.date('2018-08-01', '2018-08-15'));\nvar seaLevelPressure = dataset.select('slp');\nvar seaLevelPressureVis = {\n  min: 96500.0,\n  max: 104500.0,\n  palette: ['800080', '0000ab', '008000', 'ffff00', 'ffa500', 'ff0000'],\n};\nMap.setCenter(-88.6, 26.4, 1);\nMap.addLayer(seaLevelPressure, seaLevelPressureVis, 'Sea Level Pressure');\n", "environment": "[]"}, {"name": "NCEP_RE_surface_temp", "code": "var dataset = ee.ImageCollection('NCEP_RE/surface_temp')\n                  .filter(ee.Filter.date('2018-08-01', '2018-08-15'));\nvar surfaceAirTemperature = dataset.select('air');\nvar surfaceAirTemperatureVis = {\n  min: 230.0,\n  max: 308.0,\n  palette: [\n    '800080', '0000ab', '0000ff', '008000', '19ff2b', 'a8f7ff', 'ffff00',\n    'd6d600', 'ffa500', 'ff6b01', 'ff0000'\n  ],\n};\nMap.setCenter(71.72, 52.48, 3.0);\nMap.addLayer(\n    surfaceAirTemperature, surfaceAirTemperatureVis, 'Surface Air Temperature');\n", "environment": "[]"}, {"name": "NCEP_RE_surface_wv", "code": "var dataset = ee.ImageCollection('NCEP_RE/surface_wv')\n                  .filter(ee.Filter.date('2018-08-01', '2018-08-15'));\nvar totalColumnWaterVapor = dataset.select('pr_wtr');\nvar totalColumnWaterVaporVis = {\n  min: 0.0,\n  max: 60.0,\n  palette: ['0000ff', '00ffff', '008000', 'ffff00', 'ff0000'],\n};\nMap.setCenter(-158.2, 2.81, 2);\nMap.addLayer(\n    totalColumnWaterVapor, totalColumnWaterVaporVis,\n    'Total Column Water Vapor');\n", "environment": "[]"}, {"name": "NOAA_CDR_ATMOS_NEAR_SURFACE_V2", "code": "var dataset = ee.ImageCollection('NOAA/CDR/ATMOS_NEAR_SURFACE/V2')\n                  .filter(ee.Filter.date('2017-05-01', '2017-05-02'));\nvar airTemperature = dataset.select('air_temperature');\nvar airTemperatureVis = {\n  min: 0.0,\n  max: 30.0,\n  palette: [\n    '040274', '040281', '0502a3', '0502b8', '0502ce', '0502e6',\n    '0602ff', '235cb1', '307ef3', '269db1', '30c8e2', '32d3ef',\n    '3be285', '3ff38f', '86e26f', '3ae237', 'b5e22e', 'd6e21f',\n    'fff705', 'ffd611', 'ffb613', 'ff8b13', 'ff6e08', 'ff500d',\n    'ff0000', 'de0101', 'c21301', 'a71001', '911003'\n  ],\n};\nMap.setCenter(28.3, -28.1, 1);\nMap.addLayer(airTemperature, airTemperatureVis, 'Air Temperature');\n", "environment": "[]"}, {"name": "NOAA_CDR_AVHRR_AOT_V3", "code": "var dataset = ee.ImageCollection('NOAA/CDR/AVHRR/AOT/V3')\n                  .filter(ee.Filter.date('2018-02-01', '2018-03-01'));\nvar aerosolOpticalThickness = dataset.select('aot');\nvar visParams = {\n  min: 0.0,\n  max: 0.5,\n  palette: ['800080', '0000ff', '00ffff', '008000', 'ffff00', 'ff0000'],\n};\nMap.setCenter(-88.6, 26.4, 3);\nMap.addLayer(\n    aerosolOpticalThickness, visParams,\n    'Aerosol Optical Thickness');\n", "environment": "[]"}, {"name": "NOAA_CDR_AVHRR_LAI_FAPAR_V4", "code": "var dataset = ee.ImageCollection('NOAA/CDR/AVHRR/LAI_FAPAR/V4')\n                  .filter(ee.Filter.date('2018-02-01', '2018-03-01'));\nvar leafAreaIndex = dataset.select('LAI');\nvar leafAreaIndexVis = {\n  min: 0.0,\n  max: 4000.0,\n  palette: ['3b0200', '977705', 'ca9f06', 'ffca09', '006a03', '003b02'],\n};\nMap.setCenter(20, 24.5, 2);\nMap.addLayer(leafAreaIndex, leafAreaIndexVis, 'Leaf Area Index');\n", "environment": "[]"}, {"name": "NOAA_CDR_AVHRR_LAI_FAPAR_V5", "code": "var dataset = ee.ImageCollection('NOAA/CDR/AVHRR/LAI_FAPAR/V5')\n                  .filter(ee.Filter.date('2018-02-01', '2018-03-01'));\nvar leafAreaIndex = dataset.select('LAI');\nvar leafAreaIndexVis = {\n  min: 0.0,\n  max: 4000.0,\n  palette: ['3b0200', '977705', 'ca9f06', 'ffca09', '006a03', '003b02'],\n};\nMap.setCenter(20, 24.5, 2);\nMap.addLayer(leafAreaIndex, leafAreaIndexVis, 'Leaf Area Index');\n", "environment": "[]"}, {"name": "NOAA_CDR_AVHRR_NDVI_V4", "code": "var dataset = ee.ImageCollection('NOAA/CDR/AVHRR/NDVI/V4')\n                  .filter(ee.Filter.date('2018-05-01', '2018-06-01'));\nvar ndvi = dataset.select('NDVI');\nvar ndviVis = {\n  min: -1000.0,\n  max: 5000.0,\n  palette: [\n    'ffffff', 'ce7e45', 'fcd163', 'c6ca02', '22cc04', '99b718', '207401',\n    '012e01'\n  ],\n};\nMap.setCenter(7.71, 17.93, 2);\nMap.addLayer(ndvi, ndviVis, 'NDVI');\n", "environment": "[]"}, {"name": "NOAA_CDR_AVHRR_NDVI_V5", "code": "var dataset = ee.ImageCollection('NOAA/CDR/AVHRR/NDVI/V5')\n                  .filter(ee.Filter.date('2018-05-01', '2018-06-01'));\nvar ndvi = dataset.select('NDVI');\nvar ndviVis = {\n  min: -1000.0,\n  max: 5000.0,\n  palette: [\n    'ffffff', 'ce7e45', 'fcd163', 'c6ca02', '22cc04', '99b718', '207401',\n    '012e01'\n  ],\n};\nMap.setCenter(7.71, 17.93, 2);\nMap.addLayer(ndvi, ndviVis, 'NDVI');\n", "environment": "[]"}, {"name": "NOAA_CDR_AVHRR_SR_V4", "code": "var dataset = ee.ImageCollection('NOAA/CDR/AVHRR/SR/V4')\n                  .filter(ee.Filter.date('2018-05-01', '2018-06-01'));\nvar surfaceReflectance = dataset.select('SREFL_CH1');\nvar surfaceReflectanceVis = {\n  min: -1000.0,\n  max: 9000.0,\n  palette: ['003b02', '006a03', '008d05', '01be07', '01ff09', 'ffffff'],\n};\nMap.setCenter(52.48, 71.72, 0);\nMap.addLayer(surfaceReflectance, surfaceReflectanceVis, 'Surface Reflectance');\n", "environment": "[]"}, {"name": "NOAA_CDR_AVHRR_SR_V5", "code": "var dataset = ee.ImageCollection('NOAA/CDR/AVHRR/SR/V5')\n                  .filter(ee.Filter.date('2018-05-01', '2018-06-01'));\nvar surfaceReflectance = dataset.select('SREFL_CH1');\nvar surfaceReflectanceVis = {\n  min: -1000.0,\n  max: 9000.0,\n  palette: ['003b02', '006a03', '008d05', '01be07', '01ff09', 'ffffff'],\n};\nMap.setCenter(52.48, 71.72, 1);\nMap.addLayer(surfaceReflectance, surfaceReflectanceVis, 'Surface Reflectance');\n", "environment": "[]"}, {"name": "NOAA_CDR_GRIDSAT-B1_V2", "code": "var dataset = ee.ImageCollection('NOAA/CDR/GRIDSAT-B1/V2')\n                  .filter(ee.Filter.date('2017-05-01', '2017-05-14'));\nvar brightnessTemp = dataset.select(['irwin_cdr', 'vschn', 'irwvp']);\nvar brightnessTempVis = {\n  min: 500.0,\n  max: 10000.0,\n};\nMap.setCenter(7.71, 17.93, 2);\nMap.addLayer(brightnessTemp, brightnessTempVis, 'Brightness Temperature');\n", "environment": "[]"}, {"name": "NOAA_CDR_HEAT_FLUXES_V2", "code": "var dataset = ee.ImageCollection('NOAA/CDR/HEAT_FLUXES/V2')\n                  .filter(ee.Filter.date('2017-05-01', '2017-05-14'));\nvar heatFluxVis = {\n  min: -50.0,\n  max: 500.0,\n  bands: [\n    'surface_upward_sensible_heat_flux',\n    'surface_upward_sensible_heat_flux',\n    'surface_upward_latent_heat_flux',\n  ]\n};\nMap.setCenter(28.61, -18.98, 2);\nMap.addLayer(dataset, heatFluxVis, 'Heat Flux');\n", "environment": "[]"}, {"name": "NOAA_CDR_OISST_V2", "code": "var dataset = ee.ImageCollection('NOAA/CDR/OISST/V2')\n                  .filter(ee.Filter.date('2017-05-01', '2017-05-14'));\nvar seaSurfaceTemperature = dataset.select('sst');\nvar visParams = {\n  min: -180.0,\n  max: 3000.0,\n  palette: [\n    '040274', '040281', '0502a3', '0502b8', '0502ce', '0502e6',\n    '0602ff', '235cb1', '307ef3', '269db1', '30c8e2', '32d3ef',\n    '3be285', '3ff38f', '86e26f', '3ae237', 'b5e22e', 'd6e21f',\n    'fff705', 'ffd611', 'ffb613', 'ff8b13', 'ff6e08', 'ff500d',\n    'ff0000', 'de0101', 'c21301', 'a71001', '911003'\n  ],\n};\nMap.setCenter(20.3, -20.39, 2);\nMap.addLayer(seaSurfaceTemperature, visParams, 'Sea Surface Temperature');\n", "environment": "[]"}, {"name": "NOAA_CDR_OISST_V2_1", "code": "var dataset = ee.ImageCollection('NOAA/CDR/OISST/V2_1')\n                  .filter(ee.Filter.date('2017-05-01', '2017-05-14'));\nvar seaSurfaceTemperature = dataset.select('sst');\nvar visParams = {\n  min: -180.0,\n  max: 3000.0,\n  palette: [\n    '040274', '040281', '0502a3', '0502b8', '0502ce', '0502e6',\n    '0602ff', '235cb1', '307ef3', '269db1', '30c8e2', '32d3ef',\n    '3be285', '3ff38f', '86e26f', '3ae237', 'b5e22e', 'd6e21f',\n    'fff705', 'ffd611', 'ffb613', 'ff8b13', 'ff6e08', 'ff500d',\n    'ff0000', 'de0101', 'c21301', 'a71001', '911003'\n  ],\n};\nMap.setCenter(20.3, -20.39, 2);\nMap.addLayer(seaSurfaceTemperature, visParams, 'Sea Surface Temperature');\n", "environment": "[]"}, {"name": "NOAA_CDR_PATMOSX_V53", "code": "var dataset = ee.ImageCollection('NOAA/CDR/PATMOSX/V53')\n                  .filter(ee.Filter.date('2017-05-01', '2017-05-14'));\nvar cloudEmissivityAndHeight = dataset.select(\n    ['cld_emiss_acha', 'cld_height_acha', 'cld_height_uncer_acha']);\nMap.setCenter(71.72, 52.48, 1);\nMap.addLayer(cloudEmissivityAndHeight, {}, 'Cloud Emissivity and Height');\n", "environment": "[]"}, {"name": "NOAA_CDR_SST_PATHFINDER_V53", "code": "var dataset = ee.ImageCollection('NOAA/CDR/SST_PATHFINDER/V53')\n                  .filter(ee.Filter.date('2014-05-01', '2014-05-14'));\nvar seaSurfaceTemperature = dataset.select('sea_surface_temperature');\nvar visParams = {\n  min: 0.0,\n  max: 2500.0,\n  palette: [\n    '030d81', '0519ff', '05e8ff', '11ff01', 'fbff01', 'ff9901', 'ff0000',\n    'ad0000'\n  ],\n};\nMap.setCenter(-121.99, -2.11, 2);\nMap.addLayer(seaSurfaceTemperature, visParams, 'Sea Surface Temperature');\n", "environment": "[]"}, {"name": "NOAA_CDR_SST_WHOI_V2", "code": "var dataset = ee.ImageCollection('NOAA/CDR/SST_WHOI/V2')\n                  .filter(ee.Filter.date('2018-03-01', '2018-03-14'));\nvar seaSurfaceTemperature = dataset.select('sea_surface_temperature');\nvar visParams = {\n  min: 0.0,\n  max: 30.0,\n  palette: [\n    '040274', '040281', '0502a3', '0502b8', '0502ce', '0502e6',\n    '0602ff', '235cb1', '307ef3', '269db1', '30c8e2', '32d3ef',\n    '3be285', '3ff38f', '86e26f', '3ae237', 'b5e22e', 'd6e21f',\n    'fff705', 'ffd611', 'ffb613', 'ff8b13', 'ff6e08', 'ff500d',\n    'ff0000', 'de0101', 'c21301', 'a71001', '911003'\n  ],\n};\nMap.setCenter(-4.92, -21.09, 2);\nMap.addLayer(seaSurfaceTemperature, visParams, 'Sea Surface Temperature');\n", "environment": "[]"}, {"name": "NOAA_CFSR", "code": "var dataset = ee.ImageCollection('NOAA/CFSR')\n                  .filter(ee.Filter.date('2019-04-01', '2019-04-07'));\nvar temperatureSurface = dataset.select('Temperature_surface');\nvar visParams = {\n  min: 192.0,\n  max: 339.0,\n  palette: [\"blue\", \"purple\", \"cyan\", \"green\", \"yellow\", \"red\"]\n};\nMap.setCenter(-88.6, 26.4, 1);\nMap.addLayer(temperatureSurface, visParams, 'Temperature Surface');\n", "environment": "[]"}, {"name": "NOAA_CFSV2_FOR6H", "code": "var dataset = ee.ImageCollection('NOAA/CFSV2/FOR6H')\n                  .filter(ee.Filter.date('2018-03-01', '2018-03-14'));\nvar temperatureAboveGround = dataset.select('Temperature_height_above_ground');\nvar visParams = {\n  min: 220.0,\n  max: 310.0,\n  palette: ['blue', 'purple', 'cyan', 'green', 'yellow', 'red'],\n};\nMap.setCenter(-88.6, 26.4, 1);\nMap.addLayer(temperatureAboveGround, visParams, 'Temperature Above Ground');\n", "environment": "[]"}, {"name": "NOAA_DMSP-OLS_CALIBRATED_LIGHTS_V4", "code": "var dataset = ee.ImageCollection('NOAA/DMSP-OLS/CALIBRATED_LIGHTS_V4')\n                  .filter(ee.Filter.date('2010-01-01', '2010-12-31'));\nvar nighttimeLights = dataset.select('avg_vis');\nvar nighttimeLightsVis = {\n  min: 3.0,\n  max: 60.0,\n};\nMap.setCenter(7.82, 49.1, 4);\nMap.addLayer(nighttimeLights, nighttimeLightsVis, 'Nighttime Lights');\n", "environment": "[]"}, {"name": "NOAA_DMSP-OLS_NIGHTTIME_LIGHTS", "code": "var dataset = ee.ImageCollection('NOAA/DMSP-OLS/NIGHTTIME_LIGHTS')\n                  .filter(ee.Filter.date('2010-01-01', '2010-12-31'));\nvar nighttimeLights = dataset.select('avg_vis');\nvar nighttimeLightsVis = {\n  min: 3.0,\n  max: 60.0,\n};\nMap.setCenter(7.82, 49.1, 4);\nMap.addLayer(nighttimeLights, nighttimeLightsVis, 'Nighttime Lights');\n", "environment": "[]"}, {"name": "NOAA_GFS0P25", "code": "var dataset = ee.ImageCollection('NOAA/GFS0P25')\n                  .filter(ee.Filter.date('2018-03-01', '2018-03-02'));\nvar temperatureAboveGround = dataset.select('temperature_2m_above_ground');\nvar visParams = {\n  min: -40.0,\n  max: 35.0,\n  palette: ['blue', 'purple', 'cyan', 'green', 'yellow', 'red'],\n};\nMap.setCenter(71.72, 52.48, 3.0);\nMap.addLayer(temperatureAboveGround, visParams, 'Temperature Above Ground');\n", "environment": "[]"}, {"name": "NOAA_GOES_16_FDCC", "code": "// NOAA GOES-16 conterminous fire product for a single time slice.\n\nvar image = ee.Image('NOAA/GOES/16/FDCC/2019297103632900000');\n\nvar area = image.select('Area');\nvar temp = image.select('Temp');\nvar dqf = image.select('DQF');\n\nvar xmin = -145;\nvar ymin = 15;\nvar xmax = -55;\nvar ymax = 54;\nvar geometry = ee.Geometry.Rectangle({\n  coords: [xmin, ymin, xmax, ymax], geodesic: false});\nMap.centerObject(geometry, 3);\n\nvar DQFVis = {\n  min: 0,\n  max: 5,\n  palette: [\n    'blanchedalmond',  // Good quality fire pixel\n    'olive',           // Good quality fire free land\n    'teal',            // Opaque cloud\n                       // Bad surface type, sunglint, LZA threshold exceeded,\n    'darkslateblue',   // off earth, or missing input data\n    'lemonchiffon',    // Bad input data\n    'burlywood'        // Algorithm failure\n  ]};\nMap.addLayer(dqf, DQFVis, 'DQF');\n\n// Fires are small enough that they are difficult to see at the scale of\n// an entire GOES image.  Buffer fires based on area to make them stand out.\nvar area = area.reduceToVectors({\n  geometry: geometry,\n  scale: 2000,\n  geometryType: 'centroid',\n  labelProperty: 'area',\n  maxPixels: 1e10,\n}).map(function(feature){\n  return feature.buffer(ee.Number(feature.get('area')).add(1).pow(1.4));\n});\nMap.addLayer(area, {color: 'orange'}, 'area');\n\n// Buffer fires based on temperature to make them stand out.\nvar temp = temp.reduceToVectors({\n  geometry: geometry,\n  scale: 2000,\n  geometryType: 'centroid',\n  labelProperty: 'temp',\n  maxPixels: 1e10,\n}).map(function(feature){\n  return feature.buffer(ee.Number(feature.get('temp')).add(2).pow(1.27));\n});\nMap.setCenter(-75, 43.0, 3);\nMap.addLayer(temp, {color: 'red'}, 'temp');\n", "environment": "[]"}, {"name": "NOAA_GOES_16_FDCF", "code": "// NOAA GOES-16 full disk fire product for a single time slice.\n\nvar image = ee.Image('NOAA/GOES/16/FDCF/2019167024053900000');\nvar area = image.select('Area');\nvar temp = image.select('Temp');\nvar dqf = image.select('DQF');\n\nvar xmin = -142;  // On station as GOES-E\nvar xmax = xmin + 135;\nMap.setCenter((xmin+xmax)/2, 15, 3);\nvar geometry = ee.Geometry.Rectangle([xmin, -65, xmax, 65], null, true);\n\nvar DQFVis = {\n  min: 0,\n  max: 5,\n  palette: [\n    'blanchedalmond',  // Good quality fire pixel\n    'olive',           // Good quality fire free land\n    'teal',            // Opaque cloud\n                       // Bad surface type, sunglint, LZA threshold exceeded,\n    'darkslateblue',   // off earth, or missing input data\n    'lemonchiffon',    // Bad input data\n    'burlywood'        // Algorithm failure\n  ]};\nMap.addLayer(dqf, DQFVis, 'DQF');\n\n// Fires are small enough that they are difficult to see at the scale of\n// an entire GOES image.  Buffer fires based on area to make them stand out.\nvar area = area.reduceToVectors({\n  geometry: geometry,\n  scale: 2000,\n  geometryType: 'centroid',\n  labelProperty: 'area',\n  maxPixels: 1e10,\n}).map(function(feature){\n  return feature.buffer(ee.Number(feature.get('area')).add(1).pow(1.76));\n});\nMap.addLayer(area, {color: 'orange'}, 'area');\n\n// Buffer fires based on temperature to make them stand out.\nvar temp = temp.reduceToVectors({\n  geometry: geometry,\n  scale: 2000,\n  geometryType: 'centroid',\n  labelProperty: 'temp',\n  maxPixels: 1e10,\n}).map(function(feature){\n  return feature.buffer(ee.Number(feature.get('temp')).add(2).pow(1.3));\n});\nMap.addLayer(temp, {color: 'red'}, 'temp');\n", "environment": "[]"}, {"name": "NOAA_GOES_16_MCMIPC", "code": "// Band aliases.\nvar BLUE = 'CMI_C01';\nvar RED = 'CMI_C02';\nvar VEGGIE = 'CMI_C03';\nvar GREEN = 'GREEN';\n// 16 pairs of CMI and DQF followed by Bah 2018 synthetic green.\n// Band numbers in the EE asset, 0-based.\nvar NUM_BANDS = 33;\n// Skipping the interleaved DQF bands.\nvar BLUE_BAND_INDEX = (1 - 1) * 2;\nvar RED_BAND_INDEX = (2 - 1) * 2;\nvar VEGGIE_BAND_INDEX = (3 - 1) * 2;\nvar GREEN_BAND_INDEX = NUM_BANDS - 1;\n\n// Visualization range for GOES RGB.\nvar GOES_MIN = 0.0;\nvar GOES_MAX = 0.7;  // Alternatively 1.0 or 1.3.\nvar GAMMA = 1.3;\n\nvar goesRgbViz = {\n  bands: [RED, GREEN, BLUE],\n  min: GOES_MIN,\n  max: GOES_MAX,\n  gamma: GAMMA\n};\n\nvar applyScaleAndOffset = function(image) {\n  image = ee.Image(image);\n  var bands = new Array(NUM_BANDS);\n  for (var i = 1; i \u003c 17; i++) {\n    var bandName = 'CMI_C' + (100 + i + '').slice(-2);\n    var offset = ee.Number(image.get(bandName + '_offset'));\n    var scale =  ee.Number(image.get(bandName + '_scale'));\n    bands[(i-1) * 2] = image.select(bandName).multiply(scale).add(offset);\n\n    var dqfName = 'DQF_C' + (100 + i + '').slice(-2);\n    bands[(i-1) * 2 + 1] = image.select(dqfName);\n  }\n\n  // Bah, Gunshor, Schmit, Generation of GOES-16 True Color Imagery without a\n  // Green Band, 2018. https://doi.org/10.1029/2018EA000379\n  // Green = 0.45 * Red + 0.10 * NIR + 0.45 * Blue\n  var green1 = bands[RED_BAND_INDEX].multiply(0.45);\n  var green2 = bands[VEGGIE_BAND_INDEX].multiply(0.10);\n  var green3 = bands[BLUE_BAND_INDEX].multiply(0.45);\n  var green = green1.add(green2).add(green3);\n  bands[GREEN_BAND_INDEX] = green.rename(GREEN);\n\n  return ee.Image(ee.Image(bands).copyProperties(image, image.propertyNames()));\n};\n\nvar collection = 'NOAA/GOES/16/MCMIPC/';\nvar imageName = '2020211203115800000';\nvar assetId = collection + imageName;\nvar image = applyScaleAndOffset(assetId);\nMap.setCenter(-75, 37, 5);\nMap.addLayer(image, goesRgbViz);\n", "environment": "[]"}, {"name": "NOAA_GOES_16_MCMIPF", "code": "// Band aliases.\nvar BLUE = 'CMI_C01';\nvar RED = 'CMI_C02';\nvar VEGGIE = 'CMI_C03';\nvar GREEN = 'GREEN';\n// 16 pairs of CMI and DQF followed by Bah 2018 synthetic green.\n// Band numbers in the EE asset, 0-based.\nvar NUM_BANDS = 33;\n// Skipping the interleaved DQF bands.\nvar BLUE_BAND_INDEX = (1 - 1) * 2;\nvar RED_BAND_INDEX = (2 - 1) * 2;\nvar VEGGIE_BAND_INDEX = (3 - 1) * 2;\nvar GREEN_BAND_INDEX = NUM_BANDS - 1;\n\n// Visualization range for GOES RGB.\nvar GOES_MIN = 0.0;\nvar GOES_MAX = 0.7;  // Alternatively 1.0 or 1.3.\nvar GAMMA = 1.3;\n\nvar goesRgbViz = {\n  bands: [RED, GREEN, BLUE],\n  min: GOES_MIN,\n  max: GOES_MAX,\n  gamma: GAMMA\n};\n\nvar applyScaleAndOffset = function(image) {\n  image = ee.Image(image);\n  var bands = new Array(NUM_BANDS);\n  for (var i = 1; i \u003c 17; i++) {\n    var bandName = 'CMI_C' + (100 + i + '').slice(-2);\n    var offset = ee.Number(image.get(bandName + '_offset'));\n    var scale =  ee.Number(image.get(bandName + '_scale'));\n    bands[(i-1) * 2] = image.select(bandName).multiply(scale).add(offset);\n\n    var dqfName = 'DQF_C' + (100 + i + '').slice(-2);\n    bands[(i-1) * 2 + 1] = image.select(dqfName);\n  }\n\n  // Bah, Gunshor, Schmit, Generation of GOES-16 True Color Imagery without a\n  // Green Band, 2018. https://doi.org/10.1029/2018EA000379\n  // Green = 0.45 * Red + 0.10 * NIR + 0.45 * Blue\n  var green1 = bands[RED_BAND_INDEX].multiply(0.45);\n  var green2 = bands[VEGGIE_BAND_INDEX].multiply(0.10);\n  var green3 = bands[BLUE_BAND_INDEX].multiply(0.45);\n  var green = green1.add(green2).add(green3);\n  bands[GREEN_BAND_INDEX] = green.rename(GREEN);\n\n  return ee.Image(ee.Image(bands).copyProperties(image, image.propertyNames()));\n};\n\nvar collection = 'NOAA/GOES/16/MCMIPF/';\nvar imageName = '2020210184019900000';\nvar assetId = collection + imageName;\nvar image = applyScaleAndOffset(assetId);\nMap.addLayer(image, goesRgbViz);\n", "environment": "[]"}, {"name": "NOAA_GOES_16_MCMIPM", "code": "// Demonstrates displaying GOES-16 Mesoscale images.\n\n// Band names.\nvar BLUE = 'CMI_C01';\nvar RED = 'CMI_C02';\nvar VEGGIE = 'CMI_C03';\nvar GREEN = 'GREEN';\n\n/**\n * Properly scales an MCMIPM image.\n *\n * @param {ee.Image} image An unaltered MCMIPM image.\n * @return {ee.Image}\n */\nvar applyScaleAndOffset = function(image) {\n  var names = image.select('CMI_C..').bandNames();\n\n  // Scale the radiance bands using the image's metadata.\n  var scales = names.map(function(name) {\n    return image.getNumber(ee.String(name).cat('_scale'));\n  });\n  var offsets = names.map(function(name) {\n    return image.getNumber(ee.String(name).cat('_offset'));\n  });\n  var scaled = image.select('CMI_C..')\n                   .multiply(ee.Image.constant(scales))\n                   .add(ee.Image.constant(offsets));\n\n  return image.addBands({srcImg: scaled, overwrite: true});\n};\n\n/**\n * Computes and adds a green radiance band to a MCMIPM image.\n *\n * The image must already have been properly scaled via applyScaleAndOffset.\n *\n * For more information on computing the green band, see:\n *   https://doi.org/10.1029/2018EA000379\n *\n * @param {ee.Image} image An image to add a green radiance band to. It\n *     must be the result of the applyScaleAndOffset function.\n * @return {ee.Image}\n */\nvar addGreenBand = function(image) {\n  function toBandExpression(bandName) { return 'b(\\'' + bandName + '\\')'; }\n\n  var B_BLUE = toBandExpression(BLUE);\n  var B_RED = toBandExpression(RED);\n  var B_VEGGIE = toBandExpression(VEGGIE);\n\n  // Green = 0.45 * Red + 0.10 * NIR + 0.45 * Blue\n  var GREEN_EXPR = GREEN + ' = 0.45 * ' + B_RED + ' + 0.10 * ' + B_VEGGIE +\n      ' + 0.45 * ' + B_BLUE;\n\n  var green = image.expression(GREEN_EXPR).select(GREEN);\n  return image.addBands(green);\n};\n\n\nvar COLLECTION = 'NOAA/GOES/16/MCMIPM';\n\n// Select a subset of the collection, correct the values, and add a green band.\nvar START = ee.Date('2020-09-02T20:40:00');\nvar END = START.advance(10, 'minutes');\nvar collection = ee.ImageCollection(COLLECTION)\n  .filterDate(START, END)\n  .map(applyScaleAndOffset)\n  .map(addGreenBand);\n\n// Separates the two domains.\nvar domain1_col = collection.filter('domain == 1');\nvar domain2_col = collection.filter('domain == 2');\n\n// Note that there are 20 assets, 10 in each domain.\nvar size = ee.String('sizes: collection = ').cat(collection.size());\nvar size1 = ee.String('domain1 = ').cat(domain1_col.size());\nvar size2 = ee.String('domain2 = ').cat(domain2_col.size());\nprint(size.cat('  \u2192  ').cat(size1).cat(' and ').cat(size2));\n\n// Visualization parameters.\nvar goesRgbViz = { bands: [RED, GREEN, BLUE], min: 0.0, max: 0.38, gamma: 1.3 };\n\n// Displays a sample image from domain 1 and 2.\nMap.addLayer(domain1_col.first(), goesRgbViz, 'Domain 1');\nMap.addLayer(domain2_col.first(), goesRgbViz, 'Domain 2');\n\nMap.setCenter(-86, 39, 5);\n", "environment": "[]"}, {"name": "NOAA_GOES_17_FDCC", "code": "// NOAA GOES-17 conterminous fire product for a single time slice.\n\nvar image = ee.Image('NOAA/GOES/17/FDCC/2019297090619600000');\n\nvar area = image.select('Area');\nvar temp = image.select('Temp');\nvar dqf = image.select('DQF');\n\nMap.centerObject(image, 3);\nvar geometry = image.geometry();\n\nvar DQFVis = {\n  min: 0,\n  max: 5,\n  palette: [\n    'blanchedalmond',  // Good quality fire pixel\n    'olive',           // Good quality fire free land\n    'teal',            // Opaque cloud\n                       // Bad surface type, sunglint, LZA threshold exceeded,\n    'darkslateblue',   // off earth, or missing input data\n    'lemonchiffon',    // Bad input data\n    'burlywood'        // Algorithm failure\n  ]};\nMap.addLayer(dqf, DQFVis, 'DQF');\n\n// Fires are small enough that they are difficult to see at the scale of\n// an entire GOES image.  Buffer fires based on area to make them stand out.\nvar area = area.reduceToVectors({\n  geometry: geometry,\n  scale: 2000,\n  geometryType: 'centroid',\n  labelProperty: 'area',\n  maxPixels: 1e10,\n}).map(function(feature){\n  return feature.buffer(ee.Number(feature.get('area')).add(1).pow(1.4));\n});\nMap.addLayer(area, {color: 'orange'}, 'area');\n\n// Buffer fires based on temperature to make them stand out.\nvar temp = temp.reduceToVectors({\n  geometry: geometry,\n  scale: 2000,\n  geometryType: 'centroid',\n  labelProperty: 'temp',\n  maxPixels: 1e10,\n}).map(function(feature){\n  return feature.buffer(ee.Number(feature.get('temp')).add(2).pow(1.2));\n});\nMap.setCenter(-137, 43.0, 5);\nMap.addLayer(temp, {color: 'red'}, 'temp');\n", "environment": "[]"}, {"name": "NOAA_GOES_17_FDCF", "code": "// NOAA GOES-17 full disk fire product for a single time slice.\n\nvar image = ee.Image('NOAA/GOES/17/FDCF/2019275191034100000');\nvar area = image.select('Area');\nvar temp = image.select('Temp');\nvar dqf = image.select('DQF');\n\nvar xmin = -205;  // On station as GOES-W\nvar xmax = xmin + 135;\nMap.setCenter((xmin+xmax)/2, 15, 3);\nvar geometry = ee.Geometry.Rectangle([xmin, -65, xmax, 65], null, true);\n\nvar DQFVis = {\n  min: 0,\n  max: 5,\n  palette: [\n    'blanchedalmond',  // Good quality fire pixel\n    'olive',           // Good quality fire free land\n    'teal',            // Opaque cloud\n                       // Bad surface type, sunglint, LZA threshold exceeded,\n    'darkslateblue',   // off earth, or missing input data\n    'lemonchiffon',    // Bad input data\n    'burlywood'        // Algorithm failure\n  ]};\nMap.addLayer(dqf, DQFVis, 'DQF');\n\n// Fires are small enough that they are difficult to see at the scale of\n// an entire GOES image.  Buffer fires based on area to make them stand out.\nvar area = area.reduceToVectors({\n  geometry: geometry,\n  scale: 2000,\n  geometryType: 'centroid',\n  labelProperty: 'area',\n  maxPixels: 1e10,\n}).map(function(feature){\n  return feature.buffer(ee.Number(feature.get('area')).add(1).pow(1.5));\n});\nMap.addLayer(area, {color: 'orange'}, 'area');\n\n// Buffer fires based on temperature to make them stand out.\nvar temp = temp.reduceToVectors({\n  geometry: geometry,\n  scale: 2000,\n  geometryType: 'centroid',\n  labelProperty: 'temp',\n  maxPixels: 1e10,\n}).map(function(feature){\n  return feature.buffer(ee.Number(feature.get('temp')).add(2).pow(1.2));\n});\nMap.addLayer(temp, {color: 'red'}, 'temp');\n", "environment": "[]"}, {"name": "NOAA_GOES_17_MCMIPC", "code": "// Band aliases.\nvar BLUE = 'CMI_C01';\nvar RED = 'CMI_C02';\nvar VEGGIE = 'CMI_C03';\nvar GREEN = 'GREEN';\n// 16 pairs of CMI and DQF followed by Bah 2018 synthetic green.\n// Band numbers in the EE asset, 0-based.\nvar NUM_BANDS = 33;\n// Skipping the interleaved DQF bands.\nvar BLUE_BAND_INDEX = (1 - 1) * 2;\nvar RED_BAND_INDEX = (2 - 1) * 2;\nvar VEGGIE_BAND_INDEX = (3 - 1) * 2;\nvar GREEN_BAND_INDEX = NUM_BANDS - 1;\n\n// Visualization range for GOES RGB.\nvar GOES_MIN = 0.0;\nvar GOES_MAX = 0.7;  // Alternatively 1.0 or 1.3.\nvar GAMMA = 1.3;\n\nvar goesRgbViz = {\n  bands: [RED, GREEN, BLUE],\n  min: GOES_MIN,\n  max: GOES_MAX,\n  gamma: GAMMA\n};\n\nvar applyScaleAndOffset = function(image) {\n  image = ee.Image(image);\n  var bands = new Array(NUM_BANDS);\n  for (var i = 1; i \u003c 17; i++) {\n    var bandName = 'CMI_C' + (100 + i + '').slice(-2);\n    var offset = ee.Number(image.get(bandName + '_offset'));\n    var scale =  ee.Number(image.get(bandName + '_scale'));\n    bands[(i-1) * 2] = image.select(bandName).multiply(scale).add(offset);\n\n    var dqfName = 'DQF_C' + (100 + i + '').slice(-2);\n    bands[(i-1) * 2 + 1] = image.select(dqfName);\n  }\n\n  // Bah, Gunshor, Schmit, Generation of GOES-16 True Color Imagery without a\n  // Green Band, 2018. https://doi.org/10.1029/2018EA000379\n  // Green = 0.45 * Red + 0.10 * NIR + 0.45 * Blue\n  var green1 = bands[RED_BAND_INDEX].multiply(0.45);\n  var green2 = bands[VEGGIE_BAND_INDEX].multiply(0.10);\n  var green3 = bands[BLUE_BAND_INDEX].multiply(0.45);\n  var green = green1.add(green2).add(green3);\n  bands[GREEN_BAND_INDEX] = green.rename(GREEN);\n\n  return ee.Image(ee.Image(bands).copyProperties(image, image.propertyNames()));\n};\n\nvar collection = 'NOAA/GOES/17/MCMIPC/';\nvar imageName = '2020211190617600000';\nvar assetId = collection + imageName;\nvar image = applyScaleAndOffset(assetId);\nMap.setCenter(-120, 43, 5);\nMap.addLayer(image, goesRgbViz);\n", "environment": "[]"}, {"name": "NOAA_GOES_17_MCMIPF", "code": "// Band aliases.\nvar BLUE = 'CMI_C01';\nvar RED = 'CMI_C02';\nvar VEGGIE = 'CMI_C03';\nvar GREEN = 'GREEN';\n// 16 pairs of CMI and DQF followed by Bah 2018 synthetic green.\n// Band numbers in the EE asset, 0-based.\nvar NUM_BANDS = 33;\n// Skipping the interleaved DQF bands.\nvar BLUE_BAND_INDEX = (1 - 1) * 2;\nvar RED_BAND_INDEX = (2 - 1) * 2;\nvar VEGGIE_BAND_INDEX = (3 - 1) * 2;\nvar GREEN_BAND_INDEX = NUM_BANDS - 1;\n\n// Visualization range for GOES RGB.\nvar GOES_MIN = 0.0;\nvar GOES_MAX = 0.7;  // Alternatively 1.0 or 1.3.\nvar GAMMA = 1.3;\n\nvar goesRgbViz = {\n  bands: [RED, GREEN, BLUE],\n  min: GOES_MIN,\n  max: GOES_MAX,\n  gamma: GAMMA\n};\n\nvar applyScaleAndOffset = function(image) {\n  image = ee.Image(image);\n  var bands = new Array(NUM_BANDS);\n  for (var i = 1; i \u003c 17; i++) {\n    var bandName = 'CMI_C' + (100 + i + '').slice(-2);\n    var offset = ee.Number(image.get(bandName + '_offset'));\n    var scale =  ee.Number(image.get(bandName + '_scale'));\n    bands[(i-1) * 2] = image.select(bandName).multiply(scale).add(offset);\n\n    var dqfName = 'DQF_C' + (100 + i + '').slice(-2);\n    bands[(i-1) * 2 + 1] = image.select(dqfName);\n  }\n\n  // Bah, Gunshor, Schmit, Generation of GOES-16 True Color Imagery without a\n  // Green Band, 2018. https://doi.org/10.1029/2018EA000379\n  // Green = 0.45 * Red + 0.10 * NIR + 0.45 * Blue\n  var green1 = bands[RED_BAND_INDEX].multiply(0.45);\n  var green2 = bands[VEGGIE_BAND_INDEX].multiply(0.10);\n  var green3 = bands[BLUE_BAND_INDEX].multiply(0.45);\n  var green = green1.add(green2).add(green3);\n  bands[GREEN_BAND_INDEX] = green.rename(GREEN);\n\n  return ee.Image(ee.Image(bands).copyProperties(image, image.propertyNames()));\n};\n\nvar collection = 'NOAA/GOES/17/MCMIPF/';\nvar imageName = '2020211200032100000';\nvar assetId = collection + imageName;\nvar image = applyScaleAndOffset(assetId);\nMap.addLayer(image, goesRgbViz);\n", "environment": "[]"}, {"name": "NOAA_GOES_17_MCMIPM", "code": "// Demonstrates displaying GOES-17 Mesoscale images.\n\n// Band names.\nvar BLUE = 'CMI_C01';\nvar RED = 'CMI_C02';\nvar VEGGIE = 'CMI_C03';\nvar GREEN = 'GREEN';\n\n/**\n * Properly scales an MCMIPM image.\n *\n * @param {ee.Image} image An unaltered MCMIPM image.\n * @return {ee.Image}\n */\nvar applyScaleAndOffset = function(image) {\n  var names = image.select('CMI_C..').bandNames();\n\n  // Scale the radiance bands using the image's metadata.\n  var scales = names.map(function(name) {\n    return image.getNumber(ee.String(name).cat('_scale'));\n  });\n  var offsets = names.map(function(name) {\n    return image.getNumber(ee.String(name).cat('_offset'));\n  });\n  var scaled = image.select('CMI_C..')\n                   .multiply(ee.Image.constant(scales))\n                   .add(ee.Image.constant(offsets));\n\n  return image.addBands({srcImg: scaled, overwrite: true});\n};\n\n/**\n * Computes and adds a green radiance band to a MCMIPM image.\n *\n * The image must already have been properly scaled via applyScaleAndOffset.\n *\n * For more information on computing the green band, see:\n *   https://doi.org/10.1029/2018EA000379\n *\n * @param {ee.Image} image An image to add a green radiance band to. It\n *     must be the result of the applyScaleAndOffset function.\n * @return {ee.Image}\n */\nvar addGreenBand = function(image) {\n  function toBandExpression(bandName) { return 'b(\\'' + bandName + '\\')'; }\n\n  var B_BLUE = toBandExpression(BLUE);\n  var B_RED = toBandExpression(RED);\n  var B_VEGGIE = toBandExpression(VEGGIE);\n\n  // Green = 0.45 * Red + 0.10 * NIR + 0.45 * Blue\n  var GREEN_EXPR = GREEN + ' = 0.45 * ' + B_RED + ' + 0.10 * ' + B_VEGGIE +\n      ' + 0.45 * ' + B_BLUE;\n\n  var green = image.expression(GREEN_EXPR).select(GREEN);\n  return image.addBands(green);\n};\n\n\nvar COLLECTION = 'NOAA/GOES/17/MCMIPM';\n\n// Select a subset of the collection, correct the values, and add a green band.\nvar START = ee.Date('2020-09-09T21:03:00');\nvar END = START.advance(10, 'minutes');\nvar collection = ee.ImageCollection(COLLECTION)\n  .filterDate(START, END)\n  .map(applyScaleAndOffset)\n  .map(addGreenBand);\n\n// Separates the two domains.\nvar domain1_col = collection.filter('domain == 1');\nvar domain2_col = collection.filter('domain == 2');\n\n// Note that there are 20 assets, 10 in each domain.\nvar size = ee.String('sizes: collection = ').cat(collection.size());\nvar size1 = ee.String('domain1 = ').cat(domain1_col.size());\nvar size2 = ee.String('domain2 = ').cat(domain2_col.size());\nprint(size.cat('  \u2192  ').cat(size1).cat(' and ').cat(size2));\n\n// Visualization parameters.\nvar goesRgbViz = { bands: [RED, GREEN, BLUE], min: 0.0, max: 0.38, gamma: 1.3 };\n\n// Displays a sample image from domain 1 and 2.\nMap.addLayer(domain1_col.first(), goesRgbViz, 'Domain 1');\nMap.addLayer(domain2_col.first(), goesRgbViz, 'Domain 2');\n\nMap.setCenter(-133, 50, 3);\n", "environment": "[]"}, {"name": "NOAA_NCEP_DOE_RE2_total_cloud_coverage", "code": "// Import the dataset, filter the first five months of 2020.\nvar dataset = ee.ImageCollection('NOAA/NCEP_DOE_RE2/total_cloud_coverage')\n                  .filter(ee.Filter.date('2020-01-01', '2020-06-01'));\n\n// Select the total cloud cover band.\nvar totalCloudCoverage = dataset.select('tcdc');\n\n// Reduce the image collection to per-pixel mean.\nvar totalCloudCoverageMean = totalCloudCoverage.mean();\n\n// Define visualization parameters.\nvar vis = {\n  min: 0,\n  max: 80,  // dataset max is 100\n  palette: ['black', 'white'],\n};\n\n// Display the dataset.\nMap.setCenter(0, 20, 2);\nMap.addLayer(totalCloudCoverageMean, vis, 'Total Cloud Coverage Data', false);\n\n// Display a visualization image with opacity defined by cloud cover.\nvar visImg = totalCloudCoverageMean.visualize(vis)\n  .updateMask(totalCloudCoverageMean.divide(100));\nMap.addLayer(visImg, null, 'Total Cloud Coverage Vis.', true);\n", "environment": "[]"}, {"name": "NOAA_NGDC_ETOPO1", "code": "var dataset = ee.Image('NOAA/NGDC/ETOPO1');\nvar elevation = dataset.select('bedrock');\nvar elevationVis = {\n  min: -7000.0,\n  max: 3000.0,\n  palette: ['011de2', 'afafaf', '3603ff', 'fff477', 'b42109'],\n};\nMap.setCenter(-37.62, 25.8, 2);\nMap.addLayer(elevation, elevationVis, 'Elevation');", "environment": "[]"}, {"name": "NOAA_NHC_HURDAT2_atlantic", "code": "// Show hurricane tracks and points for 2017.\nvar hurricanes = ee.FeatureCollection('NOAA/NHC/HURDAT2/atlantic');\n\nvar year = '2017';\nvar points = hurricanes.filter(ee.Filter.date(ee.Date(year).getRange('year')));\n\n// Find all of the hurricane ids.\nvar GetId = function(point) {\n  return ee.Feature(point).get('id');\n};\nvar storm_ids = points.toList(1000).map(GetId).distinct();\n\n// Create a line for each hurricane.\nvar lines = ee.FeatureCollection(storm_ids.map(function(storm_id){\n  var pts = points.filter(ee.Filter.eq('id', ee.String(storm_id)));\n  pts = pts.sort('system:time_start');\n  var line = ee.Geometry.LineString(pts.geometry().coordinates());\n  var feature = ee.Feature(line);\n  return feature.set('id', storm_id);\n}));\n\nMap.addLayer(lines, {color: 'red'}, 'tracks');\nMap.addLayer(points, {color: 'black'}, 'points');\n\nMap.setCenter(-53, 36, 3);\n", "environment": "[]"}, {"name": "NOAA_NHC_HURDAT2_atlantic_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('NOAA/NHC/HURDAT2/atlantic_FeatureView');\n\nvar visParams = {\n  isVisible: false,\n  pointSize: 20,\n  rules: [\n    {\n      filter: ee.Filter.eq('year', 2018),\n      isVisible: true,\n      pointFillColor: {\n        property: 'max_wind_kts',\n        mode: 'linear',\n        palette: ['f1eef6', 'd7b5d8', 'df65b0', 'ce1256'],\n        min: 15,\n        max: 115\n      }\n    }\n  ]\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('2018 hurricane max wind speed');\n\nMap.setLocked(false, 4);\nMap.setCenter(-62.25, 32.19, 4);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "NOAA_NHC_HURDAT2_pacific", "code": "// Show hurricane tracks and points for 1993.\nvar hurricanes = ee.FeatureCollection('NOAA/NHC/HURDAT2/pacific');\n\nvar year = '1993';\nvar points = hurricanes.filter(ee.Filter.date(ee.Date(year).getRange('year')));\n\n// Find all of the hurricane ids.\nvar GetId = function(point) {\n  return ee.Feature(point).get('id');\n};\nvar storm_ids = points.toList(1000).map(GetId).distinct();\n\n// Create a line for each hurricane.\nvar lines = ee.FeatureCollection(storm_ids.map(function(storm_id){\n  var pts = points.filter(ee.Filter.eq('id', ee.String(storm_id)));\n  pts = pts.sort('system:time_start');\n  var line = ee.Geometry.LineString(pts.geometry().coordinates());\n  var feature = ee.Feature(line);\n  return feature.set('id', storm_id);\n}));\n\nMap.addLayer(lines, {color: 'red'}, 'tracks');\nMap.addLayer(points, {color: 'black'}, 'points');\n\nMap.setCenter(210, 30, 3);\n", "environment": "[]"}, {"name": "NOAA_NHC_HURDAT2_pacific_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('NOAA/NHC/HURDAT2/pacific_FeatureView');\n\nvar visParams = {\n  isVisible: false,\n  pointSize: 20,\n  rules: [\n    {\n      filter: ee.Filter.eq('year', 2018),\n      isVisible: true,\n      pointFillColor: {\n        property: 'max_wind_kts',\n        mode: 'linear',\n        palette: ['f1eef6', 'd7b5d8', 'df65b0', 'ce1256'],\n        min: 15,\n        max: 140\n      }\n    }\n  ]\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('2018 hurricane max wind speed');\n\nMap.setLocked(false, 4);\nMap.setCenter(-130, 20, 4);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "NOAA_NWS_RTMA", "code": "var dataset = ee.ImageCollection('NOAA/NWS/RTMA')\n                  .filter(ee.Filter.date('2018-03-01', '2018-03-02'));\nvar windSpeed = dataset.select('WIND');\nvar windSpeedVis = {\n  min: 0.0,\n  max: 12.0,\n  palette: ['001137', '01abab', 'e7eb05', '620500'],\n};\nMap.setCenter(-95.62, 39.91, 4);\nMap.addLayer(windSpeed, windSpeedVis, 'Wind Speed');\n", "environment": "[]"}, {"name": "NOAA_PERSIANN-CDR", "code": "var dataset = ee.ImageCollection('NOAA/PERSIANN-CDR')\n                  .filter(ee.Filter.date('2017-05-01', '2017-05-02'));\nvar precipitation = dataset.select('precipitation');\nvar precipitationVis = {\n  min: 0.0,\n  max: 50.0,\n  palette: ['3907ff', '03fff3', '28ff25', 'fbff09', 'ff1105'],\n};\nMap.setCenter(113.03, 3.34, 3);\nMap.addLayer(precipitation, precipitationVis, 'Precipitation');\n", "environment": "[]"}, {"name": "NOAA_VIIRS_001_VNP09GA", "code": "var dataset = ee.ImageCollection('NOAA/VIIRS/001/VNP09GA')\n                  .filter(ee.Filter.date('2017-05-01', '2017-05-31'));\nvar rgb = dataset.select(['M5', 'M4', 'M3']);\nvar rgbVis = {\n  min: 0.0,\n  max: 3000.0,\n};\nMap.setCenter(17.93, 7.71, 2);\nMap.addLayer(rgb, rgbVis, 'RGB');\n", "environment": "[]"}, {"name": "NOAA_VIIRS_001_VNP13A1", "code": "var dataset = ee.ImageCollection(\"NOAA/VIIRS/001/VNP13A1\");\nvar mean_evi_january_2018 = dataset\n    .filterDate('2018-01-01', '2018-01-31')\n    .select('EVI')\n    .mean();\nvar evi_vis = {\n  min: 0.0,\n  max: 10000.0,\n  palette: [\"000\", \"040\", \"080\", \"0B0\", \"0F0\"],\n};\nMap.setCenter(95.571, 27.808, 8);\nMap.addLayer(mean_evi_january_2018, evi_vis, 'Mean EVI January 2018');\n", "environment": "[]"}, {"name": "NOAA_VIIRS_DNB_MONTHLY_V1_VCMCFG", "code": "var dataset = ee.ImageCollection('NOAA/VIIRS/DNB/MONTHLY_V1/VCMCFG')\n                  .filter(ee.Filter.date('2017-05-01', '2017-05-31'));\nvar nighttime = dataset.select('avg_rad');\nvar nighttimeVis = {min: 0.0, max: 60.0};\nMap.setCenter(-77.1056, 38.8904, 8);\nMap.addLayer(nighttime, nighttimeVis, 'Nighttime');\n", "environment": "[]"}, {"name": "NOAA_VIIRS_DNB_MONTHLY_V1_VCMSLCFG", "code": "var dataset = ee.ImageCollection('NOAA/VIIRS/DNB/MONTHLY_V1/VCMSLCFG')\n                  .filter(ee.Filter.date('2017-05-01', '2017-05-31'));\nvar nighttime = dataset.select('avg_rad');\nvar nighttimeVis = {min: 0.0, max: 60.0};\nMap.setCenter(-77.1056, 38.8904, 8);\nMap.addLayer(nighttime, nighttimeVis, 'Nighttime');\n", "environment": "[]"}, {"name": "NRCan_CDEM", "code": "var dataset = ee.ImageCollection('NRCan/CDEM');\nvar elevation = dataset.select('elevation');\nvar elevationVis = {\n  min: -50.0,\n  max: 1500.0,\n  palette: ['0905ff', 'ffefc4', 'ffffff'],\n};\nMap.setCenter(-139.3643, 63.3213, 9);\nMap.addLayer(elevation, elevationVis, 'Elevation');", "environment": "[]"}, {"name": "OREGONSTATE_PRISM_AN81d", "code": "var dataset = ee.ImageCollection('OREGONSTATE/PRISM/AN81d')\n                  .filter(ee.Filter.date('2018-08-01', '2018-08-15'));\nvar precipitation = dataset.select('ppt');\nvar precipitationVis = {\n  min: 0.0,\n  max: 50.0,\n  palette: ['red', 'yellow', 'green', 'cyan', 'purple'],\n};\nMap.setCenter(-100.55, 40.71, 4);\nMap.addLayer(precipitation, precipitationVis, 'Precipitation');\n", "environment": "[]"}, {"name": "OREGONSTATE_PRISM_AN81m", "code": "var dataset = ee.ImageCollection('OREGONSTATE/PRISM/AN81m')\n                  .filter(ee.Filter.date('2018-07-01', '2018-07-31'));\nvar precipitation = dataset.select('ppt');\nvar precipitationVis = {\n  min: 0.0,\n  max: 300.0,\n  palette: ['red', 'yellow', 'green', 'cyan', 'purple'],\n};\nMap.setCenter(-100.55, 40.71, 4);\nMap.addLayer(precipitation, precipitationVis, 'Precipitation');\n", "environment": "[]"}, {"name": "OREGONSTATE_PRISM_Norm81m", "code": "var dataset = ee.ImageCollection('OREGONSTATE/PRISM/Norm81m');\nvar precipitation = dataset.select('ppt');\nvar precipitationVis = {\n  min: 0.0,\n  max: 300.0,\n  palette: ['red', 'yellow', 'green', 'cyan', 'purple'],\n};\nMap.setCenter(-100.55, 40.71, 0);\nMap.addLayer(precipitation, precipitationVis, 'Precipitation');\n", "environment": "[]"}, {"name": "OSU_GIMP_2000_ICE_OCEAN_MASK", "code": "var dataset = ee.Image('OSU/GIMP/2000_ICE_OCEAN_MASK');\nvar oceanAndIceMaskVis = {\n  min: 0.0,\n  max: 1.0,\n  bands: ['ice_mask', 'ice_mask', 'ocean_mask'],\n};\nMap.setCenter(-41.0, 74.0, 4);\nMap.addLayer(dataset, oceanAndIceMaskVis, 'Ocean and Ice Mask');\n", "environment": "[]"}, {"name": "OSU_GIMP_2000_IMAGERY_MOSAIC", "code": "var dataset = ee.Image('OSU/GIMP/2000_IMAGERY_MOSAIC');\nvar greenlandImage = dataset.select(['B3', 'B2', 'B1']);\nvar visParams = {\n  min: 0.0,\n  max: 255.0,\n};\nMap.setCenter(-29.1605, 70.4, 9);\nMap.addLayer(greenlandImage, visParams, 'Greenland Pansharpened Image');\n", "environment": "[]"}, {"name": "OSU_GIMP_DEM", "code": "var dataset = ee.Image('OSU/GIMP/DEM');\nvar elevation = dataset.select('elevation');\nvar elevationVis = {\n  min: 0.0,\n  max: 2000.0,\n};\nMap.setCenter(-41.0, 76.0, 4);\nMap.addLayer(elevation, elevationVis, 'Elevation');", "environment": "[]"}, {"name": "OSU_GIMP_ICE_VELOCITY_OPT", "code": "var dataset = ee.ImageCollection('OSU/GIMP/ICE_VELOCITY_OPT')\n                  .filter(ee.Filter.date('2016-01-01', '2016-09-15'));\nvar iceVelocityVis = {\n  min: [0.0, 0.0, 0.0],\n  max: [-1000.0, 0.0, 1000.0],\n  bands: ['velocity_x', 'velocity_x', 'velocity_x'],\n};\nMap.setCenter(-66.82, 76.151, 7);\nMap.addLayer(dataset, iceVelocityVis, 'Ice Velocity');\n", "environment": "[]"}, {"name": "OpenLandMap_CLM_CLM_LST_MOD11A2-DAYNIGHT_M_v01", "code": "var dataset = ee.Image(\"OpenLandMap/CLM/CLM_LST_MOD11A2-DAYNIGHT_M/v01\");\n\nvar visualization = {\n  bands: ['jan'],\n  min: -40.5137,\n  max: 1336.09,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000']\n};\n\nMap.centerObject(dataset);\n\nMap.addLayer(dataset, visualization, \"Long-term Land Surface Temperature monthly day-night difference\");", "environment": "[]"}, {"name": "OpenLandMap_CLM_CLM_LST_MOD11A2-DAY_M_v01", "code": "var dataset = ee.Image(\"OpenLandMap/CLM/CLM_LST_MOD11A2-DAY_M/v01\");\n\nvar visualization = {\n  bands: ['jan'],\n  min: 11989.0,\n  max: 16700.0,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000']\n};\n\nMap.centerObject(dataset);\n\nMap.addLayer(dataset, visualization, \"Long-term Land Surface Temperature daytime monthly mean\");", "environment": "[]"}, {"name": "OpenLandMap_CLM_CLM_LST_MOD11A2-DAY_SD_v01", "code": "var dataset = ee.Image(\"OpenLandMap/CLM/CLM_LST_MOD11A2-DAY_SD/v01\");\n\nvar visualization = {\n  bands: ['jan'],\n  min: 25.0,\n  max: 390.0,\n  palette: [\n    \"2828ff\",\"2828ff\",\"6666ff\",\"8989ff\",\"a1a1ff\",\"b2b2ff\",\n    \"c0c0ff\",\"cbcbff\",\"d5d5ff\",\"dedeff\",\"e6e6ff\",\"ededff\",\n    \"f5f5ff\",\"ffffff\",\"fcfcff\",\"fffbfb\",\"fff4f4\",\"ffeded\",\n    \"ffe5e5\",\"ffdddd\",\"ffd4d4\",\"ffcbcb\",\"ffbfbf\",\"ffb2b2\",\n    \"ffa1a1\",\"ff8a8a\",\"ff6767\",\"ff2929\",\n  ]\n};\n\nMap.centerObject(dataset);\n\nMap.addLayer(dataset, visualization, \"Long-term Land Surface Temperature daytime monthly sd\");", "environment": "[]"}, {"name": "OpenLandMap_CLM_CLM_PRECIPITATION_SM2RAIN_M_v01", "code": "var dataset = ee.Image(\"OpenLandMap/CLM/CLM_PRECIPITATION_SM2RAIN_M/v01\");\n\nvar visualization = {\n  bands: ['jan'],\n  min: 0.0,\n  max: 380.0,\n  palette: ['ecffbd', 'ffff00', '3af6ff', '467aff', '313eff', '0008ff']\n};\n\nMap.centerObject(dataset);\n\nMap.addLayer(dataset, visualization, \"Precipitation monthly in mm\");", "environment": "[]"}, {"name": "OpenLandMap_PNV_PNV_BIOME-TYPE_BIOME00K_C_v01", "code": "var dataset = ee.Image(\"OpenLandMap/PNV/PNV_BIOME-TYPE_BIOME00K_C/v01\");\n\nvar visualization = {\n  bands: ['biome_type'],\n  min: 1.0,\n  max: 32.0,\n  palette: [\n    \"1c5510\",\"659208\",\"ae7d20\",\"000065\",\"bbcb35\",\"009a18\",\n    \"caffca\",\"55eb49\",\"65b2ff\",\"0020ca\",\"8ea228\",\"ff9adf\",\n    \"baff35\",\"ffba9a\",\"ffba35\",\"f7ffca\",\"e7e718\",\"798649\",\n    \"65ff9a\",\"d29e96\",\n  ]\n};\n\nMap.centerObject(dataset);\n\nMap.addLayer(dataset, visualization, \"Potential distribution of biomes\");", "environment": "[]"}, {"name": "OpenLandMap_PNV_PNV_FAPAR_PROBA-V_D_v01", "code": "var dataset = ee.Image(\"OpenLandMap/PNV/PNV_FAPAR_PROBA-V_D/v01\");\n\nvar visualization = {\n  bands: ['jan'],\n  min: 0.0,\n  max: 220.0,\n  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000']\n};\n\nMap.centerObject(dataset);\n\nMap.addLayer(dataset, visualization, \"Potential FAPAR monthly\");", "environment": "[]"}, {"name": "OpenLandMap_SOL_SOL_BULKDENS-FINEEARTH_USDA-4A1H_M_v02", "code": "var dataset = ee.Image(\"OpenLandMap/SOL/SOL_BULKDENS-FINEEARTH_USDA-4A1H_M/v02\");\n\nvar visualization = {\n  bands: ['b0'],\n  min: 5.0,\n  max: 185.0,\n  palette: ['5e3c99', 'b2abd2', 'f7e0b2', 'fdb863', 'e63b01']\n};\n\nMap.centerObject(dataset);\n\nMap.addLayer(dataset, visualization, \"Soil bulk density in x 10 kg / m3\");", "environment": "[]"}, {"name": "OpenLandMap_SOL_SOL_CLAY-WFRACTION_USDA-3A1A1A_M_v02", "code": "var dataset = ee.Image(\"OpenLandMap/SOL/SOL_CLAY-WFRACTION_USDA-3A1A1A_M/v02\");\n\nvar visualization = {\n  bands: ['b0'],\n  min: 2.0,\n  max: 100.0,\n  palette: [\n    \"FFFF00\",\"F8F806\",\"F1F10C\",\"EBEB13\",\"E4E419\",\"DDDD20\",\n    \"D7D726\",\"D0D02D\",\"CACA33\",\"C3C33A\",\"BCBC41\",\"B6B647\",\n    \"B0B04E\",\"A9A954\",\"A3A35A\",\"9C9C61\",\"959568\",\"8F8F6E\",\n    \"898975\",\"82827B\",\"7B7B82\",\"757589\",\"6E6E8F\",\"686895\",\n    \"61619C\",\"5A5AA3\",\"5454A9\",\"4D4DB0\",\"4747B6\",\"4141BC\",\n    \"3A3AC3\",\"3333CA\",\"2D2DD0\",\"2626D7\",\"2020DD\",\"1919E4\",\n    \"1212EB\",\"0C0CF1\",\"0606F8\",\"0000FF\",\n  ]\n};\n\nMap.centerObject(dataset);\n\nMap.addLayer(dataset, visualization, \"Clay content in % (kg / kg)\");", "environment": "[]"}, {"name": "OpenLandMap_SOL_SOL_GRTGROUP_USDA-SOILTAX-HAPLUDALFS_P_v01", "code": "var dataset = ee.Image(\"OpenLandMap/SOL/SOL_GRTGROUP_USDA-SOILTAX-HAPLUDALFS_P/v01\");\n\nvar visualization = {\n  bands: ['grtgroup'],\n  min: 0.0,\n  max: 35.0,\n  palette: ['ffffb2', 'fecc5c', 'fd8d3c', 'f03b20', 'bd0026']\n};\n\nMap.centerObject(dataset);\n\nMap.addLayer(dataset, visualization, \"Hapludalfs\");", "environment": "[]"}, {"name": "OpenLandMap_SOL_SOL_GRTGROUP_USDA-SOILTAX_C_v01", "code": "var dataset = ee.Image(\"OpenLandMap/SOL/SOL_GRTGROUP_USDA-SOILTAX_C/v01\");\n\nvar visualization = {\n  bands: ['grtgroup'],\n  min: 0.0,\n  max: 433.0,\n  palette: [\n    \"FFFFFF\",\"ADFF2D\",\"ADFF22\",\"A5FF2F\",\"87FF37\",\"BAF019\",\n    \"87FF19\",\"96F03D\",\"A3F52F\",\"AFF319\",\"91FF37\",\"9CF319\",\n    \"9BFF37\",\"91FF19\",\"71FF37\",\"86FF19\",\"A9D42D\",\"AFF519\",\n    \"9BFF19\",\"9AF024\",\"A5FD2F\",\"88FF37\",\"AFED19\",\"71FF19\",\n    \"AFF026\",\"8CF537\",\"B7FF19\",\"7177C0\",\"9A85EC\",\"F5F5E1\",\n    \"52CF5A\",\"E42777\",\"4EF76D\",\"FF00FB\",\"EB05EB\",\"FA04FA\",\n    \"FC04F5\",\"F50DF0\",\"F118F1\",\"FA0CFA\",\"FC05E1\",\"F100D5\",\n    \"EB09E6\",\"FA22FA\",\"FFDAB9\",\"F5D2BB\",\"E8C9B8\",\"FFDDC4\",\n    \"E7CBC0\",\"FFD2C3\",\"F5D6BB\",\"D5D3B9\",\"E8D4B8\",\"E7CDC0\",\n    \"F3EAC8\",\"A0C4BA\",\"FFD2B9\",\"F5DABB\",\"F5D5B9\",\"E8EBB8\",\n    \"FFDDC2\",\"E7FFC0\",\"F3E6C8\",\"FFDAB9\",\"F5CDB9\",\"A91D30\",\n    \"796578\",\"D8FF6E\",\"177548\",\"43EFD6\",\"8496A9\",\"296819\",\n    \"73FFD4\",\"6FFFC8\",\"75FBC9\",\"86F5D1\",\"82FFD2\",\"88EEC8\",\n    \"80FFD4\",\"6BFFC9\",\"88EEC8\",\"7FFFC8\",\"81FFD2\",\"86F0D4\",\n    \"67FFC8\",\"88EEC8\",\"7FFBCB\",\"87FFD2\",\"8AF5CE\",\"6BFAD2\",\n    \"78F0D4\",\"88EEC8\",\"7FFBD4\",\"73F5CD\",\"88C8D2\",\"91F0CD\",\n    \"73CDD2\",\"88EEC8\",\"FB849B\",\"DD4479\",\"61388B\",\"A52A30\",\n    \"722328\",\"D81419\",\"A42828\",\"82F5CD\",\"A54C2E\",\"C11919\",\n    \"B91419\",\"21B199\",\"702028\",\"B41919\",\"B22328\",\"A2C7EB\",\n    \"36BA79\",\"806797\",\"CB5B5F\",\"CD5C5C\",\"D94335\",\"D35740\",\n    \"E05A5D\",\"CF5B5C\",\"CA5964\",\"CA5D5F\",\"CD5E5A\",\"CA5969\",\n    \"D95A35\",\"D36240\",\"E05C43\",\"D64755\",\"CF595C\",\"FF5F5F\",\n    \"CD6058\",\"D95F35\",\"D35140\",\"D65A55\",\"E05C59\",\"CF525E\",\n    \"C65978\",\"F5615F\",\"826F9A\",\"CFF41A\",\"4A6F31\",\"A96989\",\n    \"E16438\",\"24F640\",\"88C1F9\",\"F5D25C\",\"D74322\",\"7F939E\",\n    \"41A545\",\"8F8340\",\"09FE03\",\"0AFF00\",\"0FF30F\",\"02F00A\",\n    \"0FC903\",\"17F000\",\"0CFF00\",\"0AC814\",\"0CFE00\",\"0AFF0A\",\n    \"03FF05\",\"1CF31C\",\"24F000\",\"00FF0C\",\"14C814\",\"00FE4C\",\n    \"14FF96\",\"44D205\",\"05F305\",\"62F00A\",\"0FCD03\",\"00D20F\",\n    \"1ADD11\",\"09FF0C\",\"03FF05\",\"05E700\",\"02F00A\",\"0FEA03\",\n    \"00F000\",\"0CCB0C\",\"14DD14\",\"6A685D\",\"FAE6B9\",\"769A34\",\n    \"6FF2DF\",\"CA7FC6\",\"D8228F\",\"C01BF0\",\"D2BAD3\",\"D8C3CB\",\n    \"D4C6D4\",\"D5BED5\",\"DDB9DD\",\"D8D2D8\",\"D4C9D4\",\"D2BAD5\",\n    \"D5BAD5\",\"D5B2D5\",\"D8C8D2\",\"D4CBD4\",\"552638\",\"2571EB\",\n    \"FFA514\",\"F3A502\",\"FB7B00\",\"F0B405\",\"F7A80F\",\"FB9113\",\n    \"FFA519\",\"F3A702\",\"FBBA07\",\"F7970F\",\"F3A702\",\"FB5A00\",\n    \"F0C005\",\"F7810F\",\"FF9C00\",\"F3B002\",\"F0B005\",\"F7980F\",\n    \"4D7CFC\",\"FFFF00\",\"FAFA05\",\"EBEB22\",\"FFFF14\",\"F1F10A\",\n    \"FAFA05\",\"EBEB1E\",\"F5EB0C\",\"EEF506\",\"F1F129\",\"FAFA05\",\n    \"EBEB0C\",\"F5D202\",\"FFD700\",\"F1F12B\",\"A91FAC\",\"2DA468\",\n    \"9A8B71\",\"76B989\",\"713959\",\n  ]\n};\n\nMap.centerObject(dataset);\n\nMap.addLayer(dataset, visualization, \"USDA soil taxonomy great groups\");", "environment": "[]"}, {"name": "OpenLandMap_SOL_SOL_ORGANIC-CARBON_USDA-6A1C_M_v02", "code": "var dataset = ee.Image(\"OpenLandMap/SOL/SOL_ORGANIC-CARBON_USDA-6A1C_M/v02\");\n\nvar visualization = {\n  bands: ['b0'],\n  min: 0.0,\n  max: 120.0,\n  palette: [\n    \"ffffa0\",\"f7fcb9\",\"d9f0a3\",\"addd8e\",\"78c679\",\"41ab5d\",\n    \"238443\",\"005b29\",\"004b29\",\"012b13\",\"00120b\",\n  ]\n};\n\nMap.centerObject(dataset);\n\nMap.addLayer(dataset, visualization, \"Soil organic carbon content in x 5 g / kg\");", "environment": "[]"}, {"name": "OpenLandMap_SOL_SOL_PH-H2O_USDA-4C1A2A_M_v02", "code": "var dataset = ee.Image(\"OpenLandMap/SOL/SOL_PH-H2O_USDA-4C1A2A_M/v02\");\n\nvar visualization = {\n  bands: ['b0'],\n  min: 42.0,\n  max: 110.0,\n  palette: [\n    \"FF0000\",\"FF1C00\",\"FF3900\",\"FF5500\",\"FF7100\",\"FF8E00\",\n    \"FFAA00\",\"FFC600\",\"FFE200\",\"FFFF00\",\"E3FF00\",\"C7FF00\",\n    \"AAFF00\",\"8EFF00\",\"72FF00\",\"55FF00\",\"39FF00\",\"1DFF00\",\n    \"01FF00\",\"00FF1C\",\"00FF38\",\"00FF54\",\"00FF71\",\"00FF8D\",\n    \"00FFA9\",\"00FFC6\",\"00FFE2\",\"00FFFE\",\"00E3FF\",\"00C7FF\",\n    \"00ABFF\",\"008FFF\",\"0072FF\",\"0056FF\",\"003AFF\",\"001DFF\",\n    \"0001FF\",\"1B00FF\",\"3800FF\",\"5400FF\",\n  ]\n};\n\nMap.centerObject(dataset);\n\nMap.addLayer(dataset, visualization, \"Soil pH x 10 in H2O\");", "environment": "[]"}, {"name": "OpenLandMap_SOL_SOL_SAND-WFRACTION_USDA-3A1A1A_M_v02", "code": "var dataset = ee.Image(\"OpenLandMap/SOL/SOL_SAND-WFRACTION_USDA-3A1A1A_M/v02\");\n\nvar visualization = {\n  bands: ['b0'],\n  min: 1.0,\n  max: 100.0,\n  palette: [\n    \"FFFF00\",\"F8F806\",\"F1F10C\",\"EBEB13\",\"E4E419\",\"DDDD20\",\n    \"D7D726\",\"D0D02D\",\"CACA33\",\"C3C33A\",\"BCBC41\",\"B6B647\",\n    \"B0B04E\",\"A9A954\",\"A3A35A\",\"9C9C61\",\"959568\",\"8F8F6E\",\n    \"898975\",\"82827B\",\"7B7B82\",\"757589\",\"6E6E8F\",\"686895\",\n    \"61619C\",\"5A5AA3\",\"5454A9\",\"4D4DB0\",\"4747B6\",\"4141BC\",\n    \"3A3AC3\",\"3333CA\",\"2D2DD0\",\"2626D7\",\"2020DD\",\"1919E4\",\n    \"1212EB\",\"0C0CF1\",\"0606F8\",\"0000FF\",\n  ]\n};\n\nMap.centerObject(dataset);\n\nMap.addLayer(dataset, visualization, \"Sand content in % (kg / kg)\");", "environment": "[]"}, {"name": "OpenLandMap_SOL_SOL_TEXTURE-CLASS_USDA-TT_M_v02", "code": "var dataset = ee.Image(\"OpenLandMap/SOL/SOL_TEXTURE-CLASS_USDA-TT_M/v02\");\n\nvar visualization = {\n  bands: ['b0'],\n  min: 1.0,\n  max: 12.0,\n  palette: [\n    \"d5c36b\",\"b96947\",\"9d3706\",\"ae868f\",\"f86714\",\"46d143\",\n    \"368f20\",\"3e5a14\",\"ffd557\",\"fff72e\",\"ff5a9d\",\"ff005b\",\n  ]\n};\n\nMap.centerObject(dataset);\n\nMap.addLayer(dataset, visualization, \"Soil texture class (USDA system)\");", "environment": "[]"}, {"name": "OpenLandMap_SOL_SOL_WATERCONTENT-33KPA_USDA-4B1C_M_v01", "code": "var dataset = ee.Image(\"OpenLandMap/SOL/SOL_WATERCONTENT-33KPA_USDA-4B1C_M/v01\");\n\nvar visualization = {\n  bands: ['b0'],\n  min: 0.0,\n  max: 52.9740182135385,\n  palette: [\n    \"d29642\",\"eec764\",\"b4ee87\",\"32eeeb\",\"0c78ee\",\"2601b7\",\n    \"083371\",\n  ]\n};\n\nMap.centerObject(dataset);\n\nMap.addLayer(dataset, visualization, \"Soil water content at 33kPa (field capacity)\");", "environment": "[]"}, {"name": "Oxford_MAP_EVI_5km_Monthly", "code": "var dataset = ee.ImageCollection('Oxford/MAP/EVI_5km_Monthly')\n                  .filter(ee.Filter.date('2015-01-01', '2015-12-31'));\nvar evi = dataset.select('Mean');\nvar eviVis = {\n  min: 0.0,\n  max: 1.0,\n  palette: [\n    'ffffff', 'fcd163', '99b718', '66a000', '3e8601', '207401', '056201',\n    '004c00', '011301'\n  ],\n};\nMap.setCenter(-60.5, -20.0, 2);\nMap.addLayer(evi, eviVis, 'EVI');\n", "environment": "[]"}, {"name": "Oxford_MAP_IGBP_Fractional_Landcover_5km_Annual", "code": "var dataset =\n    ee.ImageCollection('Oxford/MAP/IGBP_Fractional_Landcover_5km_Annual')\n        .filter(ee.Filter.date('2012-01-01', '2012-12-31'));\nvar landcover = dataset.select('Overall_Class');\nvar landcoverVis = {\n  min: 1.0,\n  max: 19.0,\n  palette: [\n    '032f7e', '02740b', '02740b', '8cf502', '8cf502', 'a4da01', 'ffbd05',\n    'ffbd05', '7a5a02', 'f0ff0f', '869b36', '6091b4', '999999', 'ff4e4e',\n    'ff4e4e', 'ffffff', 'feffc0', '020202', '020202'\n  ],\n};\nMap.setCenter(-88.6, 26.4, 1);\nMap.addLayer(landcover, landcoverVis, 'Landcover');\n", "environment": "[]"}, {"name": "Oxford_MAP_LST_Day_5km_Monthly", "code": "var dataset = ee.ImageCollection('Oxford/MAP/LST_Day_5km_Monthly')\n                  .filter(ee.Filter.date('2015-01-01', '2015-12-31'));\nvar daytimeLandSurfaceTemp = dataset.select('Mean');\nvar visParams = {\n  min: -20.0,\n  max: 50.0,\n  palette: [\n    '800080', '0000ab', '0000ff', '008000', '19ff2b', 'a8f7ff', 'ffff00',\n    'd6d600', 'ffa500', 'ff6b01', 'ff0000'\n  ],\n};\nMap.setCenter(-88.6, 26.4, 1);\nMap.addLayer(\n    daytimeLandSurfaceTemp, visParams, 'Daytime Land Surface Temperature');\n", "environment": "[]"}, {"name": "Oxford_MAP_LST_Night_5km_Monthly", "code": "var dataset = ee.ImageCollection('Oxford/MAP/LST_Night_5km_Monthly')\n                  .filter(ee.Filter.date('2015-01-01', '2015-12-31'));\nvar nighttimeLandSurfaceTemp = dataset.select('Mean');\nvar visParams = {\n  min: -30.0,\n  max: 30.0,\n  palette: [\n    '800080', '0000ab', '0000ff', '008000', '19ff2b', 'a8f7ff', 'ffff00',\n    'd6d600', 'ffa500', 'ff6b01', 'ff0000'\n  ],\n};\nMap.setCenter(-88.6, 26.4, 1);\nMap.addLayer(\n    nighttimeLandSurfaceTemp, visParams, 'Nighttime Land Surface Temperature');\n", "environment": "[]"}, {"name": "Oxford_MAP_TCB_5km_Monthly", "code": "var dataset = ee.ImageCollection('Oxford/MAP/TCB_5km_Monthly')\n                  .filter(ee.Filter.date('2013-01-01', '2013-12-31'));\nvar tcb = dataset.select('Mean');\nvar tcbVis = {\n  min: 0.0,\n  max: 1.3,\n  palette: [\n    '011301', '004c00', '056201', '207401', '3e8601', '66a000', '99b718',\n    'fcd163', 'ffffff'\n  ],\n};\nMap.setCenter(-44.65, 22.59, 2);\nMap.addLayer(tcb, tcbVis, 'TCB');\n", "environment": "[]"}, {"name": "Oxford_MAP_TCW_5km_Monthly", "code": "var dataset = ee.ImageCollection('Oxford/MAP/TCW_5km_Monthly')\n                  .filter(ee.Filter.date('2013-01-01', '2013-12-31'));\nvar tcw = dataset.select('Mean');\nvar tcwVis = {\n  min: -0.6,\n  max: 0.5,\n  palette: [\n    'ffffff', 'fcd163', '99b718', '66a000', '3e8601', '207401', '056201',\n    '004c00', '011301'\n  ],\n};\nMap.setCenter(-44.65, 22.59, 2);\nMap.addLayer(tcw, tcwVis, 'TCW');\n", "environment": "[]"}, {"name": "Oxford_MAP_accessibility_to_cities_2015_v1_0", "code": "var dataset = ee.Image('Oxford/MAP/accessibility_to_cities_2015_v1_0');\nvar accessibility = dataset.select('accessibility');\nvar accessibilityVis = {\n  min: 0.0,\n  max: 41556.0,\n  gamma: 4.0,\n};\nMap.setCenter(18.98, 6.66, 2);\nMap.addLayer(accessibility, accessibilityVis, 'Accessibility');\n", "environment": "[]"}, {"name": "Oxford_MAP_accessibility_to_healthcare_2019", "code": "var dataset = ee.Image('Oxford/MAP/accessibility_to_healthcare_2019');\nvar accessibility = dataset.select('accessibility');\nvar accessibilityVis = {\n  min: 0.0,\n  max: 41556.0,\n  gamma: 4.0,\n};\nMap.setCenter(18.98, 6.66, 2);\nMap.addLayer(accessibility, accessibilityVis, 'Accessibility');\n", "environment": "[]"}, {"name": "Oxford_MAP_friction_surface_2015_v1_0", "code": "var dataset = ee.Image('Oxford/MAP/friction_surface_2015_v1_0');\nvar landBasedTravelSpeed = dataset.select('friction');\nvar visParams = {\n  min: 0.0022,\n  max: 0.04,\n  palette: [\n    '313695', '4575b4', '74add1', 'abd9e9', 'e0f3f8', 'ffffbf', 'fee090',\n    'fdae61', 'f46d43', 'd73027', 'a50026'\n  ],\n};\nMap.setCenter(43.55, 36.98, 4);\nMap.addLayer(landBasedTravelSpeed, visParams, 'Land-based travel speed');\n", "environment": "[]"}, {"name": "Oxford_MAP_friction_surface_2019", "code": "var dataset = ee.Image('Oxford/MAP/friction_surface_2019');\nvar landBasedTravelSpeed = dataset.select('friction');\nvar visParams = {\n  min: 0.0022,\n  max: 0.04,\n  palette: [\n    '313695', '4575b4', '74add1', 'abd9e9', 'e0f3f8', 'ffffbf', 'fee090',\n    'fdae61', 'f46d43', 'd73027', 'a50026'\n  ],\n};\nMap.setCenter(43.55, 36.98, 4);\nMap.addLayer(landBasedTravelSpeed, visParams, 'Land-based travel speed');\n", "environment": "[]"}, {"name": "RESOLVE_ECOREGIONS_2017", "code": "var ecoRegions = ee.FeatureCollection(\"RESOLVE/ECOREGIONS/2017\");\n\n// patch updated colors\nvar colorUpdates = [\n{ECO_ID: 204, COLOR: '#B3493B'},\n{ECO_ID: 245, COLOR: '#267400'},\n{ECO_ID: 259, COLOR: '#004600'},\n{ECO_ID: 286, COLOR: '#82F178'},\n{ECO_ID: 316, COLOR: '#E600AA'},\n{ECO_ID: 453, COLOR: '#5AA500'},\n{ECO_ID: 317, COLOR: '#FDA87F'},\n{ECO_ID: 763, COLOR: '#A93800'},\n];\n\n// loop over all other features and create a new style property for styling\n// later on\nvar ecoRegions = ecoRegions.map(function(f) {\n  var color = f.get('COLOR');\n  return f.set({style: {color: color, width: 0}});\n});\n\n// make styled features for the regions we need to update colors for,\n// then strip them from the main asset and merge in the new feature\nfor (var i=0; i \u003c colorUpdates.length; i++) {\n  colorUpdates[i].layer = ecoRegions\n      .filterMetadata('ECO_ID','equals',colorUpdates[i].ECO_ID)\n      .map(function(f) {\n        return f.set({style: {color: colorUpdates[i].COLOR, width: 0}});\n      });\n\n  ecoRegions = ecoRegions\n      .filterMetadata('ECO_ID','not_equals',colorUpdates[i].ECO_ID)\n      .merge(colorUpdates[i].layer);\n}\n\n// use style property to color shapes\nvar imageRGB = ecoRegions.style({styleProperty: 'style'});\n\nMap.setCenter(16, 49, 4);\nMap.addLayer(imageRGB, {}, 'RESOLVE/ECOREGIONS/2017');\n", "environment": "[]"}, {"name": "RESOLVE_ECOREGIONS_2017_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('RESOLVE/ECOREGIONS/2017_FeatureView');\n\nvar visParams = {\n  opacity: 1,\n  polygonFillColor: {\n    property: 'NNH_NAME',\n    categories: [\n      ['Half Protected', 'blue'],\n      ['Nature Could Reach Half Protected', 'green'],\n      ['Nature Could Recover', 'yellow'],\n      ['Nature Imperiled', 'orange']\n    ],\n    defaultValue: 'lightgrey'\n  }\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Ecoregions (Nature Needs Half category)');\n\nMap.setCenter(16, 49, 4);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "SKYSAT_GEN-A_PUBLIC_ORTHO_MULTISPECTRAL", "code": "var dataset = ee.ImageCollection('SKYSAT/GEN-A/PUBLIC/ORTHO/MULTISPECTRAL');\nvar falseColor = dataset.select(['N', 'G', 'B']);\nvar falseColorVis = {\n  min: 200.0,\n  max: 6000.0,\n};\nMap.setCenter(-70.892, 41.6555, 15);\nMap.addLayer(falseColor, falseColorVis, 'False Color');\n", "environment": "[]"}, {"name": "SKYSAT_GEN-A_PUBLIC_ORTHO_RGB", "code": "var dataset = ee.ImageCollection('SKYSAT/GEN-A/PUBLIC/ORTHO/RGB');\nvar rgb = dataset.select(['R', 'G', 'B']);\nvar rgbVis = {\n  min: 11.0,\n  max: 190.0,\n};\nMap.setCenter(-70.892, 41.6555, 15);\nMap.addLayer(rgb, rgbVis, 'RGB');\n", "environment": "[]"}, {"name": "SNU_ESL_BESS_Rad_v1", "code": "var dataset = ee.ImageCollection(\"SNU/ESL/BESS/Rad/v1\");\n\nvar visualization = {\n  bands: ['PAR_Daily'],\n  min: 0.0,\n  max: 200.0,\n};\n\nMap.setCenter(0.0, 0.0, 1);\n\nMap.addLayer(\n    dataset, visualization,\n    \"Surface downwelling photosynthetic radiative flux\");\n", "environment": "[]"}, {"name": "TERN_AET_CMRSET_LANDSAT_V2_1", "code": "var dataset = ee.ImageCollection('TERN/AET/CMRSET_LANDSAT_V2_1');\n\nvar visualization = {\n  bands: ['ETa'],\n  min: 1,\n  max: 7,\n  palette: ['d7191c', 'fdae61', 'ffffbf', 'abd9e9', '2c7bb6']\n};\n\nMap.setCenter(132, -27, 4);\n\nMap.addLayer(dataset, visualization, 'Average daily evapotranspiration');\n", "environment": "[]"}, {"name": "TERN_AET_CMRSET_LANDSAT_V2_2", "code": "var dataset = ee.ImageCollection('TERN/AET/CMRSET_LANDSAT_V2_2');\n\nvar visualization = {\n  bands: ['ETa'],\n  min: 0,\n  max: 7,\n  palette: ['d7191c', 'fdae61', 'ffffbf', 'abd9e9', '2c7bb6']\n};\n\nMap.setCenter(132, -27, 4);\n\nMap.addLayer(dataset, visualization, 'Average daily evapotranspiration');\n", "environment": "[]"}, {"name": "TIGER_2010_Blocks", "code": "var dataset = ee.FeatureCollection('TIGER/2010/Blocks');\nvar visParams = {\n  min: 0.0,\n  max: 700.0,\n  palette: ['black', 'brown', 'yellow', 'orange', 'red']\n};\n\n// Turn the strings into numbers\ndataset = dataset.map(function (f) {\n  return f.set('pop10', ee.Number.parse(f.get('pop10')));\n});\n\nvar image = ee.Image().float().paint(dataset, 'pop10');\n\nMap.setCenter(-73.99172, 40.74101, 13);\nMap.addLayer(image, visParams, 'TIGER/2010/Blocks');\nMap.addLayer(dataset, null, 'for Inspector', false);\n", "environment": "[]"}, {"name": "TIGER_2010_Blocks_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('TIGER/2010/Blocks_FeatureView');\n\nvar visParams = {\n  opacity: 1,\n  color: {\n    property: 'pop10',\n    mode: 'linear',\n    palette: ['black', 'brown', 'yellow', 'orange', 'red'],\n    min: 0,\n    max: 700\n  }\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('US census blocks');\n\nMap.setCenter(-73.99172, 40.74101, 13);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "TIGER_2010_Tracts_DP1", "code": "var dataset = ee.FeatureCollection('TIGER/2010/Tracts_DP1');\nvar visParams = {\n  min: 0,\n  max: 4000,\n  opacity: 0.8,\n};\n\n// Turn the strings into numbers\ndataset = dataset.map(function (f) {\n  return f.set('shape_area', ee.Number.parse(f.get('dp0010001')));\n});\n\nMap.setCenter(-103.882, 43.036, 8);\nvar image = ee.Image().float().paint(dataset, 'dp0010001');\n\nMap.addLayer(image, visParams, 'TIGER/2010/Tracts_DP1');\nMap.addLayer(dataset, null, 'for Inspector', false);\n", "environment": "[]"}, {"name": "TIGER_2010_Tracts_DP1_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('TIGER/2010/Tracts_DP1_FeatureView');\n\nvar visParams = {\n  opacity: 0.8,\n  color: {\n    property: 'dp0010001',\n    mode: 'linear',\n    palette: ['black', 'white'],\n    min: 0,\n    max: 4000\n  }\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('US census tracts demographics');\n\nMap.setCenter(-103.882, 43.036, 8);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "TIGER_2010_ZCTA5", "code": "var dataset = ee.FeatureCollection('TIGER/2010/ZCTA5');\nvar visParams = {\n  palette: ['black', 'purple', 'blue', 'green', 'yellow', 'orange', 'red'],\n  min: 500000,\n  max: 1000000000,\n};\n\nvar zctaOutlines = ee.Image().float().paint({\n  featureCollection: dataset,\n  color: 'black',\n  width: 1\n});\n\nvar image = ee.Image().float().paint(dataset, 'ALAND10');\nMap.setCenter(-93.8008, 40.7177, 6);\nMap.addLayer(image, visParams, 'TIGER/2010/ZCTA5');\nMap.addLayer(zctaOutlines, {}, 'borders');\nMap.addLayer(dataset, null, 'for Inspector', false);\n", "environment": "[]"}, {"name": "TIGER_2010_ZCTA5_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('TIGER/2010/ZCTA5_FeatureView');\n\nvar visParams = {\n  opacity: 1,\n  polygonStrokeColor: 'black',\n  polygonFillColor: {\n    property: 'ALAND10',\n    mode: 'linear',\n    palette: ['black', 'purple', 'blue', 'green', 'yellow', 'orange', 'red'],\n    min: 5e5,\n    max: 5e9\n  }\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('US census zip codes');\n\nMap.setCenter(-93.8008, 40.7177, 6);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "TIGER_2016_Counties", "code": "var dataset = ee.FeatureCollection('TIGER/2016/Counties');\nvar visParams = {\n  palette: ['purple', 'blue', 'green', 'yellow', 'orange', 'red'],\n  min: 0,\n  max: 50,\n  opacity: 0.8,\n};\nvar stateDataset = ee.FeatureCollection('TIGER/2016/States');\n\n// Turn the strings into numbers\ndataset = dataset.map(function (f) {\n  return f.set('STATEFP', ee.Number.parse(f.get('STATEFP')));\n});\n\nvar image = ee.Image().float().paint(dataset, 'STATEFP');\nvar countyOutlines = ee.Image().float().paint({\n  featureCollection: dataset,\n  color: 'black',\n  width: 1\n});\nvar stateOutlines = ee.Image().float().paint({\n  featureCollection: stateDataset,\n  color: 'black',\n  width: 3\n});\n\nMap.setCenter(-99.844, 37.649, 5);\nMap.addLayer(image, visParams, 'TIGER/2016/Counties');\nMap.addLayer(stateOutlines, {}, 'state outlines');\nMap.addLayer(countyOutlines, {}, 'county outlines');\nMap.addLayer(dataset, null, 'for Inspector', false);\n", "environment": "[]"}, {"name": "TIGER_2016_Counties_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('TIGER/2016/Counties_FeatureView');\n\nvar visParams = {\n  opacity: 1,\n  polygonStrokeColor: 'black',\n  polygonFillColor: {\n    property: 'STATEFP',\n    categories: [\n      ['08', 'purple'],  // Colorado counties\n      ['32', 'blue']     // Nevada counties\n    ],\n    defaultValue: 'white'\n  }\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('US census counties');\n\nMap.setCenter(-99.844, 37.649, 5);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "TIGER_2016_Roads", "code": "var dataset = ee.FeatureCollection('TIGER/2016/Roads');\nvar roads = dataset.style({color: '#4285F4', width: 1});\nMap.setCenter(-73.99172, 40.74101, 12);\nMap.addLayer(roads, {}, 'TIGER/2016/Roads');\n", "environment": "[]"}, {"name": "TIGER_2016_Roads_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('TIGER/2016/Roads_FeatureView');\n\nvar visParams = {\n  color: '4285f4'\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('US census roads');\n\nMap.setCenter(-73.99172, 40.74101, 14);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "TIGER_2016_States", "code": "var dataset = ee.FeatureCollection('TIGER/2016/States');\nvar visParams = {\n  palette: ['purple', 'blue', 'green', 'yellow', 'orange', 'red'],\n  min: 500000000.0,\n  max: 5e+11,\n  opacity: 0.8,\n};\nvar image = ee.Image().float().paint(dataset, 'ALAND');\nMap.setCenter(-99.844, 37.649, 5);\nMap.addLayer(image, visParams, 'TIGER/2016/States');\nMap.addLayer(dataset, null, 'for Inspector', false);\n", "environment": "[]"}, {"name": "TIGER_2016_States_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('TIGER/2016/States_FeatureView');\n\nvar visParams = {\n  opacity: 0.8,\n  color: {\n    property: 'ALAND',\n    mode: 'linear',\n    palette: ['purple', 'blue', 'green', 'yellow', 'orange', 'red'],\n    min: 5e8,\n    max: 5e11\n  }\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('US census states');\n\nMap.setCenter(-99.844, 37.649, 5);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "TIGER_2018_Counties", "code": "var dataset = ee.FeatureCollection('TIGER/2018/Counties');\nvar visParams = {\n  palette: ['purple', 'blue', 'green', 'yellow', 'orange', 'red'],\n  min: 0,\n  max: 50,\n  opacity: 0.8,\n};\n\n// Turn the strings into numbers\ndataset = dataset.map(function (f) {\n  return f.set('STATEFP', ee.Number.parse(f.get('STATEFP')));\n});\n\nvar image = ee.Image().float().paint(dataset, 'STATEFP');\nvar countyOutlines = ee.Image().float().paint({\n  featureCollection: dataset,\n  color: 'black',\n  width: 1\n});\n\nMap.setCenter(-99.844, 37.649, 5);\nMap.addLayer(image, visParams, 'TIGER/2018/Counties');\nMap.addLayer(countyOutlines, {}, 'county outlines');\nMap.addLayer(dataset, null, 'for Inspector', false);\n", "environment": "[]"}, {"name": "TIGER_2018_Counties_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('TIGER/2018/Counties_FeatureView');\n\nvar visParams = {\n  opacity: 1,\n  polygonStrokeColor: 'black',\n  polygonFillColor: {\n    property: 'STATEFP',\n    categories: [\n      ['08', 'purple'],  // Colorado counties\n      ['32', 'blue']     // Nevada counties\n    ],\n    defaultValue: 'white'\n  }\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('US census counties (FV)');\n\nMap.setCenter(-99.844, 37.649, 5);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "TIGER_2018_States", "code": "var dataset = ee.FeatureCollection('TIGER/2018/States');\nvar visParams = {\n  palette: ['purple', 'blue', 'green', 'yellow', 'orange', 'red'],\n  min: 500000000.0,\n  max: 5e+11,\n  opacity: 0.8,\n};\nvar image = ee.Image().float().paint(dataset, 'ALAND');\nMap.setCenter(-99.844, 37.649, 5);\nMap.addLayer(image, visParams, 'TIGER/2018/States');\nMap.addLayer(dataset, null, 'for Inspector', false);\n", "environment": "[]"}, {"name": "TIGER_2018_States_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('TIGER/2018/States_FeatureView');\n\nvar visParams = {\n  opacity: 0.8,\n  color: {\n    property: 'ALAND',\n    mode: 'linear',\n    palette: ['purple', 'blue', 'green', 'yellow', 'orange', 'red'],\n    min: 5e8,\n    max: 5e11\n  }\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('US census states');\n\nMap.setCenter(-99.844, 37.649, 5);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "TIGER_2020_BG", "code": "var dataset = ee.FeatureCollection('TIGER/2020/BG');\n\nvar visParams = {\n  min: 0.0,\n  max: 1e7,\n  palette: ['d8d9d9', 'aaaaaa', 'b6dfe9', '2ea3f2', '0c71c3']\n};\n\n// plotting the water area per polygon\ndataset = dataset.map(function (f) {\n  return f.set('AWATER', ee.Number.parse(f.get('AWATER')));\n});\n\nvar image = ee.Image().float().paint(dataset, 'AWATER');\n\nMap.setCenter(-81.99172, 29.74101, 9);\nMap.addLayer(ee.Image(1), {min:0, max:1}, 'background');\nMap.addLayer(image, visParams, 'TIGER/2020/BG');\nMap.addLayer(dataset, null, 'for Inspector', false);", "environment": "[]"}, {"name": "TIGER_2020_BG_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('TIGER/2020/BG_FeatureView');\n\nvar visParams = {\n  opacity: 1,\n  color: {\n    property: 'AWATER',\n    mode: 'linear',\n    palette: ['d8d9d9', 'aaaaaa', 'b6dfe9', '2ea3f2', '0c71c3'],\n    min: 0,\n    max: 1e7\n  }\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Water area by US census block group');\n\nMap.setCenter(-74.0637, 40.6852, 13);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "TIGER_2020_TABBLOCK20", "code": "var dataset = ee.FeatureCollection('TIGER/2020/TABBLOCK20');\n\nvar visParams = {\n  min: 0.0,\n  max: 1e7,\n  palette: ['d8d9d9', 'aaaaaa', 'b6dfe9', '2ea3f2', '0c71c3']\n};\n\n// plotting the water area per polygon\ndataset = dataset.map(function (f) {\n  return f.set('AWATER20', ee.Number.parse(f.get('AWATER20')));\n});\n\nvar image = ee.Image().float().paint(dataset, 'AWATER20');\n\nMap.setCenter(-73.15, 40.9, 9);\nMap.addLayer(ee.Image(1), {min:0, max:1}, 'background');\nMap.addLayer(image, visParams, 'TIGER/2020/TABBLOCK20');\nMap.addLayer(dataset, null, 'for Inspector', false);\n", "environment": "[]"}, {"name": "TIGER_2020_TABBLOCK20_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('TIGER/2020/TABBLOCK20_FeatureView');\n\nvar visParams = {\n  opacity: 1,\n  color: {\n    property: 'AWATER20',\n    mode: 'linear',\n    palette: ['d8d9d9', 'aaaaaa', 'b6dfe9', '2ea3f2', '0c71c3'],\n    min: 0,\n    max: 1e7\n  }\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Water area by US census block');\n\nMap.setCenter(-73.15, 40.9, 9);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "TIGER_2020_TRACT", "code": "var dataset = ee.FeatureCollection('TIGER/2020/TRACT');\n\nvar visParams = {\n  min: 0.0,\n  max: 1e7,\n  palette: ['d8d9d9', 'aaaaaa', 'b6dfe9', '2ea3f2', '0c71c3']\n};\n\n// plotting the water area per polygon\ndataset = dataset.map(function (f) {\n  return f.set('AWATER', ee.Number.parse(f.get('AWATER')));\n});\n\n\nvar image = ee.Image().float().paint(dataset, 'AWATER');\n\nMap.setCenter(-81.99172, 29.74101, 6);\nMap.addLayer(ee.Image(1), {min:0, max:1}, 'background');\nMap.addLayer(image, visParams, 'TIGER/2020/TRACT');\nMap.addLayer(dataset, null, 'for Inspector', false);\n", "environment": "[]"}, {"name": "TIGER_2020_TRACT_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('TIGER/2020/TRACT_FeatureView');\n\nvar visParams = {\n  opacity: 1,\n  color: {\n    property: 'AWATER',\n    mode: 'linear',\n    palette: ['d8d9d9', 'aaaaaa', 'b6dfe9', '2ea3f2', '0c71c3'],\n    min: 0,\n    max: 1e7\n  }\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Water area by US census tract');\n\nMap.setCenter(-73.15, 40.9, 9);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "TOMS_MERGED", "code": "var dataset = ee.ImageCollection('TOMS/MERGED')\n                  .filter(ee.Filter.date('2018-08-01', '2018-08-10'));\nvar columnOzone = dataset.select('ozone');\nvar columnOzoneVis = {\n  min: 100.0,\n  max: 500.0,\n  palette: ['1621A2', 'cyan', 'green', 'yellow', 'orange', 'red'],\n};\nMap.setCenter(6.746, 46.529, 2);\nMap.addLayer(columnOzone, columnOzoneVis, 'Column Ozone');\n", "environment": "[]"}, {"name": "TRMM_3B42", "code": "var dataset = ee.ImageCollection('TRMM/3B42')\n                  .filter(ee.Filter.date('2018-04-01', '2018-04-10'));\nvar precipitation =\n    dataset.select(['precipitation', 'HQprecipitation', 'IRprecipitation']);\nvar precipitationVis = {\n  min: 0.0,\n  max: 12.0,\n  gamma: 5.0,\n};\nMap.setCenter(-79.98, 23.32, 4);\nMap.addLayer(precipitation, precipitationVis, 'Precipitation');\n", "environment": "[]"}, {"name": "TRMM_3B43V7", "code": "var dataset = ee.ImageCollection('TRMM/3B43V7')\n                  .filter(ee.Filter.date('2018-04-01', '2018-05-01'));\nvar precipitation = dataset.select('precipitation');\nvar precipitationVis = {\n  min: 0.1,\n  max: 1.2,\n  palette: ['blue', 'purple', 'cyan', 'green', 'yellow', 'red'],\n};\nMap.setCenter(6.746, 46.529, 3);\nMap.addLayer(precipitation, precipitationVis, 'Precipitation');\n", "environment": "[]"}, {"name": "TUBerlin_BigEarthNet_v1", "code": "var geometry = ee.Geometry.Polygon(\n    [[\n      [16.656886757418057, 48.27086673747943],\n      [16.656886757418057, 48.21359065567954],\n      [16.733276070162198, 48.21359065567954],\n      [16.733276070162198, 48.27086673747943]\n    ]],\n    null, false);\n\nvar ic = ee.ImageCollection('TUBerlin/BigEarthNet/v1');\n\nvar filtered = ic.filterBounds(geometry);\n\nvar tiles = filtered.map(function(i) {\n  var labels = ee.List(i.get('labels'));\n\n  var urban = labels.indexOf('Discontinuous urban fabric').gte(0);\n  var highlight_urban = ee.Image(urban).toInt().multiply(1000);\n\n  return i.addBands(\n      {srcImg: i.select(['B4']).add(highlight_urban), overwrite: true});\n});\n\nvar image = tiles.mosaic().clip(geometry);\n\nvar visParams = {bands: ['B4', 'B3', 'B2'], min: 0, max: 3000};\n\nMap.addLayer(image, visParams);\nMap.centerObject(image, 13);\n", "environment": "[]"}, {"name": "Tsinghua_DESS_ChinaTerraceMap_v1", "code": "var image = ee.Image('Tsinghua/DESS/ChinaTerraceMap/v1');\n\nvar image = image.updateMask(image);\nMap.addLayer(\n    image, {min:0, max:1, palette: ['a3ff74']}, 'Terraces');\n\nMap.setCenter(106.6, 30.4, 10);\nMap.setOptions(\"SATELLITE\");\n", "environment": "[]"}, {"name": "Tsinghua_FROM-GLC_GAIA_V10", "code": "var image = ee.Image('Tsinghua/FROM-GLC/GAIA/v10');\nMap.addLayer(image, {min: 0, max: 34});\nMap.setCenter(116.9921, 39.7971, 8);\n", "environment": "[]"}, {"name": "Tsinghua_FROM-GLC_GAIA_v10", "code": "var dataset = ee.Image(\"Tsinghua/FROM-GLC/GAIA/v10\");\n\nvar visualization = {\n  bands: ['change_year_index'],\n  min: 0.0,\n  max: 34.0,\n  palette: [\n    \"014352\",\"1A492C\",\"071EC4\",\"B5CA36\",\"729EAC\",\"8EA5DE\",\n    \"818991\",\"62A3C3\",\"CCF4FE\",\"74F0B9\",\"32BC55\",\"C72144\",\n    \"56613B\",\"C14683\",\"C31C25\",\"5F6253\",\"11BF85\",\"A61B26\",\n    \"99FBC5\",\"188AAA\",\"C2D7F1\",\"B7D9D8\",\"856F96\",\"109C6B\",\n    \"2DE3F4\",\"9A777D\",\"151796\",\"C033D8\",\"510037\",\"640C21\",\n    \"31A191\",\"223AB0\",\"B692AC\",\"2DE3F4\",\n  ]\n};\n\nMap.setCenter(-37.62, 25.8, 2);\n\nMap.addLayer(dataset, visualization, \"Change year index\");", "environment": "[]"}, {"name": "UCSB-CHG_CHIRPS_DAILY", "code": "var dataset = ee.ImageCollection('UCSB-CHG/CHIRPS/DAILY')\n                  .filter(ee.Filter.date('2018-05-01', '2018-05-03'));\nvar precipitation = dataset.select('precipitation');\nvar precipitationVis = {\n  min: 1.0,\n  max: 17.0,\n  palette: ['001137', '0aab1e', 'e7eb05', 'ff4a2d', 'e90000'],\n};\nMap.setCenter(17.93, 7.71, 2);\nMap.addLayer(precipitation, precipitationVis, 'Precipitation');\n", "environment": "[]"}, {"name": "UCSB-CHG_CHIRPS_PENTAD", "code": "var dataset = ee.ImageCollection('UCSB-CHG/CHIRPS/PENTAD')\n                  .filter(ee.Filter.date('2018-05-01', '2018-05-05'));\nvar precipitation = dataset.select('precipitation');\nvar precipitationVis = {\n  min: 0.0,\n  max: 112.0,\n  palette: ['001137', '0aab1e', 'e7eb05', 'ff4a2d', 'e90000'],\n};\nMap.setCenter(17.93, 7.71, 2);\nMap.addLayer(precipitation, precipitationVis, 'Precipitation');\n", "environment": "[]"}, {"name": "UMD_GLAD_PRIMARY_HUMID_TROPICAL_FORESTS_v1", "code": "var dataset = ee.ImageCollection(\n    \"UMD/GLAD/PRIMARY_HUMID_TROPICAL_FORESTS/v1\").mosaic().selfMask();\n\nvar visualization = {\n  bands: ['Primary_HT_forests'],\n  min: 1.0,\n  max: 1.0,\n  palette: ['008000']\n};\n\nMap.setCenter(0.0, 0.0, 2);\n\nMap.addLayer(dataset, visualization, \"Primary HT forests\");\n", "environment": "[]"}, {"name": "UMD_hansen_global_forest_change_2013", "code": "var dataset = ee.Image(\"UMD/hansen/global_forest_change_2013\");\n\nvar visualization = {\n  bands: ['treecover2000'],\n  min: 0.0,\n  max: 100.0,\n  palette: [\n    \"3d3d3d\",\"080a02\",\"080a02\",\"080a02\",\"106e12\",\"37a930\",\n    \"03ff17\",\n  ]\n};\n\nMap.setCenter(-60.5, -20.0, 2);\n\nMap.addLayer(dataset, visualization, \"Tree Canopy Cover\");", "environment": "[]"}, {"name": "UMD_hansen_global_forest_change_2014", "code": "var dataset = ee.Image(\"UMD/hansen/global_forest_change_2014\");\n\nvar visualization = {\n  bands: ['treecover2000'],\n  min: 0.0,\n  max: 100.0,\n  palette: [\n    \"3d3d3d\",\"080a02\",\"080a02\",\"080a02\",\"106e12\",\"37a930\",\n    \"03ff17\",\n  ]\n};\n\nMap.setCenter(-60.5, -20.0, 2);\n\nMap.addLayer(dataset, visualization, \"Tree Canopy Cover\");", "environment": "[]"}, {"name": "UMD_hansen_global_forest_change_2015", "code": "var dataset = ee.Image(\"UMD/hansen/global_forest_change_2015\");\n\nvar visualization = {\n  bands: ['treecover2000'],\n  min: 0.0,\n  max: 100.0,\n  palette: [\n    \"3d3d3d\",\"080a02\",\"080a02\",\"080a02\",\"106e12\",\"37a930\",\n    \"03ff17\",\n  ]\n};\n\nMap.setCenter(-60.5, -20.0, 2);\n\nMap.addLayer(dataset, visualization, \"Tree Canopy Cover\");", "environment": "[]"}, {"name": "UMD_hansen_global_forest_change_2015_v1_3", "code": "var dataset = ee.Image(\"UMD/hansen/global_forest_change_2015_v1_3\");\n\nvar visualization = {\n  bands: ['treecover2000'],\n  min: 0.0,\n  max: 100.0,\n  palette: [\n    \"3d3d3d\",\"080a02\",\"080a02\",\"080a02\",\"106e12\",\"37a930\",\n    \"03ff17\",\n  ]\n};\n\nMap.setCenter(-60.5, -20.0, 2);\n\nMap.addLayer(dataset, visualization, \"Tree Canopy Cover\");", "environment": "[]"}, {"name": "UMD_hansen_global_forest_change_2016_v1_4", "code": "var dataset = ee.Image(\"UMD/hansen/global_forest_change_2016_v1_4\");\n\nvar visualization = {\n  bands: ['treecover2000'],\n  min: 0.0,\n  max: 100.0,\n  palette: [\n    \"3d3d3d\",\"080a02\",\"080a02\",\"080a02\",\"106e12\",\"37a930\",\n    \"03ff17\",\n  ]\n};\n\nMap.setCenter(-60.5, -20.0, 2);\n\nMap.addLayer(dataset, visualization, \"Tree Canopy Cover\");", "environment": "[]"}, {"name": "UMD_hansen_global_forest_change_2017_v1_5", "code": "var dataset = ee.Image('UMD/hansen/global_forest_change_2017_v1_5');\nvar treeCanopyCover = dataset.select('treecover2000');\nvar treeCanopyCoverVis = {\n  min: 0.0,\n  max: 100.0,\n  palette:\n      ['3d3d3d', '080a02', '080a02', '080a02', '106e12', '37a930', '03ff17'],\n};\nMap.setCenter(-60.5, -20.0, 2);\nMap.addLayer(treeCanopyCover, treeCanopyCoverVis, 'Tree Canopy Cover');\n", "environment": "[]"}, {"name": "UMD_hansen_global_forest_change_2018_v1_6", "code": "var dataset = ee.Image(\"UMD/hansen/global_forest_change_2018_v1_6\");\n\nvar visualization = {\n  bands: ['treecover2000'],\n  min: 0.0,\n  max: 100.0,\n  palette: [\n    \"3d3d3d\",\"080a02\",\"080a02\",\"080a02\",\"106e12\",\"37a930\",\n    \"03ff17\",\n  ]\n};\n\nMap.setCenter(-60.5, -20.0, 2);\n\nMap.addLayer(dataset, visualization, \"Tree Canopy Cover\");", "environment": "[]"}, {"name": "UMD_hansen_global_forest_change_2019_v1_7", "code": "var dataset = ee.Image('UMD/hansen/global_forest_change_2019_v1_7');\nvar treeCoverVisParam = {\n  bands: ['treecover2000'],\n  min: 0,\n  max: 100,\n  palette: ['black', 'green']\n};\nMap.addLayer(dataset, treeCoverVisParam, 'tree cover');\n\nvar treeLossVisParam = {\n  bands: ['lossyear'],\n  min: 0,\n  max: 19,\n  palette: ['yellow', 'red']\n};\nMap.addLayer(dataset, treeLossVisParam, 'tree loss year');\n", "environment": "[]"}, {"name": "UMD_hansen_global_forest_change_2020_v1_8", "code": "var dataset = ee.Image('UMD/hansen/global_forest_change_2020_v1_8');\nvar treeCoverVisParam = {\n  bands: ['treecover2000'],\n  min: 0,\n  max: 100,\n  palette: ['black', 'green']\n};\nMap.addLayer(dataset, treeCoverVisParam, 'tree cover');\n\nvar treeLossVisParam = {\n  bands: ['lossyear'],\n  min: 0,\n  max: 20,\n  palette: ['yellow', 'red']\n};\nMap.addLayer(dataset, treeLossVisParam, 'tree loss year');\n", "environment": "[]"}, {"name": "UMD_hansen_global_forest_change_2021_v1_9", "code": "var dataset = ee.Image('UMD/hansen/global_forest_change_2021_v1_9');\nvar treeCoverVisParam = {\n  bands: ['treecover2000'],\n  min: 0,\n  max: 100,\n  palette: ['black', 'green']\n};\nMap.addLayer(dataset, treeCoverVisParam, 'tree cover');\n\nvar treeLossVisParam = {\n  bands: ['lossyear'],\n  min: 0,\n  max: 21,\n  palette: ['yellow', 'red']\n};\nMap.addLayer(dataset, treeLossVisParam, 'tree loss year');\n", "environment": "[]"}, {"name": "UMN_PGC_ArcticDEM_V2_2m", "code": "var dataset = ee.ImageCollection('UMN/PGC/ArcticDEM/V2/2m');\nvar elevation = dataset.select('elevation');\nvar elevationVis = {\n  min: -50.0,\n  max: 1000.0,\n  palette: ['0d13d8', '60e1ff', 'ffffff'],\n};\nMap.setCenter(-63.402, 66.368, 7);\nMap.addLayer(elevation, elevationVis, 'Elevation');", "environment": "[]"}, {"name": "UMN_PGC_ArcticDEM_V2_5m", "code": "var dataset = ee.Image('UMN/PGC/ArcticDEM/V2/5m');\nvar elevation = dataset.select('elevation');\nvar elevationVis = {\n  min: -50.0,\n  max: 1000.0,\n  palette: ['0d13d8', '60e1ff', 'ffffff'],\n};\nMap.setCenter(-63.402, 66.368, 7);\nMap.addLayer(elevation, elevationVis, 'Elevation');", "environment": "[]"}, {"name": "UMN_PGC_ArcticDEM_V3_2m", "code": "var dataset = ee.ImageCollection('UMN/PGC/ArcticDEM/V3/2m');\nvar elevation = dataset.select('elevation');\nvar elevationVis = {\n  min: -50.0,\n  max: 1000.0,\n  palette: ['0d13d8', '60e1ff', 'ffffff'],\n};\nMap.setCenter(-63.402, 66.368, 7);\nMap.addLayer(elevation, elevationVis, 'Elevation');", "environment": "[]"}, {"name": "UMN_PGC_ArcticDEM_V3_2m_mosaic", "code": "var dataset = ee.Image('UMN/PGC/ArcticDEM/V3/2m_mosaic');\nvar elevation = dataset.select('elevation');\nvar elevationVis = {\n  min: -50.0,\n  max: 1000.0,\n  palette: ['0d13d8', '60e1ff', 'ffffff'],\n};\nMap.setCenter(-63.402, 66.368, 7);\nMap.addLayer(elevation, elevationVis, 'Elevation');\n", "environment": "[]"}, {"name": "UMN_PGC_REMA_V1_1_8m", "code": "var mosaic = ee.Image('UMN/PGC/REMA/V1_1/8m');\n\nMap.setCenter(-61, -75, 3);\n\nvar elevationVis = {\n  bands: ['elevation'],\n  min: -50.0,\n  max: 1000.0,\n  palette: ['0d13d8', '60e1ff', 'ffffff'],\n};\n\nMap.addLayer(mosaic, elevationVis, 'REMA_DEM_mosaic_8m');\n", "environment": "[]"}, {"name": "UMN_PGC_REMA_V1_2m", "code": "var collection = ee.ImageCollection('UMN/PGC/REMA/V1/2m');\n\nMap.setCenter(-60, -75, 3);\n\nvar elevationVis = {\n  bands: ['elevation'],\n  min: -50.0,\n  max: 1000.0,\n  palette: ['0d13d8', '60e1ff', 'ffffff'],\n};\n\nMap.addLayer(collection, elevationVis, 'REMA_DEM_strips_2m');\n", "environment": "[]"}, {"name": "UMN_PGC_REMA_V1_8m", "code": "var collection = ee.ImageCollection('UMN/PGC/REMA/V1/8m');\n\nMap.setCenter(-63.16, -75, 3);\n\nvar elevationVis = {\n  bands: ['elevation'],\n  min: -50.0,\n  max: 1000.0,\n  palette: ['0d13d8', '60e1ff', 'ffffff'],\n};\n\nMap.addLayer(collection, elevationVis, 'REMA_DEM_strips_8m');\n", "environment": "[]"}, {"name": "UMT_Climate_IrrMapper_RF_v1_0", "code": "var dataset = ee.ImageCollection(\"UMT/Climate/IrrMapper_RF/v1_0\");\nvar irr_2013 = dataset.filterDate('2013-01-01', '2013-12-31').select('classification');\n\nvar visualization = {\n  min: 0.0,\n  max: 1.0,\n  palette: ['blue']\n};\nMap.addLayer(irr_2013, visualization, 'IrrMapper 2013');\nMap.setCenter(-112.516, 45.262, 10);\n", "environment": "[]"}, {"name": "UMT_NTSG_v2_LANDSAT_GPP", "code": "var dataset = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')\n                  .filter(ee.Filter.date('2017-05-01', '2017-05-31'));\nvar gpp = dataset.select('GPP');\nvar gppVis = {\n  min: 0.0,\n  max: 1000.0,\n  palette: ['bbe029', '0a9501', '074b03'],\n};\nMap.setCenter(-98.26, 39.32, 5);\nMap.addLayer(gpp, gppVis, 'GPP');\n", "environment": "[]"}, {"name": "UMT_NTSG_v2_LANDSAT_NPP", "code": "var dataset = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/NPP')\n                  .filter(ee.Filter.date('2016-01-01', '2016-12-31'));\nvar npp = dataset.select('annualNPP');\nvar nppVis = {\n  min: 0.0,\n  max: 20000.0,\n  palette: ['bbe029', '0a9501', '074b03'],\n};\nMap.setCenter(-98.26, 39.32, 5);\nMap.addLayer(npp, nppVis, 'NPP');\n", "environment": "[]"}, {"name": "UMT_NTSG_v2_MODIS_GPP", "code": "var dataset = ee.ImageCollection('UMT/NTSG/v2/MODIS/GPP')\n                  .filter(ee.Filter.date('2017-05-01', '2017-05-31'));\nvar gpp = dataset.select('GPP');\nvar gppVis = {\n  min: 0.0,\n  max: 1000.0,\n  palette: ['bbe029', '0a9501', '074b03'],\n};\nMap.setCenter(-98.26, 39.32, 5);\nMap.addLayer(gpp, gppVis, 'GPP');\n", "environment": "[]"}, {"name": "UMT_NTSG_v2_MODIS_NPP", "code": "var dataset = ee.ImageCollection('UMT/NTSG/v2/MODIS/NPP')\n                  .filter(ee.Filter.date('2016-01-01', '2016-12-31'));\nvar npp = dataset.select('annualNPP');\nvar nppVis = {\n  min: 0.0,\n  max: 20000.0,\n  palette: ['bbe029', '0a9501', '074b03'],\n};\nMap.setCenter(-98.26, 39.32, 5);\nMap.addLayer(npp, nppVis, 'NPP');\n", "environment": "[]"}, {"name": "UQ_murray_Intertidal_v1_1_data_mask", "code": "var dataset = ee.Image('UQ/murray/Intertidal/v1_1/data_mask');\n\nvar visualization = {\n  bands: ['datamask'],\n  min: 0.0,\n  max: 1.0,\n  palette: ['000000', 'FFFFFF']\n};\n\nMap.setCenter(126.6339, 37.4394, 10);\n\nMap.addLayer(dataset, visualization, 'Data mask');\n", "environment": "[]"}, {"name": "UQ_murray_Intertidal_v1_1_global_intertidal", "code": "var dataset = ee.ImageCollection('UQ/murray/Intertidal/v1_1/global_intertidal');\n\nvar visualization = {\n  bands: ['classification'],\n  min: 0.0,\n  max: 1.0,\n  palette: ['0000FF']\n};\n\nMap.setCenter(126.6339, 37.4394, 10);\n\nMap.addLayer(dataset, visualization, 'Intertidal areas');\n", "environment": "[]"}, {"name": "UQ_murray_Intertidal_v1_1_qa_pixel_count", "code": "var dataset = ee.ImageCollection('UQ/murray/Intertidal/v1_1/qa_pixel_count');\n\nvar visualization = {\n  bands: ['pixel_count'],\n  min: 0.0,\n  max: 300.0,\n  palette: ['000000', 'FFFFFF']\n};\n\nMap.setCenter(126.6339, 37.4394, 10);\n\nMap.addLayer(dataset, visualization, 'QA Pixel Count');\n", "environment": "[]"}, {"name": "USDA_NAIP_DOQQ", "code": "var dataset = ee.ImageCollection('USDA/NAIP/DOQQ')\n                  .filter(ee.Filter.date('2017-01-01', '2018-12-31'));\nvar trueColor = dataset.select(['R', 'G', 'B']);\nvar trueColorVis = {\n  min: 0.0,\n  max: 255.0,\n};\nMap.setCenter(-73.9958, 40.7278, 15);\nMap.addLayer(trueColor, trueColorVis, 'True Color');\n", "environment": "[]"}, {"name": "USDA_NASS_CDL", "code": "var dataset = ee.ImageCollection('USDA/NASS/CDL')\n                  .filter(ee.Filter.date('2018-01-01', '2019-12-31'))\n                  .first();\nvar cropLandcover = dataset.select('cropland');\nMap.setCenter(-100.55, 40.71, 4);\nMap.addLayer(cropLandcover, {}, 'Crop Landcover');\n", "environment": "[]"}, {"name": "USDOS_LSIB_2013", "code": "var dataset = ee.FeatureCollection('USDOS/LSIB/2013');\nvar visParams = {\n  palette: ['f5ff64', 'b5ffb4', 'beeaff', 'ffc0e8', '8e8dff', 'adadad'],\n  min: 0.0,\n  max: 894.0,\n  opacity: 0.8,\n};\nvar image = ee.Image().float().paint(dataset, 'iso_num');\nMap.setCenter(16.35, 48.83, 4);\nMap.addLayer(image, visParams, 'USDOS/LSIB/2013');\nMap.addLayer(dataset, null, 'for Inspector', false);\n", "environment": "[]"}, {"name": "USDOS_LSIB_2013_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('USDOS/LSIB/2013_FeatureView');\n\nvar visParams = {\n  color: {\n    property: 'iso_num',\n    mode: 'linear',\n    palette: ['f5ff64', 'b5ffb4', 'beeaff', 'ffc0e8', '8e8dff', 'adadad'],\n    min: 0.0,\n    max: 894.0\n  },\n  opacity: 0.8\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('USDOS/LSIB/2013');\n\nMap.setCenter(16.35, 48.83, 4);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "USDOS_LSIB_2017", "code": "var dataset = ee.FeatureCollection('USDOS/LSIB/2017');\nvar styleParams = {\n  fillColor: 'b5ffb4',\n  color: '00909F',\n  width: 3.0,\n};\nvar countries = dataset.style(styleParams);\nMap.setCenter(16.35, 48.83, 4);\nMap.addLayer(countries, {}, 'USDOS/LSIB/2017');\n", "environment": "[]"}, {"name": "USDOS_LSIB_2017_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('USDOS/LSIB/2017_FeatureView');\n\nvar visParams = {\n  color: '00909F',\n  fillColor: 'b5ffb4',\n  width: 3,\n  opacity: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('USDOS/LSIB/2017');\n\nMap.setCenter(16.35, 48.83, 4);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "USDOS_LSIB_SIMPLE_2017", "code": "var dataset = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017');\nvar styleParams = {\n  fillColor: 'b5ffb4',\n  color: '00909F',\n  width: 3.0,\n};\nvar countries = dataset.style(styleParams);\nMap.setCenter(16.35, 48.83, 4);\nMap.addLayer(countries, {}, 'USDOS/LSIB_SIMPLE/2017');\n", "environment": "[]"}, {"name": "USDOS_LSIB_SIMPLE_2017_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('USDOS/LSIB_SIMPLE/2017_FeatureView');\n\nvar visParams = {\n  color: '00909F',\n  fillColor: 'b5ffb4',\n  width: 3,\n  opacity: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('USDOS/LSIB_SIMPLE/2017');\n\nMap.setCenter(16.35, 48.83, 4);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "USFS_GTAC_LCMS_v2020-5", "code": "var dataset = ee.ImageCollection('USFS/GTAC/LCMS/v2020-5');\n\nvar lcms = dataset\n    .filter(ee.Filter.and(\n      ee.Filter.eq('year', 2020),  // range: [1985, 2020]\n      ee.Filter.eq('study_area', 'CONUS')  // or 'SEAK'\n    ))\n    .first();\n\nMap.addLayer(lcms.select('Land_Cover'), {}, 'Land Cover');\nMap.addLayer(lcms.select('Land_Use'), {}, 'Land Use');\nMap.addLayer(lcms.select('Change'), {}, 'Change');\n\nMap.setCenter(-98.58, 38.14, 4);\n", "environment": "[]"}, {"name": "USFS_GTAC_LCMS_v2020-6", "code": "var dataset = ee.ImageCollection('USFS/GTAC/LCMS/v2020-6');\n\nvar lcms = dataset\n    .filter(ee.Filter.and(\n      ee.Filter.eq('year', 2020),  // range: [1985, 2021]\n      ee.Filter.eq('study_area', 'PRUSVI')  // Puero Rico only in this version.\n    ))\n    .first();\n\nMap.addLayer(lcms.select('Land_Cover'), {}, 'Land Cover');\nMap.addLayer(lcms.select('Land_Use'), {}, 'Land Use');\nMap.addLayer(lcms.select('Change'), {}, 'Change');\n\nMap.setCenter(-66.4239, 18.1384, 9);\n", "environment": "[]"}, {"name": "USFS_GTAC_LCMS_v2021-7", "code": "var dataset = ee.ImageCollection('USFS/GTAC/LCMS/v2021-7');\n\nvar lcms = dataset\n    .filter(ee.Filter.and(\n      ee.Filter.eq('year', 2020),  // range: [1985, 2021]\n      ee.Filter.eq('study_area', 'CONUS')  // or 'SEAK'\n    ))\n    .first();\n\nMap.addLayer(lcms.select('Land_Cover'), {}, 'Land Cover');\nMap.addLayer(lcms.select('Land_Use'), {}, 'Land Use');\nMap.addLayer(lcms.select('Change'), {}, 'Change');\n\nMap.setCenter(-98.58, 38.14, 4);\n", "environment": "[]"}, {"name": "USFS_GTAC_MTBS_burned_area_boundaries_v1", "code": "var dataset = ee.FeatureCollection('USFS/GTAC/MTBS/burned_area_boundaries/v1');\n\nvar visParams = {\n  fillColor: 'ff8a50',\n  color: 'ff5722',\n  width: 1.0,\n};\n\nMap.setCenter(-122.2988, 38.8766, 10);\nMap.addLayer(dataset, visParams, 'USFS/GTAC/MTBS/burned_area_boundaries/v1');\n", "environment": "[]"}, {"name": "USFS_GTAC_MTBS_burned_area_boundaries_v1_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer(\n  'USFS/GTAC/MTBS/burned_area_boundaries/v1_FeatureView');\n\nvar visParams = {\n  color: 'ff5722',\n  fillColor: 'ff8a50',\n  width: 2,\n  opacity: 0.8\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('USFS/GTAC/MTBS/burned_area_boundaries/v1');\n\nMap.setCenter(-122.2988, 38.8766, 10);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "USGS_3DEP_10m", "code": "var dataset = ee.Image('USGS/3DEP/10m')\nvar elevation = dataset.select('elevation');\nvar slope = ee.Terrain.slope(elevation);\nMap.setCenter(-112.8598, 36.2841, 10);\nMap.addLayer(elevation, {min: 0, max: 3000,   palette: [\n    '3ae237', 'b5e22e', 'd6e21f', 'fff705', 'ffd611', 'ffb613', 'ff8b13',\n    'ff6e08', 'ff500d', 'ff0000', 'de0101', 'c21301', '0602ff', '235cb1',\n    '307ef3', '269db1', '30c8e2', '32d3ef', '3be285', '3ff38f', '86e26f'\n  ],\n}, 'elevation');\nMap.addLayer(slope, {min: 0, max: 60}, 'slope');\n", "environment": "[]"}, {"name": "USGS_3DEP_10m_metadata", "code": "var fc = ee.FeatureCollection('USGS/3DEP/10m_metadata');\n\nvar empty = ee.Image().byte();\nvar outlines = empty.paint({\n  featureCollection: fc,\n  color: 'zmean',\n});\nvar palette = [\"0000ff\", \"00ffff\", \"ffff00\", \"ff0000\", \"ffffff\"];\nMap.addLayer(outlines, {palette: palette, max: 2000});\n", "environment": "[]"}, {"name": "USGS_3DEP_10m_metadata_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('USGS/3DEP/10m_metadata_FeatureView');\n\nvar visParams = {\n  opacity: 1,\n  color: {\n    property: 'zmean',\n    mode: 'linear',\n    palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff'],\n    min: 0,\n    max: 2000\n  },\n  rules: [\n   {\n     filter: ee.Filter.eq('demname', 'pa_steasth10_8'),\n     opacity: 0.1\n   }\n  ]\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Mean elevation');\n\nMap.setCenter(-100.612, 43.687, 8);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "USGS_3DEP_1m", "code": "var dataset = ee.ImageCollection('USGS/3DEP/1m');\nvar visualization = {\n  min: 0,\n  max: 3000,\n  palette: [\n    '3ae237', 'b5e22e', 'd6e21f', 'fff705', 'ffd611', 'ffb613', 'ff8b13',\n    'ff6e08', 'ff500d', 'ff0000', 'de0101', 'c21301', '0602ff', '235cb1',\n    '307ef3', '269db1', '30c8e2', '32d3ef', '3be285', '3ff38f', '86e26f'\n  ],\n};\nMap.setCenter(-119.0, 34.6, 10);\nMap.addLayer(dataset, visualization, 'elevation');\n", "environment": "[]"}, {"name": "USGS_GAP_AK_2001", "code": "var dataset = ee.Image('USGS/GAP/AK/2001');\n\nvar visualization = {\n  bands: ['landcover'],\n  min: 1.0,\n  max: 143.0,\n};\n\nMap.setCenter(-151.97, 63.68, 4);\n\nMap.addLayer(dataset, visualization, 'GAP Alaska');\n", "environment": "[]"}, {"name": "USGS_GAP_CONUS_2011", "code": "var dataset = ee.Image('USGS/GAP/CONUS/2011');\n\nvar visualization = {\n  bands: ['landcover'],\n  min: 1.0,\n  max: 584.0,\n};\n\nMap.setCenter(-98.58, 38.14, 4);\n\nMap.addLayer(dataset, visualization, 'GAP CONUS');\n", "environment": "[]"}, {"name": "USGS_GAP_HI_2001", "code": "var dataset = ee.Image('USGS/GAP/HI/2001');\n\nvar visualization = {\n  bands: ['landcover'],\n  min: 1.0,\n  max: 37.0,\n};\n\nMap.setCenter(-157.0, 20.1, 7);\n\nMap.addLayer(dataset, visualization, 'GAP Hawaii');\n", "environment": "[]"}, {"name": "USGS_GAP_PAD-US_v20_designation", "code": "var dataset = ee.FeatureCollection('USGS/GAP/PAD-US/v20/designation');\n\n// Encode \"GAP_Sts\" (protection level) as a number for visualization.\ndataset = dataset.map(function(feature) {\n  return feature.set('status', ee.Number.parse(feature.get('GAP_Sts')));\n});\n\n// Paint new \"status\" value to an image for visualization.\nvar datasetVis = ee.Image().byte().paint(dataset, 'status');\n\nvar visualization = {\n  min: 1,\n  max: 4,\n  palette: ['b1a44e', '4eb173', '4e5bb1', 'b14e8c']\n};\n\nMap.setCenter(-93.952, 35.400, 8);\nMap.addLayer(datasetVis, visualization, 'Protection status');\nMap.addLayer(dataset, null, 'FeatureCollection', false);\n", "environment": "[]"}, {"name": "USGS_GAP_PAD-US_v20_designation_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer(\n  'USGS/GAP/PAD-US/v20/designation_FeatureView');\n\nvar visParams = {\n  opacity: 1,\n  color: {\n    property: 'GAP_Sts',\n    categories: [\n      ['1', 'b1a44e'],\n      ['2', '4eb173'],\n      ['3', '4e5bb1'],\n      ['4', 'b14e8c']\n    ]\n  }\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Protection status');\n\nMap.setCenter(-93.952, 35.400, 8);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "USGS_GAP_PAD-US_v20_easement", "code": "var dataset = ee.FeatureCollection('USGS/GAP/PAD-US/v20/easement');\n\n// Encode \"GAP_Sts\" (protection level) as a number for visualization.\ndataset = dataset.map(function(feature) {\n  return feature.set('status', ee.Number.parse(feature.get('GAP_Sts')));\n});\n\n// Paint new \"status\" value to an image for visualization.\nvar datasetVis = ee.Image().byte().paint(dataset, 'status');\n\nvar visualization = {\n  min: 1,\n  max: 4,\n  palette: ['b1a44e', '4eb173', '4e5bb1', 'b14e8c']\n};\n\nMap.setCenter(-74.127, 43.927, 8);\nMap.addLayer(datasetVis, visualization, 'Protection status');\nMap.addLayer(dataset, null, 'FeatureCollection', false);\n", "environment": "[]"}, {"name": "USGS_GAP_PAD-US_v20_easement_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer(\n  'USGS/GAP/PAD-US/v20/easement_FeatureView');\n\nvar visParams = {\n  opacity: 1,\n  color: {\n    property: 'GAP_Sts',\n    categories: [\n      ['1', 'b1a44e'],\n      ['2', '4eb173'],\n      ['3', '4e5bb1'],\n      ['4', 'b14e8c']\n    ]\n  }\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Protection status');\n\nMap.setCenter(-74.127, 43.927, 8);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "USGS_GAP_PAD-US_v20_fee", "code": "var dataset = ee.FeatureCollection('USGS/GAP/PAD-US/v20/fee');\n\n// Encode \"GAP_Sts\" (protection level) as a number for visualization.\ndataset = dataset.map(function(feature) {\n  return feature.set('status', ee.Number.parse(feature.get('GAP_Sts')));\n});\n\n// Paint new \"status\" value to an image for visualization.\nvar datasetVis = ee.Image().byte().paint(dataset, 'status');\n\nvar visualization = {\n  min: 1,\n  max: 4,\n  palette: ['b1a44e', '4eb173', '4e5bb1', 'b14e8c']\n};\n\nMap.setCenter(-100.612, 43.687, 8);\nMap.addLayer(datasetVis, visualization, 'Protection status');\nMap.addLayer(dataset, null, 'FeatureCollection', false);\n", "environment": "[]"}, {"name": "USGS_GAP_PAD-US_v20_fee_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('USGS/GAP/PAD-US/v20/fee_FeatureView');\n\nvar visParams = {\n  opacity: 1,\n  color: {\n    property: 'GAP_Sts',\n    categories: [\n      ['1', 'b1a44e'],\n      ['2', '4eb173'],\n      ['3', '4e5bb1'],\n      ['4', 'b14e8c']\n    ]\n  }\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Protection status');\n\nMap.setCenter(-100.612, 43.687, 8);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "USGS_GAP_PAD-US_v20_proclamation", "code": "var dataset = ee.FeatureCollection('USGS/GAP/PAD-US/v20/proclamation');\n\n// Encode \"GAP_Sts\" (protection level) as a number for visualization.\ndataset = dataset.map(function(feature) {\n  return feature.set('status', ee.Number.parse(feature.get('GAP_Sts')));\n});\n\n// Paint new \"status\" value to an image for visualization.\nvar datasetVis = ee.Image().byte().paint(dataset, 'status');\n\nvar visualization = {\n  min: 1,\n  max: 4,\n  palette: ['b1a44e', '4eb173', '4e5bb1', 'b14e8c']\n};\n\nMap.setCenter(-92.852, 31.549, 8);\nMap.addLayer(datasetVis, visualization, 'Protection status');\nMap.addLayer(dataset, null, 'FeatureCollection', false);\n", "environment": "[]"}, {"name": "USGS_GAP_PAD-US_v20_proclamation_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer(\n  'USGS/GAP/PAD-US/v20/proclamation_FeatureView');\n\nvar visParams = {\n  opacity: 1,\n  color: {\n    property: 'GAP_Sts',\n    categories: [\n      ['1', 'b1a44e'],\n      ['2', '4eb173'],\n      ['3', '4e5bb1'],\n      ['4', 'b14e8c']\n    ]\n  }\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Protection status');\n\nMap.setCenter(-92.852, 31.549, 8);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "USGS_GAP_PR_2001", "code": "var dataset = ee.Image('USGS/GAP/PR/2001');\n\nvar visualization = {\n  bands: ['landcover'],\n  min: 1.0,\n  max: 70.0,\n};\n\nMap.setCenter(-66.51, 18.23, 8);\n\nMap.addLayer(dataset, visualization, 'GAP Purto Rico');\n", "environment": "[]"}, {"name": "USGS_GFSAD1000_V0", "code": "var dataset = ee.Image('USGS/GFSAD1000_V0');\nvar cropDominance = dataset.select('landcover');\nvar cropDominanceVis = {\n  min: 0.0,\n  max: 9.0,\n  palette: [\n    'black', 'white', 'green', 'yellow', 'brown', 'orange', '02be11', '015e08',\n    '02a50f', 'purple'\n  ],\n};\nMap.setCenter(-17.22, 13.72, 2);\nMap.addLayer(cropDominance, cropDominanceVis, 'Crop Dominance');\n", "environment": "[]"}, {"name": "USGS_GFSAD1000_V1", "code": "var dataset = ee.Image('USGS/GFSAD1000_V1');\nvar cropMask = dataset.select('landcover');\nvar cropMaskVis = {\n  min: 0.0,\n  max: 5.0,\n  palette: ['black', 'orange', 'brown', '02a50f', 'green', 'yellow'],\n};\nMap.setCenter(-17.22, 13.72, 2);\nMap.addLayer(cropMask, cropMaskVis, 'Crop Mask');\n", "environment": "[]"}, {"name": "USGS_GMTED2010", "code": "var dataset = ee.Image('USGS/GMTED2010');\nvar elevation = dataset.select('be75');\nvar elevationVis = {\n  min: -100.0,\n  max: 6500.0,\n  gamma: 3.5,\n};\nMap.setCenter(17.93, 7.71, 2);\nMap.addLayer(elevation, elevationVis, 'Elevation');", "environment": "[]"}, {"name": "USGS_GTOPO30", "code": "var dataset = ee.Image('USGS/GTOPO30');\nvar elevation = dataset.select('elevation');\nvar elevationVis = {\n  min: -10.0,\n  max: 8000.0,\n  gamma: 1.6,\n};\nMap.setCenter(11.69, 43.9, 4);\nMap.addLayer(elevation, elevationVis, 'Elevation');", "environment": "[]"}, {"name": "USGS_LIMA_MOSAIC", "code": "var dataset = ee.Image('USGS/LIMA/MOSAIC');\nvar antarctica = dataset.select(['B3', 'B2', 'B1']);\nvar antarcticaVis = {\n  min: 0.0,\n  max: 10000.0,\n};\nMap.setCenter(164.619, -77.99, 7);\nMap.addLayer(antarctica, antarcticaVis, 'Antartica Imagery (RGB)');\n", "environment": "[]"}, {"name": "USGS_LIMA_SR", "code": "var dataset = ee.ImageCollection('USGS/LIMA/SR');\nvar antarctica = dataset.select(['B3', 'B2', 'B1']);\nvar antarcticaVis = {\n  min: 0.0,\n  max: 10000.0,\n};\nMap.setCenter(164.619, -77.99, 7);\nMap.addLayer(antarctica, antarcticaVis, 'Antartica Imagery (RGB)');\n", "environment": "[]"}, {"name": "USGS_NED", "code": "var dataset = ee.Image('USGS/NED');\nvar elevation = dataset.select('elevation');\nvar elevationVis = {\n  min: 0.0,\n  max: 4000.0,\n  gamma: 1.6,\n};\nMap.setCenter(-100.55, 40.71, 5);\nMap.addLayer(elevation, elevationVis, 'Elevation');\n", "environment": "[]"}, {"name": "USGS_NLCD", "code": "// Import the NLCD collection.\nvar dataset = ee.ImageCollection('USGS/NLCD');\n\n// The collection contains images for multiple years and regions in the USA.\nprint('Products:', dataset.aggregate_array('system:index'));\n\n// Filter the collection to the 2016 product.\nvar nlcd2016 = dataset.filter(ee.Filter.eq('system:index', 'NLCD2016')).first();\n\n// Each product has multiple bands for describing aspects of land cover.\nprint('Bands:', nlcd2016.bandNames());\n\n// Select the land cover band.\nvar landcover = nlcd2016.select('landcover');\n\n// Display land cover on the map.\nMap.setCenter(-95, 38, 5);\nMap.addLayer(landcover, null, 'Landcover');\n", "environment": "[]"}, {"name": "USGS_NLCD_RELEASES_2016_REL", "code": "// Import the NLCD collection.\nvar dataset = ee.ImageCollection('USGS/NLCD_RELEASES/2016_REL');\n\n// The collection contains images for multiple years and regions in the USA.\nprint('Products:', dataset.aggregate_array('system:index'));\n\n// Filter the collection to the 2016 product.\nvar nlcd2016 = dataset.filter(ee.Filter.eq('system:index', '2016')).first();\n\n// Each product has multiple bands for describing aspects of land cover.\nprint('Bands:', nlcd2016.bandNames());\n\n// Select the land cover band.\nvar landcover = nlcd2016.select('landcover');\n\n// Display land cover on the map.\nMap.setCenter(-95, 38, 5);\nMap.addLayer(landcover, null, 'Landcover');\n", "environment": "[]"}, {"name": "USGS_NLCD_RELEASES_2019_REL_NLCD", "code": "// Import the NLCD collection.\nvar dataset = ee.ImageCollection('USGS/NLCD_RELEASES/2019_REL/NLCD');\n\n// The collection contains images for multiple years and regions in the USA.\nprint('Products:', dataset.aggregate_array('system:index'));\n\n// Filter the collection to the 2016 product.\nvar nlcd2016 = dataset.filter(ee.Filter.eq('system:index', '2016')).first();\n\n// Each product has multiple bands for describing aspects of land cover.\nprint('Bands:', nlcd2016.bandNames());\n\n// Select the land cover band.\nvar landcover = nlcd2016.select('landcover');\n\n// Display land cover on the map.\nMap.setCenter(-95, 38, 5);\nMap.addLayer(landcover, null, 'Landcover');\n", "environment": "[]"}, {"name": "USGS_NLCD_RELEASES_2019_REL_RCMAP_V4_COVER", "code": "// Import the NLCD RCMAP collection.\nvar dataset = ee.ImageCollection('USGS/NLCD_RELEASES/2019_REL/RCMAP/V4/COVER');\n\n// Filter the collection to the 2016 product.\nvar nlcd2016 = dataset.filter(ee.Filter.eq('system:index', '2016')).first();\n\n// Each product has multiple bands for different rangeland categories.\nprint('Bands:', nlcd2016.bandNames());\n\n// Select the rangeland_annual_herbaceous band.\nvar landcover = nlcd2016.select('rangeland_annual_herbaceous');\n\nvar vis = {\n  'palette': [\n      \"000000\", \"f9e8b7\", \"f7e3ac\", \"f0dfa3\", \"eedf9c\", \"eada91\", \"e8d687\", \"e0d281\", \"ddd077\", \"d6cc6d\",\n      \"d3c667\", \"d0c55e\", \"cfc555\", \"c6bd4f\", \"c4ba46\", \"bdb83a\", \"bbb534\", \"b7b02c\", \"b0ad1f\", \"adac17\",\n      \"aaaa0a\", \"a3a700\", \"9fa700\", \"9aa700\", \"92a700\", \"8fa700\", \"87a700\", \"85a700\", \"82aa00\", \"7aaa00\",\n      \"77aa00\", \"70aa00\", \"6caa00\", \"67aa00\", \"5fa700\", \"57a700\", \"52a700\", \"4fa700\", \"4aa700\", \"42a700\",\n      \"3ca700\", \"37a700\", \"37a300\", \"36a000\", \"369f00\", \"349d00\", \"339900\", \"339900\", \"2f9200\", \"2d9100\",\n      \"2d8f00\", \"2c8a00\", \"2c8800\", \"2c8500\", \"2c8400\", \"2b8200\", \"297d00\", \"297a00\", \"297900\", \"277700\",\n      \"247400\", \"247000\", \"29700f\", \"2c6d1c\", \"2d6d24\", \"336d2d\", \"366c39\", \"376c44\", \"396a4a\", \"396a55\",\n      \"3a6a5f\", \"3a696a\", \"396774\", \"3a6782\", \"39668a\", \"376292\", \"34629f\", \"2f62ac\", \"2c5fb7\", \"245ec4\",\n      \"1e5ed0\", \"115cdd\", \"005ae0\", \"0057dd\", \"0152d6\", \"0151d0\", \"014fcc\", \"014ac4\", \"0147bd\", \"0144b8\",\n      \"0142b0\", \"0141ac\", \"013da7\", \"013aa0\", \"01399d\", \"013693\", \"013491\", \"012f8a\", \"012d85\", \"012c82\", \"01297a\",\n  ]\n};\n\n// Display land cover on the map.\nMap.setCenter(-114, 38, 6);\nMap.addLayer(landcover, vis, 'Rangeland Annual Herbaceous %');\n", "environment": "[]"}, {"name": "USGS_SRTMGL1_003", "code": "var dataset = ee.Image('USGS/SRTMGL1_003');\nvar elevation = dataset.select('elevation');\nvar slope = ee.Terrain.slope(elevation);\nMap.setCenter(-112.8598, 36.2841, 10);\nMap.addLayer(slope, {min: 0, max: 60}, 'slope');\n", "environment": "[]"}, {"name": "USGS_WBD_2017_HUC02", "code": "var dataset = ee.FeatureCollection('USGS/WBD/2017/HUC02');\n\nvar visualization = {\n  color: '808080',\n  strokeWidth: 1\n};\n\ndataset = dataset.draw(visualization);\n\nMap.setCenter(-105.861, 39.529, 7);\nMap.addLayer(dataset, null, 'Basins');\n", "environment": "[]"}, {"name": "USGS_WBD_2017_HUC02_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('USGS/WBD/2017/HUC02_FeatureView');\n\nvar visParams = {\n  color: '808080',\n  lineWidth: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Basins');\n\nMap.setCenter(-105.861, 39.529, 7);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "USGS_WBD_2017_HUC04", "code": "var dataset = ee.FeatureCollection('USGS/WBD/2017/HUC04');\n\nvar visualization = {\n  color: '808080',\n  strokeWidth: 1\n};\n\ndataset = dataset.draw(visualization);\n\nMap.setCenter(-105.861, 39.529, 7);\nMap.addLayer(dataset, null, 'Basins');\n", "environment": "[]"}, {"name": "USGS_WBD_2017_HUC04_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('USGS/WBD/2017/HUC04_FeatureView');\n\nvar visParams = {\n  color: '808080',\n  lineWidth: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Basins');\n\nMap.setCenter(-105.861, 39.529, 7);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "USGS_WBD_2017_HUC06", "code": "var dataset = ee.FeatureCollection('USGS/WBD/2017/HUC06');\n\nvar visualization = {\n  color: '808080',\n  strokeWidth: 1\n};\n\ndataset = dataset.draw(visualization);\n\nMap.setCenter(-105.861, 39.529, 7);\nMap.addLayer(dataset, null, 'Basins');\n", "environment": "[]"}, {"name": "USGS_WBD_2017_HUC06_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('USGS/WBD/2017/HUC06_FeatureView');\n\nvar visParams = {\n  color: '808080',\n  lineWidth: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Basins');\n\nMap.setCenter(-105.861, 39.529, 7);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "USGS_WBD_2017_HUC08", "code": "var dataset = ee.FeatureCollection('USGS/WBD/2017/HUC08');\n\nvar visualization = {\n  color: '808080',\n  strokeWidth: 1\n};\n\ndataset = dataset.draw(visualization);\n\nMap.setCenter(-105.861, 39.529, 7);\nMap.addLayer(dataset, null, 'Basins');\n", "environment": "[]"}, {"name": "USGS_WBD_2017_HUC08_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('USGS/WBD/2017/HUC08_FeatureView');\n\nvar visParams = {\n  color: '808080',\n  lineWidth: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Basins');\n\nMap.setCenter(-105.861, 39.529, 7);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "USGS_WBD_2017_HUC10", "code": "var dataset = ee.FeatureCollection('USGS/WBD/2017/HUC10');\n\nvar visualization = {\n  color: '808080',\n  strokeWidth: 1\n};\n\ndataset = dataset.draw(visualization);\n\nMap.setCenter(-105.861, 39.529, 7);\nMap.addLayer(dataset, null, 'Basins');\n", "environment": "[]"}, {"name": "USGS_WBD_2017_HUC10_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('USGS/WBD/2017/HUC10_FeatureView');\n\nvar visParams = {\n  color: '808080',\n  lineWidth: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Basins');\n\nMap.setCenter(-105.861, 39.529, 7);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "USGS_WBD_2017_HUC12", "code": "var dataset = ee.FeatureCollection('USGS/WBD/2017/HUC12');\n\nvar visualization = {\n  color: '808080',\n  strokeWidth: 1\n};\n\ndataset = dataset.draw(visualization);\n\nMap.setCenter(-105.861, 39.529, 7);\nMap.addLayer(dataset, null, 'Basins');\n", "environment": "[]"}, {"name": "USGS_WBD_2017_HUC12_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('USGS/WBD/2017/HUC12_FeatureView');\n\nvar visParams = {\n  color: '808080',\n  lineWidth: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Basins');\n\nMap.setCenter(-105.861, 39.529, 7);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "UTOKYO_WTLAB_KBDI_v1", "code": "var collection = ee.ImageCollection('UTOKYO/WTLAB/KBDI/v1')\n  .select('KBDI')\n  .filterDate('2019-01-01', '2019-01-10');\nvar bandViz = {\n  min: 0,\n  max: 800,\n  palette: [\n    '001a4d', '003cb3', '80aaff', '336600', 'cccc00', 'cc9900', 'cc6600',\n    '660033'\n  ]\n};\nMap.addLayer(collection.mean(), bandViz, 'Keetch-Byram Drought Index');\nMap.setCenter(120, 3, 3);\n", "environment": "[]"}, {"name": "VITO_PROBAV_C1_S1_TOC_100M", "code": "var dataset = ee.ImageCollection('VITO/PROBAV/C1/S1_TOC_100M')\n                  .filter(ee.Filter.date('2018-03-01', '2018-04-01'));\nvar falseColor = dataset.select(['RED', 'NIR', 'BLUE']);\nvar falseColorVis = {\n  min: 20.0,\n  max: 2000.0,\n};\nMap.setCenter(17.93, 7.71, 2);\nMap.addLayer(falseColor, falseColorVis, 'False Color');\n", "environment": "[]"}, {"name": "VITO_PROBAV_C1_S1_TOC_333M", "code": "var dataset = ee.ImageCollection('VITO/PROBAV/C1/S1_TOC_333M')\n                  .filter(ee.Filter.date('2018-03-01', '2018-04-01'));\nvar falseColor = dataset.select(['RED', 'NIR', 'BLUE']);\nvar falseColorVis = {\n  min: 20.0,\n  max: 2000.0,\n};\nMap.setCenter(17.93, 7.71, 2);\nMap.addLayer(falseColor, falseColorVis, 'False Color');\n", "environment": "[]"}, {"name": "VITO_PROBAV_S1_TOC_100M", "code": "var dataset = ee.ImageCollection('VITO/PROBAV/S1_TOC_100M');\n\nvar visualization = {\n  bands: ['RED', 'NIR', 'BLUE'],\n  min: 20.0,\n  max: 2000.0,\n};\n\nMap.setCenter(17.93, 7.71, 2);\n\nMap.addLayer(dataset, visualization, 'False Color');\n", "environment": "[]"}, {"name": "VITO_PROBAV_S1_TOC_333M", "code": "var dataset = ee.ImageCollection('VITO/PROBAV/S1_TOC_333M');\n\nvar visualization = {\n  bands: ['RED', 'NIR', 'BLUE'],\n  min: 20.0,\n  max: 2000.0,\n};\n\nMap.setCenter(17.93, 7.71, 2);\n\nMap.addLayer(dataset, visualization, 'False Color');\n", "environment": "[]"}, {"name": "WCMC_WDPA_current_points", "code": "var dataset = ee.FeatureCollection('WCMC/WDPA/current/points');\n\ndataset = dataset.style({\n  color: '4285F4',\n  pointSize: 3,\n});\n\nMap.setCenter(110.57, 0.88, 4);\n\nMap.addLayer(dataset, {}, 'Protected Area Points');\n", "environment": "[]"}, {"name": "WCMC_WDPA_current_points_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('WCMC/WDPA/current/points_FeatureView');\n\nvar visParams = {\n  color: '4285F4',\n  pointShape: 'circle',\n  pointSize: 7,\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Protected Area Points');\n\nMap.setCenter(110.57, 0.88, 4);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "WCMC_WDPA_current_polygons", "code": "var dataset = ee.FeatureCollection('WCMC/WDPA/current/polygons');\nvar visParams = {\n  palette: ['2ed033', '5aff05', '67b9ff', '5844ff', '0a7618', '2c05ff'],\n  min: 0.0,\n  max: 1550000.0,\n  opacity: 0.8,\n};\nvar image = ee.Image().float().paint(dataset, 'REP_AREA');\nMap.setCenter(41.104, -17.724, 6);\nMap.addLayer(image, visParams, 'WCMC/WDPA/current/polygons');\nMap.addLayer(dataset, null, 'for Inspector', false);\n", "environment": "[]"}, {"name": "WCMC_WDPA_current_polygons_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('WCMC/WDPA/current/polygons_FeatureView');\n\nvar visParams = {\n  color: {\n    property: 'REP_AREA',\n    mode: 'linear',\n    palette: ['2ed033', '5aff05', '67b9ff', '5844ff', '0a7618', '2c05ff'],\n    min: 0.0,\n    max: 1550000.0\n  },\n  opacity: 0.8\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('WCMC/WDPA/current/polygons');\n\nMap.setCenter(41.104, -17.724, 6);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "WCMC_biomass_carbon_density_v1_0", "code": "var image = ee.Image('WCMC/biomass_carbon_density/v1_0/2010');\n\nMap.addLayer(ee.Image(1), {min: 0, max: 1}, 'base_map');\nMap.addLayer(\n    image, {\n      min: 1,\n      max: 180,\n      palette: ['d9f0a3', 'addd8e', '78c679', '41ab5d', '238443', '005a32']\n    },\n    'carbon_tonnes_per_ha');\n", "environment": "[]"}, {"name": "WHBU_NBAR_1YEAR", "code": "var dataset = ee.ImageCollection(\"WHBU/NBAR_1YEAR\");\n\nMap.addLayer(dataset.mean(), {min:0, max:7000});\n", "environment": "[]"}, {"name": "WHBU_NBAR_2YEAR", "code": "var dataset = ee.ImageCollection(\"WHBU/NBAR_2YEAR\");\n\nMap.addLayer(dataset.mean(), {min:0, max:7000});\n", "environment": "[]"}, {"name": "WHBU_NBAR_3YEAR", "code": "var dataset = ee.ImageCollection(\"WHBU/NBAR_3YEAR\");\n\nMap.addLayer(dataset.mean(), {min:0, max:7000});\n", "environment": "[]"}, {"name": "WHRC_biomass_tropical", "code": "var dataset = ee.Image('WHRC/biomass/tropical');\nvar liveWoodyBiomass = dataset.select('Mg');\nvar visParams = {\n  min: 0.0,\n  max: 350.0,\n  palette: [\n    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',\n    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',\n    '012E01', '011D01', '011301'\n  ],\n};\nMap.setCenter(-69.43, 0.35, 3);\nMap.addLayer(liveWoodyBiomass, visParams, 'Aboveground Live Woody Biomass');\n", "environment": "[]"}, {"name": "WORLDCLIM_V1_BIO", "code": "var dataset = ee.Image('WORLDCLIM/V1/BIO');\nvar annualMeanTemperature = dataset.select('bio01');\nvar visParams = {\n  min: -230.0,\n  max: 300.0,\n  palette: ['blue', 'purple', 'cyan', 'green', 'yellow', 'red'],\n};\nMap.setCenter(71.72, 52.48, 3.0);\nMap.addLayer(annualMeanTemperature, visParams, 'Annual Mean Temperature');\n", "environment": "[]"}, {"name": "WORLDCLIM_V1_MONTHLY", "code": "var dataset = ee.ImageCollection('WORLDCLIM/V1/MONTHLY');\nvar meanTemperature = dataset.select('tavg');\nvar meanTemperatureVis = {\n  min: -400.0,\n  max: 300.0,\n  palette: ['blue', 'purple', 'cyan', 'green', 'yellow', 'red'],\n};\nMap.setCenter(71.72, 52.48, 3.0);\nMap.addLayer(meanTemperature, meanTemperatureVis, 'Mean Temperature');\n", "environment": "[]"}, {"name": "WRI_GFW_FORMA_alerts", "code": "var dataset = ee.Image('WRI/GFW/FORMA/alerts');\nvar formaAlerts = dataset.select('alert_delta');\nvar formaAlertsVis = {\n  min: 25.0,\n  max: 75.0,\n  palette: ['d65898', 'da68a2'],\n};\nMap.setCenter(6.746, 46.529, 6);\nMap.addLayer(formaAlerts, formaAlertsVis, 'FORMA Alerts');", "environment": "[]"}, {"name": "WRI_GFW_FORMA_raw_output_firms", "code": "var dataset = ee.ImageCollection('WRI/GFW/FORMA/raw_output_firms')\n                  .filter(ee.Filter.date('2018-08-01', '2018-08-15'));\nvar percentageOfClearing = dataset.select('nday');\nvar visParams = {\n  min: 0.0,\n  max: 0.01,\n};\nMap.setCenter(25.73, -7.61, 2);\nMap.addLayer(percentageOfClearing, visParams, 'Percentage of clearing');\n", "environment": "[]"}, {"name": "WRI_GFW_FORMA_raw_output_ndvi", "code": "var dataset = ee.ImageCollection('WRI/GFW/FORMA/raw_output_ndvi')\n                  .filter(ee.Filter.date('2018-01-01', '2018-01-02'));\nvar percentOfClearing = dataset.select('clearing');\nvar visParams = {\n  min: 0.0,\n  max: 1.0,\n};\nMap.setCenter(25.73, -7.61, 2);\nMap.addLayer(\n    percentOfClearing, visParams, 'Percent of clearing in the last 365 days');\n", "environment": "[]"}, {"name": "WRI_GFW_FORMA_thresholds", "code": "var dataset = ee.Image('WRI/GFW/FORMA/thresholds');\nvar thresholds = dataset.select('delta_bound');\nvar visParams = {\n  min: 0.0,\n  max: 50.0,\n};\nMap.setCenter(25.73, -7.61, 2);\nMap.addLayer(thresholds, visParams, 'Thresholds for FORMA alerts');\n", "environment": "[]"}, {"name": "WRI_GFW_FORMA_vegetation_tstats", "code": "var dataset = ee.ImageCollection('WRI/GFW/FORMA/vegetation_tstats')\n                  .filter(ee.Filter.date('2018-07-01', '2018-07-15'));\nvar tstat = dataset.select('tstat_r');\nvar visParams = {\n  min: 0.0,\n  max: 1.0,\n};\nMap.setCenter(25.73, -7.61, 2);\nMap.addLayer(tstat, visParams, 'Reversed rectified t-statistics');\n", "environment": "[]"}, {"name": "WRI_GPPD_power_plants", "code": "// Visualization for WRI/GPPD/power_plants\n// https://code.earthengine.google.com/9efbd726e4a8ba9b8b56ba94f1267678\n\nvar table = ee.FeatureCollection(\"WRI/GPPD/power_plants\");\n\n// Get a color from a fuel\nvar fuelColor = ee.Dictionary({\n  'Coal': '000000',\n  'Oil': '593704',\n  'Gas': 'BC80BD',\n  'Hydro': '0565A6',\n  'Nuclear': 'E31A1C',\n  'Solar': 'FF7F00',\n  'Waste': '6A3D9A',\n  'Wind': '5CA2D1',\n  'Geothermal': 'FDBF6F',\n  'Biomass': '229A00'\n});\n\n// List of fuels to add to the map\nvar fuels = ['Coal', 'Oil', 'Gas', 'Hydro', 'Nuclear', 'Solar', 'Waste',\n    'Wind', 'Geothermal', 'Biomass'];\n\n/**\n * Computes size from capacity and color from fuel type.\n *\n * @param {!ee.Geometry.Point} pt A point\n * @return {!ee.Geometry.Point} Input point with added style dictionary.\n */\nfunction addStyle(pt) {\n  var size = ee.Number(pt.get('capacitymw')).sqrt().divide(10).add(2);\n  var color = fuelColor.get(pt.get('fuel1'));\n  return pt.set('styleProperty', ee.Dictionary({'pointSize': size, 'color': color}));\n}\n\n// Make a FeatureCollection out of the power plant data table\nvar pp = ee.FeatureCollection(table).map(addStyle);\nprint(pp.first());\n\n/**\n * Adds power plants of a certain fuel type to the map.\n *\n * @param {string} fuel A fuel type\n */\nfunction addLayer(fuel) {\n  print(fuel);\n  Map.addLayer(pp.filter(ee.Filter.eq('fuel1', fuel)).style({styleProperty: 'styleProperty', neighborhood: 50}), {}, fuel, true, 0.65);\n}\n\n// Apply `addLayer` to each record in `fuels`\nfuelColor.keys().evaluate(function(fuelsList) {\n  fuelsList.map(addLayer);\n});\n", "environment": "[]"}, {"name": "WRI_GPPD_power_plants_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer('WRI/GPPD/power_plants_FeatureView');\n\nvar visParams = {\n  opacity: 0.65,\n  color: {\n    property: 'fuel1',\n    categories: [\n      ['Coal', '000000'],\n      ['Oil', '593704'],\n      ['Gas', 'BC80BD'],\n      ['Hydro', '0565A6'],\n      ['Nuclear', 'E31A1C'],\n      ['Solar', 'FF7F00'],\n      ['Waste', '6A3D9A'],\n      ['Wind', '5CA2D1'],\n      ['Geothermal', 'FDBF6F'],\n      ['Biomass', '229A00']\n    ],\n    defaultValue: 'FFFFFF'\n  },\n  rules: [\n    {\n      filter: ee.Filter.expression('capacitymw \u003c 500'),\n      pointSize: 5,\n    },\n    {\n      filter: ee.Filter.expression('capacitymw \u003e= 500 AND capacitymw \u003c 1000'),\n      pointSize: 10,\n    },\n    {\n      filter: ee.Filter.expression('capacitymw \u003e= 1000'),\n      pointSize: 15,\n    }\n  ]\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Power plant (fuel type and capacity)');\n\nMap.setCenter(16, 49, 4);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "WWF_HydroATLAS_v1_Basins_level1", "code": "// Load the HydroATLAS dataset.\nvar basinATLAS = ee.FeatureCollection(\"WWF/HydroATLAS/v1/Basins/level1\");\n\n// Set visualization to show upstream drainage area.\nvar upstreamDrainageArea = ee.Image().byte().paint({\n  featureCollection: basinATLAS,\n  color: 'UP_AREA',\n});\n\n// Set map extent to show the Nile and surrounding basins.\nMap.setCenter(36.35, 24.0, 2);\n\n// Create a viridis colormap.\nvar viridis = ['#481567FF', '#482677FF', '#453781FF', '#404788FF',\n               '#39568CFF', '#33638DFF', '#2D708EFF', '#287D8EFF',\n               '#238A8DFF', '#1F968BFF', '#20A387FF', '#29AF7FFF',\n               '#3CBB75FF', '#55C667FF', '#73D055FF', '#95D840FF',\n               '#B8DE29FF', '#DCE319FF', '#FDE725FF'];\n\nvar visualization = {palette: viridis, min: 1e5, max: 3e7};\n\nMap.addLayer(upstreamDrainageArea, visualization,\n             'Upstream Drainage Area [mm]', true, 0.8);\n", "environment": "[]"}, {"name": "WWF_HydroATLAS_v1_Basins_level10", "code": "// Load the HydroATLAS dataset.\nvar basinATLAS = ee.FeatureCollection(\"WWF/HydroATLAS/v1/Basins/level10\");\n\n// Set visualization to show upstream drainage area.\nvar upstreamDrainageArea = ee.Image().byte().paint({\n  featureCollection: basinATLAS,\n  color: 'UP_AREA',\n});\n\n// Set map extent to show the Nile and surrounding basins.\nMap.setCenter(36.35, 24.0, 5.5);\n\n// Create a viridis colormap.\nvar viridis = ['#481567FF', '#482677FF', '#453781FF', '#404788FF',\n               '#39568CFF', '#33638DFF', '#2D708EFF', '#287D8EFF',\n               '#238A8DFF', '#1F968BFF', '#20A387FF', '#29AF7FFF',\n               '#3CBB75FF', '#55C667FF', '#73D055FF', '#95D840FF',\n               '#B8DE29FF', '#DCE319FF', '#FDE725FF'];\n\nMap.addLayer(upstreamDrainageArea, {palette: viridis, max: 35000},\n             'Upstream Drainage Area [mm]', true, 0.8);\n", "environment": "[]"}, {"name": "WWF_HydroATLAS_v1_Basins_level11", "code": "// Load the HydroATLAS dataset.\nvar basinATLAS = ee.FeatureCollection(\"WWF/HydroATLAS/v1/Basins/level11\");\n\n// Set visualization to show upstream drainage area.\nvar upstreamDrainageArea = ee.Image().byte().paint({\n  featureCollection: basinATLAS,\n  color: 'UP_AREA',\n});\n\n// Set map extent to show the Nile and surrounding basins.\nMap.setCenter(36.35, 24.0, 5.5);\n\n// Create a viridis colormap.\nvar viridis = ['#481567FF', '#482677FF', '#453781FF', '#404788FF',\n               '#39568CFF', '#33638DFF', '#2D708EFF', '#287D8EFF',\n               '#238A8DFF', '#1F968BFF', '#20A387FF', '#29AF7FFF',\n               '#3CBB75FF', '#55C667FF', '#73D055FF', '#95D840FF',\n               '#B8DE29FF', '#DCE319FF', '#FDE725FF'];\n\nMap.addLayer(upstreamDrainageArea, {palette: viridis, max: 10000},\n             'Upstream Drainage Area [mm]', true, 0.8);\n", "environment": "[]"}, {"name": "WWF_HydroATLAS_v1_Basins_level12", "code": "// Load the HydroATLAS dataset.\nvar basinATLAS = ee.FeatureCollection(\"WWF/HydroATLAS/v1/Basins/level12\");\n\n// Set visualization to show upstream drainage area.\nvar upstreamDrainageArea = ee.Image().byte().paint({\n  featureCollection: basinATLAS,\n  color: 'UP_AREA',\n});\n\n// Set map extent to show the Nile and surrounding basins.\nMap.setCenter(36.35, 24.0, 5.5);\n\n// Create a viridis colormap.\nvar viridis = ['#481567FF', '#482677FF', '#453781FF', '#404788FF',\n               '#39568CFF', '#33638DFF', '#2D708EFF', '#287D8EFF',\n               '#238A8DFF', '#1F968BFF', '#20A387FF', '#29AF7FFF',\n               '#3CBB75FF', '#55C667FF', '#73D055FF', '#95D840FF',\n               '#B8DE29FF', '#DCE319FF', '#FDE725FF'];\n\nMap.addLayer(upstreamDrainageArea, {palette: viridis, max: 10000},\n             'Upstream Drainage Area [mm]', true, 0.8);\n", "environment": "[]"}, {"name": "WWF_HydroATLAS_v1_Basins_level2", "code": "// Load the HydroATLAS dataset.\nvar basinATLAS = ee.FeatureCollection(\"WWF/HydroATLAS/v1/Basins/level2\");\n\n// Set visualization to show upstream drainage area.\nvar upstreamDrainageArea = ee.Image().byte().paint({\n  featureCollection: basinATLAS,\n  color: 'UP_AREA',\n});\n\n// Set map extent to show the Nile and surrounding basins.\nMap.setCenter(36.35, 24.0, 2);\n\n// Create a viridis colormap.\nvar viridis = ['#481567FF', '#482677FF', '#453781FF', '#404788FF',\n               '#39568CFF', '#33638DFF', '#2D708EFF', '#287D8EFF',\n               '#238A8DFF', '#1F968BFF', '#20A387FF', '#29AF7FFF',\n               '#3CBB75FF', '#55C667FF', '#73D055FF', '#95D840FF',\n               '#B8DE29FF', '#DCE319FF', '#FDE725FF'];\n\nMap.addLayer(upstreamDrainageArea, {palette: viridis, max: 8e6},\n             'Upstream Drainage Area [mm]', true, 0.8);\n", "environment": "[]"}, {"name": "WWF_HydroATLAS_v1_Basins_level3", "code": "// Load the HydroATLAS dataset.\nvar basinATLAS = ee.FeatureCollection(\"WWF/HydroATLAS/v1/Basins/level3\");\n\n// Set visualization to show upstream drainage area.\nvar upstreamDrainageArea = ee.Image().byte().paint({\n  featureCollection: basinATLAS,\n  color: 'UP_AREA',\n});\n\n// Set map extent to show the Nile and surrounding basins.\nMap.setCenter(36.35, 24.0, 2);\n\n// Create a viridis colormap.\nvar viridis = ['#481567FF', '#482677FF', '#453781FF', '#404788FF',\n               '#39568CFF', '#33638DFF', '#2D708EFF', '#287D8EFF',\n               '#238A8DFF', '#1F968BFF', '#20A387FF', '#29AF7FFF',\n               '#3CBB75FF', '#55C667FF', '#73D055FF', '#95D840FF',\n               '#B8DE29FF', '#DCE319FF', '#FDE725FF'];\n\nMap.addLayer(upstreamDrainageArea, {palette: viridis, max: 6e6},\n             'Upstream Drainage Area [mm]', true, 0.8);\n", "environment": "[]"}, {"name": "WWF_HydroATLAS_v1_Basins_level4", "code": "// Load the HydroATLAS dataset.\nvar basinATLAS = ee.FeatureCollection(\"WWF/HydroATLAS/v1/Basins/level4\");\n\n// Set visualization to show upstream drainage area.\nvar upstreamDrainageArea = ee.Image().byte().paint({\n  featureCollection: basinATLAS,\n  color: 'UP_AREA',\n});\n\n// Set map extent to show the Nile and surrounding basins.\nMap.setCenter(36.35, 24.0, 3);\n\n// Create a viridis colormap.\nvar viridis = ['#481567FF', '#482677FF', '#453781FF', '#404788FF',\n               '#39568CFF', '#33638DFF', '#2D708EFF', '#287D8EFF',\n               '#238A8DFF', '#1F968BFF', '#20A387FF', '#29AF7FFF',\n               '#3CBB75FF', '#55C667FF', '#73D055FF', '#95D840FF',\n               '#B8DE29FF', '#DCE319FF', '#FDE725FF'];\n\nMap.addLayer(upstreamDrainageArea, {palette: viridis, max: 5e6},\n             'Upstream Drainage Area [mm]', true, 0.8);\n", "environment": "[]"}, {"name": "WWF_HydroATLAS_v1_Basins_level5", "code": "// Load the HydroATLAS dataset.\nvar basinATLAS = ee.FeatureCollection(\"WWF/HydroATLAS/v1/Basins/level5\");\n\n// Set visualization to show upstream drainage area.\nvar upstreamDrainageArea = ee.Image().byte().paint({\n  featureCollection: basinATLAS,\n  color: 'UP_AREA',\n});\n\n// Set map extent to show the Nile and surrounding basins.\nMap.setCenter(36.35, 24.0, 4);\n\n// Create a viridis colormap.\nvar viridis = ['#481567FF', '#482677FF', '#453781FF', '#404788FF',\n               '#39568CFF', '#33638DFF', '#2D708EFF', '#287D8EFF',\n               '#238A8DFF', '#1F968BFF', '#20A387FF', '#29AF7FFF',\n               '#3CBB75FF', '#55C667FF', '#73D055FF', '#95D840FF',\n               '#B8DE29FF', '#DCE319FF', '#FDE725FF'];\n\nMap.addLayer(upstreamDrainageArea, {palette: viridis, max: 1e5},\n             'Upstream Drainage Area [mm]', true, 0.8);\n", "environment": "[]"}, {"name": "WWF_HydroATLAS_v1_Basins_level6", "code": "// Load the HydroATLAS dataset.\nvar basinATLAS = ee.FeatureCollection(\"WWF/HydroATLAS/v1/Basins/level6\");\n\n// Set visualization to show upstream drainage area.\nvar upstreamDrainageArea = ee.Image().byte().paint({\n  featureCollection: basinATLAS,\n  color: 'UP_AREA',\n});\n\n// Set map extent to show the Nile and surrounding basins.\nMap.setCenter(36.35, 24.0, 4.5);\n\n// Create a viridis colormap.\nvar viridis = ['#481567FF', '#482677FF', '#453781FF', '#404788FF',\n               '#39568CFF', '#33638DFF', '#2D708EFF', '#287D8EFF',\n               '#238A8DFF', '#1F968BFF', '#20A387FF', '#29AF7FFF',\n               '#3CBB75FF', '#55C667FF', '#73D055FF', '#95D840FF',\n               '#B8DE29FF', '#DCE319FF', '#FDE725FF'];\n\nMap.addLayer(upstreamDrainageArea, {palette: viridis, max: 1e5},\n             'Upstream Drainage Area [mm]', true, 0.8);\n", "environment": "[]"}, {"name": "WWF_HydroATLAS_v1_Basins_level7", "code": "// Load the HydroATLAS dataset.\nvar basinATLAS = ee.FeatureCollection(\"WWF/HydroATLAS/v1/Basins/level7\");\n\n// Set visualization to show upstream drainage area.\nvar upstreamDrainageArea = ee.Image().byte().paint({\n  featureCollection: basinATLAS,\n  color: 'UP_AREA',\n});\n\n// Set map extent to show the Nile and surrounding basins.\nMap.setCenter(36.35, 24.0, 4.5);\n\n// Create a viridis colormap.\nvar viridis = ['#481567FF', '#482677FF', '#453781FF', '#404788FF',\n               '#39568CFF', '#33638DFF', '#2D708EFF', '#287D8EFF',\n               '#238A8DFF', '#1F968BFF', '#20A387FF', '#29AF7FFF',\n               '#3CBB75FF', '#55C667FF', '#73D055FF', '#95D840FF',\n               '#B8DE29FF', '#DCE319FF', '#FDE725FF'];\n\nMap.addLayer(upstreamDrainageArea, {palette: viridis, max: 1e5},\n             'Upstream Drainage Area [mm]', true, 0.8);\n", "environment": "[]"}, {"name": "WWF_HydroATLAS_v1_Basins_level8", "code": "// Load the HydroATLAS dataset.\nvar basinATLAS = ee.FeatureCollection(\"WWF/HydroATLAS/v1/Basins/level8\");\n\n// Set visualization to show upstream drainage area.\nvar upstreamDrainageArea = ee.Image().byte().paint({\n  featureCollection: basinATLAS,\n  color: 'UP_AREA',\n});\n\n// Set map extent to show the Nile and surrounding basins.\nMap.setCenter(36.35, 24.0, 5);\n\n// Create a viridis colormap.\nvar viridis = ['#481567FF', '#482677FF', '#453781FF', '#404788FF',\n               '#39568CFF', '#33638DFF', '#2D708EFF', '#287D8EFF',\n               '#238A8DFF', '#1F968BFF', '#20A387FF', '#29AF7FFF',\n               '#3CBB75FF', '#55C667FF', '#73D055FF', '#95D840FF',\n               '#B8DE29FF', '#DCE319FF', '#FDE725FF'];\n\nMap.addLayer(upstreamDrainageArea, {palette: viridis, max: 35000},\n             'Upstream Drainage Area [mm]', true, 0.8);\n", "environment": "[]"}, {"name": "WWF_HydroATLAS_v1_Basins_level9", "code": "// Load the HydroATLAS dataset.\nvar basinATLAS = ee.FeatureCollection(\"WWF/HydroATLAS/v1/Basins/level9\");\n\n// Set visualization to show upstream drainage area.\nvar upstreamDrainageArea = ee.Image().byte().paint({\n  featureCollection: basinATLAS,\n  color: 'UP_AREA',\n});\n\n// Set map extent to show the Nile and surrounding basins.\nMap.setCenter(36.35, 24.0, 5);\n\n// Create a viridis colormap.\nvar viridis = ['#481567FF', '#482677FF', '#453781FF', '#404788FF',\n               '#39568CFF', '#33638DFF', '#2D708EFF', '#287D8EFF',\n               '#238A8DFF', '#1F968BFF', '#20A387FF', '#29AF7FFF',\n               '#3CBB75FF', '#55C667FF', '#73D055FF', '#95D840FF',\n               '#B8DE29FF', '#DCE319FF', '#FDE725FF'];\n\nMap.addLayer(upstreamDrainageArea, {palette: viridis, max: 35000},\n             'Upstream Drainage Area [mm]', true, 0.8);\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_03CONDEM", "code": "var dataset = ee.Image('WWF/HydroSHEDS/03CONDEM');\nvar elevation = dataset.select('b1');\nvar elevationVis = {\n  min: -50.0,\n  max: 3000.0,\n  gamma: 2.0,\n};\nMap.setCenter(-121.652, 38.022, 8);\nMap.addLayer(elevation, elevationVis, 'Elevation');", "environment": "[]"}, {"name": "WWF_HydroSHEDS_03DIR", "code": "var dataset = ee.Image('WWF/HydroSHEDS/03DIR');\nvar drainageDirection = dataset.select('b1');\nvar drainageDirectionVis = {\n  min: 1.0,\n  max: 128.0,\n  palette: [\n    '000000', '023858', '006837', '1a9850', '66bd63', 'a6d96a', 'd9ef8b',\n    'ffffbf', 'fee08b', 'fdae61', 'f46d43', 'd73027'\n  ],\n};\nMap.setCenter(-121.652, 38.022, 8);\nMap.addLayer(drainageDirection, drainageDirectionVis, 'Drainage Direction');", "environment": "[]"}, {"name": "WWF_HydroSHEDS_03VFDEM", "code": "var dataset = ee.Image('WWF/HydroSHEDS/03VFDEM');\nvar elevation = dataset.select('b1');\nvar elevationVis = {\n  min: -50.0,\n  max: 3000.0,\n  gamma: 2.0,\n};\nMap.setCenter(-121.652, 38.022, 8);\nMap.addLayer(elevation, elevationVis, 'Elevation');", "environment": "[]"}, {"name": "WWF_HydroSHEDS_15ACC", "code": "var dataset = ee.Image('WWF/HydroSHEDS/15ACC');\nvar flowAccumulation = dataset.select('b1');\nvar flowAccumulationVis = {\n  min: 0.0,\n  max: 500.0,\n  palette: [\n    '000000', '023858', '006837', '1a9850', '66bd63', 'a6d96a', 'd9ef8b',\n    'ffffbf', 'fee08b', 'fdae61', 'f46d43', 'd73027'\n  ],\n};\nMap.setCenter(-121.652, 38.022, 8);\nMap.addLayer(flowAccumulation, flowAccumulationVis, 'Flow Accumulation');", "environment": "[]"}, {"name": "WWF_HydroSHEDS_15CONDEM", "code": "var dataset = ee.Image('WWF/HydroSHEDS/15CONDEM');\nvar elevation = dataset.select('b1');\nvar elevationVis = {\n  min: -50.0,\n  max: 3000.0,\n  gamma: 2.0,\n};\nMap.setCenter(-121.652, 38.022, 8);\nMap.addLayer(elevation, elevationVis, 'Elevation');", "environment": "[]"}, {"name": "WWF_HydroSHEDS_15DIR", "code": "var dataset = ee.Image('WWF/HydroSHEDS/15DIR');\nvar drainageDirection = dataset.select('b1');\nvar drainageDirectionVis = {\n  min: 1.0,\n  max: 128.0,\n  palette: [\n    '000000', '023858', '006837', '1a9850', '66bd63', 'a6d96a', 'd9ef8b',\n    'ffffbf', 'fee08b', 'fdae61', 'f46d43', 'd73027'\n  ],\n};\nMap.setCenter(-121.652, 38.022, 8);\nMap.addLayer(drainageDirection, drainageDirectionVis, 'Drainage Direction');", "environment": "[]"}, {"name": "WWF_HydroSHEDS_30ACC", "code": "var dataset = ee.Image('WWF/HydroSHEDS/30ACC');\nvar flowAccumulation = dataset.select('b1');\nvar flowAccumulationVis = {\n  min: 0.0,\n  max: 500.0,\n  palette: [\n    '000000', '023858', '006837', '1a9850', '66bd63', 'a6d96a', 'd9ef8b',\n    'ffffbf', 'fee08b', 'fdae61', 'f46d43', 'd73027'\n  ],\n};\nMap.setCenter(-121.652, 38.022, 8);\nMap.addLayer(flowAccumulation, flowAccumulationVis, 'Flow Accumulation');", "environment": "[]"}, {"name": "WWF_HydroSHEDS_30CONDEM", "code": "var dataset = ee.Image('WWF/HydroSHEDS/30CONDEM');\nvar elevation = dataset.select('b1');\nvar elevationVis = {\n  min: -50.0,\n  max: 3000.0,\n  gamma: 2.0,\n};\nMap.setCenter(-121.652, 38.022, 8);\nMap.addLayer(elevation, elevationVis, 'Elevation');", "environment": "[]"}, {"name": "WWF_HydroSHEDS_30DIR", "code": "var dataset = ee.Image('WWF/HydroSHEDS/30DIR');\nvar drainageDirection = dataset.select('b1');\nvar drainageDirectionVis = {\n  min: 1.0,\n  max: 128.0,\n  palette: [\n    '000000', '023858', '006837', '1a9850', '66bd63', 'a6d96a', 'd9ef8b',\n    'ffffbf', 'fee08b', 'fdae61', 'f46d43', 'd73027'\n  ],\n};\nMap.setCenter(-121.652, 38.022, 8);\nMap.addLayer(drainageDirection, drainageDirectionVis, 'Drainage Direction');\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_1", "code": "var dataset = ee.FeatureCollection('WWF/HydroSHEDS/v1/Basins/hybas_1');\n\nvar visualization = {\n  color: '808080',\n  strokeWidth: 1\n};\n\ndataset = dataset.draw(visualization);\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.addLayer(dataset, null, 'Basins');\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_10", "code": "var dataset = ee.FeatureCollection('WWF/HydroSHEDS/v1/Basins/hybas_10');\n\nvar visualization = {\n  color: '808080',\n  strokeWidth: 1\n};\n\ndataset = dataset.draw(visualization);\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.addLayer(dataset, null, 'Basins');\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_10_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer(\n  'WWF/HydroSHEDS/v1/Basins/hybas_10_FeatureView');\n\nvar visParams = {\n  color: '808080',\n  lineWidth: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Basins');\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_11", "code": "var dataset = ee.FeatureCollection('WWF/HydroSHEDS/v1/Basins/hybas_11');\n\nvar visualization = {\n  color: '808080',\n  strokeWidth: 1\n};\n\ndataset = dataset.draw(visualization);\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.addLayer(dataset, null, 'Basins');\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_11_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer(\n  'WWF/HydroSHEDS/v1/Basins/hybas_11_FeatureView');\n\nvar visParams = {\n  color: '808080',\n  lineWidth: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Basins');\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_12", "code": "var dataset = ee.FeatureCollection('WWF/HydroSHEDS/v1/Basins/hybas_12');\n\nvar visualization = {\n  color: '808080',\n  strokeWidth: 1\n};\n\ndataset = dataset.draw(visualization);\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.addLayer(dataset, null, 'Basins');\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_12_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer(\n  'WWF/HydroSHEDS/v1/Basins/hybas_12_FeatureView');\n\nvar visParams = {\n  color: '808080',\n  lineWidth: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Basins');\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_1_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer(\n  'WWF/HydroSHEDS/v1/Basins/hybas_1_FeatureView');\n\nvar visParams = {\n  color: '808080',\n  lineWidth: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Basins');\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_2", "code": "var dataset = ee.FeatureCollection('WWF/HydroSHEDS/v1/Basins/hybas_2');\n\nvar visualization = {\n  color: '808080',\n  strokeWidth: 1\n};\n\ndataset = dataset.draw(visualization);\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.addLayer(dataset, null, 'Basins');\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_2_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer(\n  'WWF/HydroSHEDS/v1/Basins/hybas_2_FeatureView');\n\nvar visParams = {\n  color: '808080',\n  lineWidth: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Basins');\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_3", "code": "var dataset = ee.FeatureCollection('WWF/HydroSHEDS/v1/Basins/hybas_3');\n\nvar visualization = {\n  color: '808080',\n  strokeWidth: 1\n};\n\ndataset = dataset.draw(visualization);\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.addLayer(dataset, null, 'Basins');\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_3_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer(\n  'WWF/HydroSHEDS/v1/Basins/hybas_3_FeatureView');\n\nvar visParams = {\n  color: '808080',\n  lineWidth: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Basins');\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_4", "code": "var dataset = ee.FeatureCollection('WWF/HydroSHEDS/v1/Basins/hybas_4');\n\nvar visualization = {\n  color: '808080',\n  strokeWidth: 1\n};\n\ndataset = dataset.draw(visualization);\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.addLayer(dataset, null, 'Basins');\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_4_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer(\n  'WWF/HydroSHEDS/v1/Basins/hybas_4_FeatureView');\n\nvar visParams = {\n  color: '808080',\n  lineWidth: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Basins');\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_5", "code": "var dataset = ee.FeatureCollection('WWF/HydroSHEDS/v1/Basins/hybas_5');\n\nvar visualization = {\n  color: '808080',\n  strokeWidth: 1\n};\n\ndataset = dataset.draw(visualization);\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.addLayer(dataset, null, 'Basins');\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_5_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer(\n  'WWF/HydroSHEDS/v1/Basins/hybas_5_FeatureView');\n\nvar visParams = {\n  color: '808080',\n  lineWidth: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Basins');\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_6", "code": "var dataset = ee.FeatureCollection('WWF/HydroSHEDS/v1/Basins/hybas_6');\n\nvar visualization = {\n  color: '808080',\n  strokeWidth: 1\n};\n\ndataset = dataset.draw(visualization);\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.addLayer(dataset, null, 'Basins');\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_6_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer(\n  'WWF/HydroSHEDS/v1/Basins/hybas_6_FeatureView');\n\nvar visParams = {\n  color: '808080',\n  lineWidth: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Basins');\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_7", "code": "var dataset = ee.FeatureCollection('WWF/HydroSHEDS/v1/Basins/hybas_7');\n\nvar visualization = {\n  color: '808080',\n  strokeWidth: 1\n};\n\ndataset = dataset.draw(visualization);\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.addLayer(dataset, null, 'Basins');\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_7_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer(\n  'WWF/HydroSHEDS/v1/Basins/hybas_7_FeatureView');\n\nvar visParams = {\n  color: '808080',\n  lineWidth: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Basins');\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_8", "code": "var dataset = ee.FeatureCollection('WWF/HydroSHEDS/v1/Basins/hybas_8');\n\nvar visualization = {\n  color: '808080',\n  strokeWidth: 1\n};\n\ndataset = dataset.draw(visualization);\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.addLayer(dataset, null, 'Basins');\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_8_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer(\n  'WWF/HydroSHEDS/v1/Basins/hybas_8_FeatureView');\n\nvar visParams = {\n  color: '808080',\n  lineWidth: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Basins');\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_9", "code": "var dataset = ee.FeatureCollection('WWF/HydroSHEDS/v1/Basins/hybas_9');\n\nvar visualization = {\n  color: '808080',\n  strokeWidth: 1\n};\n\ndataset = dataset.draw(visualization);\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.addLayer(dataset, null, 'Basins');\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_Basins_hybas_9_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer(\n  'WWF/HydroSHEDS/v1/Basins/hybas_9_FeatureView');\n\nvar visParams = {\n  color: '808080',\n  lineWidth: 1\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Basins');\n\nMap.setCenter(-117.731, 53.033, 7);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_FreeFlowingRivers", "code": "var dataset = ee.FeatureCollection('WWF/HydroSHEDS/v1/FreeFlowingRivers');\n\n// Paint \"RIV_ORD\" (river order) value to an image for visualization.\nvar datasetVis = ee.Image().byte().paint(dataset, 'RIV_ORD', 2);\n\nvar visParams = {\n  min: 1,\n  max: 10,\n  palette: ['08519c', '3182bd', '6baed6', 'bdd7e7', 'eff3ff']\n};\n\nMap.setCenter(-122.348, 45.738, 9);\nMap.addLayer(datasetVis, visParams, 'Free flowing rivers');\nMap.addLayer(dataset, null, 'FeatureCollection', false);", "environment": "[]"}, {"name": "WWF_HydroSHEDS_v1_FreeFlowingRivers_FeatureView", "code": "var fvLayer = ui.Map.FeatureViewLayer(\n  'WWF/HydroSHEDS/v1/FreeFlowingRivers_FeatureView');\n\nvar visParams = {\n  lineWidth: 2,\n  color: {\n    property: 'RIV_ORD',\n    mode: 'linear',\n    palette: ['08519c', '3182bd', '6baed6', 'bdd7e7', 'eff3ff'],\n    min: 1,\n    max: 10\n  }\n};\n\nfvLayer.setVisParams(visParams);\nfvLayer.setName('Free flowing rivers');\n\nMap.setCenter(-122.348, 45.738, 9);\nMap.add(fvLayer);\n", "environment": "[]"}, {"name": "WorldPop_GP_100m_pop", "code": "var dataset = ee.ImageCollection(\"WorldPop/GP/100m/pop\");\n\nvar visualization = {\n  bands: ['population'],\n  min: 0.0,\n  max: 50.0,\n  palette: ['24126c', '1fff4f', 'd4ff50']\n};\n\nMap.setCenter(113.643, 34.769, 7);\n\nMap.addLayer(dataset, visualization, 'Population');", "environment": "[]"}, {"name": "WorldPop_GP_100m_pop_age_sex", "code": "var dataset = ee.ImageCollection(\"WorldPop/GP/100m/pop_age_sex\");\n\nvar visualization = {\n  bands: ['population'],\n  min: 0.0,\n  max: 50.0,\n  palette: ['24126c', '1fff4f', 'd4ff50']\n};\n\nMap.setCenter(113.643, 34.769, 7);\n\nMap.addLayer(dataset, visualization, \"Population\");", "environment": "[]"}, {"name": "WorldPop_GP_100m_pop_age_sex_cons_unadj", "code": "var dataset = ee.ImageCollection(\"WorldPop/GP/100m/pop_age_sex_cons_unadj\");\n\nvar visualization = {\n  bands: ['population'],\n  min: 0.0,\n  max: 50.0,\n  palette: ['24126c', '1fff4f', 'd4ff50']\n};\n\nMap.setCenter(113.643, 34.769, 7);\n\nMap.addLayer(dataset, visualization, \"Population\");\n", "environment": "[]"}, {"name": "WorldPop_POP", "code": "var dataset = ee.ImageCollection('WorldPop/POP');\nvar population = dataset.select('population');\nvar populationVis = {\n  min: 0.0,\n  max: 50.0,\n  palette: ['24126c', '1fff4f', 'd4ff50'],\n};\nMap.setCenter(113.643, 34.769, 7);\nMap.addLayer(population, populationVis, 'Population');\n", "environment": "[]"}, {"name": "YALE_YCEO_UHI_Summer_UHI_yearly_pixel_v4", "code": "var dataset = ee.ImageCollection(\"YALE/YCEO/UHI/Summer_UHI_yearly_pixel/v4\");\n\nvar visualization = {\n  bands: ['Daytime'],\n  min: -1.5,\n  max: 7.5,\n  palette: [\n    \"#313695\",\"#74add1\",\"#fed976\",\"#feb24c\",\"#fd8d3c\",\"#fc4e2a\",\n    \"#e31a1c\",\"#b10026\",\n  ]\n};\n\nMap.setCenter(-74.7, 40.6, 7);\n\nMap.addLayer(dataset, visualization, \"Daytime UHI\");", "environment": "[]"}, {"name": "YALE_YCEO_UHI_UHI_all_averaged_v4", "code": "var dataset = ee.Image(\"YALE/YCEO/UHI/UHI_all_averaged/v4\");\n\nvar visualization = {\n  bands: ['all_daytime_UHI'],\n  min: -1.5,\n  max: 7.5,\n  palette: [\n    \"#313695\",\"#74add1\",\"#fed976\",\"#feb24c\",\"#fd8d3c\",\"#fc4e2a\",\n    \"#e31a1c\",\"#b10026\",\n  ]\n};\n\nMap.setCenter(-74.7, 40.6, 7);\n\nMap.addLayer(dataset, visualization, \"All Daytime UHI\");", "environment": "[]"}, {"name": "YALE_YCEO_UHI_UHI_monthly_averaged_v4", "code": "var dataset = ee.Image(\"YALE/YCEO/UHI/UHI_monthly_averaged/v4\");\n\nvar visualization = {\n  bands: ['Jan_day_UHI'],\n  min: -1.5,\n  max: 7.5,\n  palette: [\n    \"#313695\",\"#74add1\",\"#fed976\",\"#feb24c\",\"#fd8d3c\",\"#fc4e2a\",\n    \"#e31a1c\",\"#b10026\",\n  ]\n};\n\nMap.setCenter(-74.7, 40.6, 7);\n\nMap.addLayer(dataset, visualization, \"January Daytime UHI\");", "environment": "[]"}, {"name": "YALE_YCEO_UHI_UHI_yearly_averaged_v4", "code": "var dataset = ee.ImageCollection(\"YALE/YCEO/UHI/UHI_yearly_averaged/v4\");\n\nvar visualization = {\n  bands: ['Daytime'],\n  min: -1.5,\n  max: 7.5,\n  palette: [\n    \"#313695\",\"#74add1\",\"#fed976\",\"#feb24c\",\"#fd8d3c\",\"#fc4e2a\",\n    \"#e31a1c\",\"#b10026\",\n  ]\n};\n\nMap.setCenter(-74.7, 40.6, 7);\n\nMap.addLayer(dataset, visualization, \"Daytime UHI\");", "environment": "[]"}, {"name": "YALE_YCEO_UHI_UHI_yearly_pixel_v4", "code": "var dataset = ee.ImageCollection(\"YALE/YCEO/UHI/UHI_yearly_pixel/v4\");\n\nvar visualization = {\n  bands: ['Daytime'],\n  min: -1.5,\n  max: 7.5,\n  palette: [\n    \"#313695\",\"#74add1\",\"#fed976\",\"#feb24c\",\"#fd8d3c\",\"#fc4e2a\",\n    \"#e31a1c\",\"#b10026\",\n  ]\n};\n\nMap.setCenter(-74.7, 40.6, 7);\n\nMap.addLayer(dataset, visualization, \"Daytime UHI\");", "environment": "[]"}, {"name": "YALE_YCEO_UHI_Winter_UHI_yearly_pixel_v4", "code": "var dataset = ee.ImageCollection(\"YALE/YCEO/UHI/Winter_UHI_yearly_pixel/v4\");\n\nvar visualization = {\n  bands: ['Daytime'],\n  min: -1.5,\n  max: 7.5,\n  palette: [\n    \"#313695\",\"#74add1\",\"#fed976\",\"#feb24c\",\"#fd8d3c\",\"#fc4e2a\",\n    \"#e31a1c\",\"#b10026\",\n  ]\n};\n\nMap.setCenter(-74.7, 40.6, 7);\n\nMap.addLayer(dataset, visualization, \"Daytime UHI\");", "environment": "[]"}, {"name": "projects_planet-nicfi_assets_basemaps_africa", "code": "var nicfi = ee.ImageCollection('projects/planet-nicfi/assets/basemaps/africa');\n\n// Filter basemaps by date and get the first image from filtered results\nvar basemap= nicfi.filter(ee.Filter.date('2021-03-01','2021-07-01')).first();\n\nMap.centerObject(basemap, 4)\n\nvar vis = {\"bands\":[\"R\",\"G\",\"B\"],\"min\":64,\"max\":5454,\"gamma\":1.8};\n\nMap.addLayer(basemap, vis, '2021-03 mosaic');\nMap.addLayer(\n    basemap.normalizedDifference(['N','R']).rename('NDVI'),\n    {min:-0.55,max:0.8,palette: [\n        '8bc4f9', 'c9995c', 'c7d270','8add60','097210'\n    ]}, 'NDVI', false);\n", "environment": "[]"}, {"name": "projects_planet-nicfi_assets_basemaps_americas", "code": "var nicfi = ee.ImageCollection('projects/planet-nicfi/assets/basemaps/americas');\n\n// Filter basemaps by date and get the first image from filtered results\nvar basemap= nicfi.filter(ee.Filter.date('2021-03-01','2021-07-01')).first();\n\nMap.centerObject(basemap, 4)\n\nvar vis = {\"bands\":[\"R\",\"G\",\"B\"],\"min\":64,\"max\":5454,\"gamma\":1.8};\n\nMap.addLayer(basemap, vis, '2021-03 mosaic');\nMap.addLayer(\n    basemap.normalizedDifference(['N','R']).rename('NDVI'),\n    {min:-0.55,max:0.8,palette: [\n        '8bc4f9', 'c9995c', 'c7d270','8add60','097210'\n    ]}, 'NDVI', false);\n", "environment": "[]"}, {"name": "projects_planet-nicfi_assets_basemaps_asia", "code": "var nicfi = ee.ImageCollection('projects/planet-nicfi/assets/basemaps/asia');\n\n// Filter basemaps by date and get the first image from filtered results\nvar basemap= nicfi.filter(ee.Filter.date('2021-03-01','2021-07-01')).first();\n\nMap.setCenter(107, 10, 4);\n\nvar vis = {\"bands\":[\"R\",\"G\",\"B\"],\"min\":64,\"max\":5454,\"gamma\":1.8};\n\nMap.addLayer(basemap, vis, '2021-03 mosaic');\nMap.addLayer(\n    basemap.normalizedDifference(['N','R']).rename('NDVI'),\n    {min:-0.55,max:0.8,palette: [\n        '8bc4f9', 'c9995c', 'c7d270','8add60','097210'\n    ]}, 'NDVI', false);\n\n", "environment": "[]"}]}, {"name": "Demos", "contents": [{"name": "Classification", "code": "// This demonstration uses hand-located points to train a classifier.\n// Each training point has a field called 'landcover' containing\n// class labels at that location. The following block contains\n// construction code for the points.  Hover on the 'urban' variable\n// and click, 'Convert' in the dialog.\nvar urban = /* color: #ff0000 */ee.FeatureCollection(\n        [ee.Feature(\n            ee.Geometry.Point([-122.40898132324219, 37.78247386188714]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"0\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.40623474121094, 37.77107659627034]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"1\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.39799499511719, 37.785187237567705]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"2\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.39936828613281, 37.772162125840445]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"3\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.41104125976562, 37.76890548932033]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"4\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.41859436035156, 37.7835592241132]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"5\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.41790771484375, 37.801465399617314]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"6\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.40142822265625, 37.77053382550901]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"7\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.39662170410156, 37.75370595587201]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"8\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.28950500488281, 37.8166551148543]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"9\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.28195190429688, 37.82696064199382]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"10\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.28126525878906, 37.81882481909333]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"11\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.2723388671875, 37.82858769894982]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"12\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.28607177734375, 37.84702517033112]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"13\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.29293823242188, 37.8562421777618]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"14\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.27302551269531, 37.849193981623955]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"15\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.28057861328125, 37.86545803289311]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"16\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.27096557617188, 37.820452055421086]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"17\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.27920532226562, 37.808518155993234]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"18\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.27783203125, 37.80092285199884]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"19\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.31491088867188, 37.784644570400836]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"20\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.31903076171875, 37.7835592241132]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"21\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.26959228515625, 37.80200794325057]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"22\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.40966796875, 37.768362702622596]),\n            {\n              \"landcover\": 0,\n              \"system:index\": \"23\"\n            })]),\n    vegetation = /* color: #3b8b00 */ee.FeatureCollection(\n        [ee.Feature(\n            ee.Geometry.Point([-122.15835571289062, 37.81990964729775]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"0\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.14462280273438, 37.806890656610484]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"1\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.16522216796875, 37.817197546892785]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"2\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.09793090820312, 37.80797566018445]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"3\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.08282470703125, 37.81123057525427]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"4\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.07733154296875, 37.7992951852321]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"5\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.05398559570312, 37.77867496858311]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"6\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.05398559570312, 37.76673431862507]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"7\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.07389831542969, 37.792784159505125]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"8\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.0306396484375, 37.83455326751277]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"9\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.06497192382812, 37.831299380818606]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"10\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.19268798828125, 37.85461573076714]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"11\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.18170166015625, 37.849193981623955]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"12\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.51609802246094, 37.84051835371829]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"13\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.49137878417969, 37.838349287273296]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"14\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.50511169433594, 37.82641828170282]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"15\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.54081726074219, 37.84160286302103]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"16\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.55592346191406, 37.85353141283498]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"17\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.56278991699219, 37.86274760688767]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"18\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.54631042480469, 37.86328970006369]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"19\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.52708435058594, 37.85190490603355]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"20\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.52845764160156, 37.83889155986444]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"21\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.51472473144531, 37.83021472002989]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"22\"\n            })]),\n    water = /* color: #0300ff */ee.FeatureCollection(\n        [ee.Feature(\n            ee.Geometry.Point([-122.61085510253906, 37.835095568009415]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"0\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.60673522949219, 37.8166551148543]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"1\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.60810852050781, 37.80038030039511]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"2\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.57102966308594, 37.80472060163741]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"3\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.58888244628906, 37.83455326751277]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"4\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.65205383300781, 37.855157883752504]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"5\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.62870788574219, 37.823164036248635]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"6\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.62664794921875, 37.792784159505125]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"7\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.60055541992188, 37.792784159505125]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"8\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.53738403320312, 37.7992951852321]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"9\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.57240295410156, 37.82641828170282]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"10\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.58682250976562, 37.823164036248635]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"11\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.36709594726562, 37.85570003275074]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"12\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.40074157714844, 37.88171849539308]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"13\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.40005493164062, 37.86925246182428]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"14\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.37739562988281, 37.88117653780091]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"15\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.34992980957031, 37.87358871277159]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"16\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.34992980957031, 37.85244707895444]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"17\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.34855651855469, 37.838349287273296]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"18\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.39387512207031, 37.849193981623955]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"19\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.44743347167969, 37.82262164805511]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"20\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.43850708007812, 37.842687356377084]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"21\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.354736328125, 37.789528431453014]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"22\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.25826263427734, 37.68952589794135]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"23\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.53326416015625, 37.81114015184751]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"24\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.44503021240234, 37.87078823552829]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"25\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.4532699584961, 37.86048883137166]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"26\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.33036041259766, 37.833920567528345]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"27\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.19989776611328, 37.65664491891396]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"28\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.21946716308594, 37.62374937200642]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"29\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([-122.24040985107422, 37.61504728801728]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"30\"\n            })]);\n\n// Load the Landsat 8 scaled radiance image collection.\nvar landsatCollection = ee.ImageCollection('LANDSAT/LC08/C01/T1')\n    .filterDate('2017-01-01', '2017-12-31');\n\n// Make a cloud-free composite.\nvar composite = ee.Algorithms.Landsat.simpleComposite({\n  collection: landsatCollection,\n  asFloat: true\n});\n\n// Merge the three geometry layers into a single FeatureCollection.\nvar newfc = urban.merge(vegetation).merge(water);\n\n// Use these bands for classification.\nvar bands = ['B2', 'B3', 'B4', 'B5', 'B6', 'B7'];\n// The name of the property on the points storing the class label.\nvar classProperty = 'landcover';\n\n// Sample the composite to generate training data.  Note that the\n// class label is stored in the 'landcover' property.\nvar training = composite.select(bands).sampleRegions({\n  collection: newfc,\n  properties: [classProperty],\n  scale: 30\n});\n\n// Train a CART classifier.\nvar classifier = ee.Classifier.smileCart().train({\n  features: training,\n  classProperty: classProperty,\n});\n// Print some info about the classifier (specific to CART).\nprint('CART, explained', classifier.explain());\n\n// Classify the composite.\nvar classified = composite.classify(classifier);\nMap.centerObject(newfc);\nMap.addLayer(classified, {min: 0, max: 2, palette: ['red', 'green', 'blue']});\n\n// Optionally, do some accuracy assessment.  Fist, add a column of\n// random uniforms to the training dataset.\nvar withRandom = training.randomColumn('random');\n\n// We want to reserve some of the data for testing, to avoid overfitting the model.\nvar split = 0.7;  // Roughly 70% training, 30% testing.\nvar trainingPartition = withRandom.filter(ee.Filter.lt('random', split));\nvar testingPartition = withRandom.filter(ee.Filter.gte('random', split));\n\n// Trained with 70% of our data.\nvar trainedClassifier = ee.Classifier.smileRandomForest(5).train({\n  features: trainingPartition,\n  classProperty: classProperty,\n  inputProperties: bands\n});\n\n// Classify the test FeatureCollection.\nvar test = testingPartition.classify(trainedClassifier);\n\n// Print the confusion matrix.\nvar confusionMatrix = test.errorMatrix(classProperty, 'classification');\nprint('Confusion Matrix', confusionMatrix);\n", "environment": "[]"}, {"name": "Egypt Classification", "code": "// Upsample MODIS landcover classification (250m) to Landsat\n// resolution (30m) using a supervised classifier.\n\nvar geometry = ee.Geometry.Polygon(\n        [[[29.972731783841393, 31.609824974226175],\n          [29.972731783841393, 30.110383818311096],\n          [32.56550522134139, 30.110383818311096],\n          [32.56550522134139, 31.609824974226175]]], null, false);\n\n// Use the MCD12 land-cover as training data.\nvar collection = ee.ImageCollection('MODIS/006/MCD12Q1');\n// See the collection docs to get details on classification system.\nvar modisLandcover = collection\n    .filterDate('2001-01-01', '2001-12-31')\n    .first()\n    .select('LC_Type1')\n    // Quick hack to get the labels to start at zero.\n    .subtract(1);\n\n// A palette to use for visualizing landcover images.  You can get this\n// from the properties of the collection.\nvar landcoverPalette = '05450a,086a10,54a708,78d203,009900,c6b044,dcd159,' +\n    'dade48,fbff13,b6ff05,27ff87,c24f44,a5a5a5,ff6d4c,69fff8,f9ffa4,1c0dff';\n// A set of visualization parameters using the landcover palette.\nvar landcoverVisualization = {palette: landcoverPalette, min: 0, max: 16, format: 'png'};\n// Center over our region of interest.\nMap.centerObject(geometry, 11);\n// Draw the MODIS landcover image.\nMap.addLayer(modisLandcover, landcoverVisualization, 'MODIS landcover');\n\n// Load and filter Landsat data.\nvar l7 = ee.ImageCollection('LANDSAT/LE07/C01/T1')\n    .filterBounds(geometry)\n    .filterDate('2000-01-01', '2001-01-01');\n\n// Draw the Landsat composite, visualizing true color bands.\nvar landsatComposite = ee.Algorithms.Landsat.simpleComposite({\n  collection: l7,\n  asFloat: true\n});\nMap.addLayer(landsatComposite, {min: 0, max: 0.3, bands: ['B3','B2','B1']}, 'Landsat composite');\n\n// Make a training dataset by sampling the stacked images.\nvar training = modisLandcover.addBands(landsatComposite).sample({\n  region: geometry,\n  scale: 30,\n  numPixels: 1000\n});\n\n// Train a classifier using the training data.\nvar classifier = ee.Classifier.smileCart().train({\n  features: training,\n  classProperty: 'LC_Type1',\n});\n\n// Apply the classifier to the original composite.\nvar upsampled = landsatComposite.classify(classifier);\n\n// Draw the upsampled landcover image.\nMap.addLayer(upsampled, landcoverVisualization, 'Upsampled landcover');\n\n// Show the training area.\nMap.addLayer(geometry, {}, 'Training region', false);\n", "environment": "[]"}, {"name": "Landsat8 Harmonic Modeling", "code": "// Load a collection of Landsat TOA reflectance images.\nvar landsatCollection = ee.ImageCollection('LANDSAT/LC08/C01/T1_TOA');\n\n// Set the region of interest to a point.\nvar roi = ee.Geometry.Point([-121.14, 37.98]);\n\n// The dependent variable we are modeling.\nvar dependent = 'NDVI';\n\n// The number of cycles per year to model.\nvar harmonics = 1;\n\n// Make a list of harmonic frequencies to model.\n// These also serve as band name suffixes.\nvar harmonicFrequencies = ee.List.sequence(1, harmonics);\n\n// Function to get a sequence of band names for harmonic terms.\nvar constructBandNames = function(base, list) {\n  return ee.List(list).map(function(i) {\n    return ee.String(base).cat(ee.Number(i).int());\n  });\n};\n\n// Construct lists of names for the harmonic terms.\nvar cosNames = constructBandNames('cos_', harmonicFrequencies);\nvar sinNames = constructBandNames('sin_', harmonicFrequencies);\n\n// Independent variables.\nvar independents = ee.List(['constant', 't'])\n  .cat(cosNames).cat(sinNames);\n\n// Function to mask clouds in Landsat 8 imagery.\nvar maskClouds = function(image) {\n  var score = ee.Algorithms.Landsat.simpleCloudScore(image).select('cloud');\n  var mask = score.lt(10);\n  return image.updateMask(mask);\n};\n\n// Function to add an NDVI band, the dependent variable.\nvar addNDVI = function(image) {\n  return image\n    .addBands(image.normalizedDifference(['B5', 'B4'])\n    .rename('NDVI'))\n    .float();\n};\n\n// Function to add a time band.\nvar addDependents = function(image) {\n  // Compute time in fractional years since the epoch.\n  var years = image.date().difference('1970-01-01', 'year');\n  var timeRadians = ee.Image(years.multiply(2 * Math.PI)).rename('t');\n  var constant = ee.Image(1);\n  return image.addBands(constant).addBands(timeRadians.float());\n};\n\n// Function to compute the specified number of harmonics\n// and add them as bands.  Assumes the time band is present.\nvar addHarmonics = function(freqs) {\n  return function(image) {\n    // Make an image of frequencies.\n    var frequencies = ee.Image.constant(freqs);\n    // This band should represent time in radians.\n    var time = ee.Image(image).select('t');\n    // Get the cosine terms.\n    var cosines = time.multiply(frequencies).cos().rename(cosNames);\n    // Get the sin terms.\n    var sines = time.multiply(frequencies).sin().rename(sinNames);\n    return image.addBands(cosines).addBands(sines);\n  };\n};\n\n// Filter to the area of interest, mask clouds, add variables.\nvar harmonicLandsat = landsatCollection\n  .filterBounds(roi)\n  .map(maskClouds)\n  .map(addNDVI)\n  .map(addDependents)\n  .map(addHarmonics(harmonicFrequencies));\n\n// The output of the regression reduction is a 4x1 array image.\nvar harmonicTrend = harmonicLandsat\n  .select(independents.add(dependent))\n  .reduce(ee.Reducer.linearRegression(independents.length(), 1));\n\n// Turn the array image into a multi-band image of coefficients.\nvar harmonicTrendCoefficients = harmonicTrend.select('coefficients')\n  .arrayProject([0])\n  .arrayFlatten([independents]);\n\n// Compute fitted values.\nvar fittedHarmonic = harmonicLandsat.map(function(image) {\n  return image.addBands(\n    image.select(independents)\n      .multiply(harmonicTrendCoefficients)\n      .reduce('sum')\n      .rename('fitted'));\n});\n\n// Plot the fitted model and the original data at the ROI.\nprint(ui.Chart.image.series(fittedHarmonic.select(['fitted','NDVI']), roi, ee.Reducer.mean(), 30)\n    .setOptions({\n      title: 'Harmonic model: original and fitted values',\n      lineWidth: 1,\n      pointSize: 3,\n}));\n\n// Pull out the three bands we're going to visualize.\nvar sin = harmonicTrendCoefficients.select('sin_1');\nvar cos = harmonicTrendCoefficients.select('cos_1');\n\n// Do some math to turn the first-order Fourier model into\n// hue, saturation, and value in the range[0,1].\nvar magnitude = cos.hypot(sin).multiply(5);\nvar phase = sin.atan2(cos).unitScale(-Math.PI, Math.PI);\nvar val = harmonicLandsat.select('NDVI').reduce('mean');\n\n// Turn the HSV data into an RGB image and add it to the map.\nvar seasonality = ee.Image.cat(phase, magnitude, val).hsvToRgb();\nMap.centerObject(roi, 11);\nMap.addLayer(seasonality, {}, 'Seasonality');\nMap.addLayer(roi, {}, 'ROI');\n", "environment": "[]"}, {"name": "MODIS Harmonic Modeling", "code": "// The purpose of this script is to fit a first-order\n// harmonic model to a time series of MODSI EVI data.\n// The linear regression reducer is used to estimate\n// harmonic terms and a long-term trend in the data.\n\n// Load the input collection and select the  EVI band.\nvar c = ee.ImageCollection('MODIS/006/MOD13A1').select('EVI');\n\n// A function to compute the independent variables (namely a\n// first-order Fourier model plus a linear model) based on\n// the scene start time extracted from the image metadata.\n\n// The linear regression reducer (below) expects to see images\n// with all the independent values followed by all the dependent\n// values.  In this case, all the independent variables are\n// derived purely from image metadata, and thus are constant\n// across pixels.\nfunction addIndependentVariables(image) {\n  // Get start time from image metadata.\n  var date = ee.Date(image.get('system:time_start'));\n  var phase = date.getFraction('year').multiply(2 * Math.PI);\n  var sin = phase.sin();\n  var cos = phase.cos();\n  var time = date.difference(ee.Date('2000-01-01'), 'year');\n  // Assemble the four independent variables as image bands.\n  var independent = ee.Image([sin, cos, time, 1]).double();\n  // Add 'EVI' from the input image as the last band.\n  return independent.addBands(image);\n}\n\n// Perform the linear regression, which returns an array-valued\n// image, and then expand that back out to a four-band image\n// for later convenience.\nvar regression = c.map(addIndependentVariables)\n  // Reduce the collection.\n  .reduce(ee.Reducer.linearRegression(4))\n  // Select the coefficients (array) band from the output.\n  .select('coefficients')\n  // 2D -\u003e 1D by keeping the 0-axis.\n  .arrayProject([0])\n  // 1D -\u003e multi-band image; supply band names with a list.\n  .arrayFlatten([['sin', 'cos', 'slope', 'offset']])\n  // Scale the result.\n  .divide(10000);\n\n// Pull out the three bands we're going to visualize.\nvar sin = regression.select('sin');\nvar cos = regression.select('cos');\nvar slope = regression.select('slope');\nvar offset = regression.select('offset');\n\n// Do some math to turn the first-order Fourier model into\n// hue, saturation, and value in the range[0,1].\nvar sat = cos.hypot(sin).multiply(2.5);\nvar hue = sin.atan2(cos).unitScale(-Math.PI, Math.PI);\nvar val = offset.multiply(1.5);\n\n// Make a background of dark blue, for cartographic effect.\nvar background = ee.Image(1).visualize({palette: '000022'});\nMap.addLayer(background, {}, 'background');\n\n// Turn the HSV data into an RGB image and add it to the map.\nvar seasonality = ee.Image.cat(hue, sat, val).hsvToRgb();\nMap.addLayer(seasonality, {}, 'Seasonality');\n\n// Display decreasing EVI in red, increasing in blue and offset in green.\nvar trendVis = {\n  bands: ['slope', 'offset', 'slope'],\n  min: 0,\n  max: [-0.005, 1, 0.005]\n};\nMap.addLayer(regression, trendVis, 'Trend');\n\n\n// Visualize the images as they look on screen:\nvar seasonalityExportImage = ee.ImageCollection([\n  background,\n  seasonality.multiply(255).byte().rename(['vis-red', 'vis-green', 'vis-blue'])\n]).mosaic();\n\nvar trendExportImage = ee.ImageCollection([\n  background,\n  regression.visualize(trendVis)\n]).mosaic();\n\n// Export with maps Mercator projection at 10 km scale.\nvar exportRegion = ee.Geometry.Rectangle([-180, -70, 180, 79], null, false);\nvar exportParams = {scale: 10000, region: exportRegion, crs: 'EPSG:3857'};\n\nExport.image(seasonalityExportImage, 'Global_pheno', exportParams);\nExport.image(trendExportImage, 'Global_trend', exportParams);\n\n\n", "environment": "[]"}, {"name": "NASANEX Climate Modeling", "code": "// Use the NASA NEX-DCP30 dataset to create a visualization of projected\n// climate in the San Joaquin watershed of California, USA\n// https://cds.nccs.nasa.gov/wp-content/uploads/2014/04/NEX-DCP30_Tech_Note_v0.pdf\n// http://www.nasa.gov/content/nasa-supercomputer-generates-closer-look-at-future-climate-conditions-in-us\n\nvar geometry1 = /* color: #98ff00 */ee.Geometry.MultiPoint();\n\nvar base_collection = ee.ImageCollection('NASA/NEX-DCP30_ENSEMBLE_STATS')\n    .select(['tasmax_median', 'tasmax_quartile25', 'tasmax_quartile75'])\n    .filterDate('2010-01-01', '2100-01-01');\n\nvar january = base_collection.filter(ee.Filter.calendarRange({\n  start: 7,\n  field: 'month'\n}));\n\n// Convert temperature to Celsius.\njanuary = january.map(function(image) {\n  return image.subtract(273.15)\n      .copyProperties(image, ['system:time_start', 'scenario']);\n});\nvar rcp26 = january.filterMetadata('scenario', 'equals', 'rcp26');\nvar rcp45 = january.filterMetadata('scenario', 'equals', 'rcp45');\nvar rcp60 = january.filterMetadata('scenario', 'equals', 'rcp60');\nvar rcp85 = january.filterMetadata('scenario', 'equals', 'rcp85');\n\nvar forest = ee.Feature(\n    ee.Geometry.Rectangle(-121, 39.4, -120.8, 39.8),\n    {label: 'Tahoe National Forest'});\n\nvar roi = ee.Feature(\n    ee.FeatureCollection('USGS/WBD/2017/HUC06')\n        .filterMetadata('huc6', 'equals', '180400')  // San Joaquin watershed\n        .first());\n\nvar options = {\n  title: 'Daily Maximum Near-Surface Air Temperature',\n  vAxis: {\n    title: 'Daily Maximum Near-Surface Air Temperature [Celsius]'\n  },\n  lineWidth: 1,\n  pointSize: 4\n};\n\nvar labelBands = function(collection, scenario) {\n  return collection.select(\n    ['tasmax_median', 'tasmax_quartile25', 'tasmax_quartile75'],\n    ['rcp' + scenario + '_tasmax_median',\n     'rcp' + scenario + '_tasmax_quartile25',\n     'rcp' + scenario + '_tasmax_quartile75']);\n};\n\nvar combined = labelBands(rcp26, '26').merge(labelBands(rcp85, '85'));\n\nvar chart = ui.Chart.image.series({\n  imageCollection: combined,\n  region: roi,\n  reducer: ee.Reducer.mean(),\n  scale: 200,\n  xProperty: 'system:time_start'\n}).setChartType('LineChart')\n  .setOptions({\n  title: 'Predicted January Temperature - San Joaquin Watershed',\n  vAxis: {\n    title: 'Daily Maximum Near-Surface Air Temperature [Celsius]'\n  },\n  interval: {\n    rcp26_tasmax_quartile: {'style':'area'},\n    rcp85_tasmax_quartile: {'style':'area'},\n  },\n  lineWidth: 1,\n  curveType:'function',\n  interpolateNulls: true\n});\nchart = chart.setSeriesNames('RPC2.6', 0);\nchart = chart.setSeriesNames('RPC8.5', 3);\nprint(chart);\n\nvar sld =\n'\u003cRasterSymbolizer\u003e' +\n  '\u003cColorMap\u003e' +\n    '\u003cColorMapEntry color=\"#110092\" quantity=\"17.5\" label=\"17.5\"/\u003e' +\n    '\u003cColorMapEntry color=\"#0C00FF\" quantity=\"20.0\" label=\"20.0\" /\u003e' +\n    '\u003cColorMapEntry color=\"#0E66FF\" quantity=\"22.5\" label=\"22.5\" /\u003e' +\n    '\u003cColorMapEntry color=\"#0DDFFB\" quantity=\"25.0\" label=\"25.0\" /\u003e' +\n    '\u003cColorMapEntry color=\"#52AA92\" quantity=\"27.5\" label=\"27.5\" /\u003e' +\n    '\u003cColorMapEntry color=\"#A9EE35\" quantity=\"30.0\" label=\"30.0\" /\u003e' +\n    '\u003cColorMapEntry color=\"#FFDE00\" quantity=\"32.5\" label=\"32.5\" /\u003e' +\n    '\u003cColorMapEntry color=\"#FF6E00\" quantity=\"35.0\" label=\"35.0\" /\u003e' +\n    '\u003cColorMapEntry color=\"#F90000\" quantity=\"37.5\" label=\"37.5\" /\u003e' +\n    '\u003cColorMapEntry color=\"#770B11\" quantity=\"40.0\" label=\"40.0\" /\u003e' +\n  '\u003c/ColorMap\u003e' +\n'\u003c/RasterSymbolizer\u003e';\n\nvar image2 = ee.Image(rcp26.filterDate('2050-01-01', '2051-01-01').first())\n    .select('tasmax_median');\n\nMap.centerObject(roi);\nMap.addLayer(image2,\n             {bands:'tasmax_median', min:-2, max:8},\n             'historical_195001 tasmax_median', false);\nMap.addLayer(image2.sldStyle(sld), {}, \"tasmax_median (styled)\", true);\nMap.addLayer(roi, {}, 'Region of Interest');\n", "environment": "[]"}, {"name": "Sentinel1 Composite", "code": "var geometry = /* color: #d63000 */ee.Geometry.Point([5.7788, 52.7005]);\n\n// Get the VV collection.\nvar collectionVV = ee.ImageCollection('COPERNICUS/S1_GRD')\n    .filter(ee.Filter.eq('instrumentMode', 'IW'))\n    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))\n    .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))\n    .select(['VV']);\n\n// Create a 3 band stack by selecting from different periods (months)\nvar im1 = ee.Image(collectionVV.filterDate('2016-04-01', '2016-05-30').mean());\nvar im2 = ee.Image(collectionVV.filterDate('2016-06-01', '2016-08-31').mean());\nvar im3 = ee.Image(collectionVV.filterDate('2016-09-01', '2016-11-30').mean());\n\nMap.centerObject(geometry, 13);\nMap.addLayer(im1.addBands(im2).addBands(im3), {min: -25, max: 0}, 'VV stack');\n\n// Get the VH collection.\nvar collectionVH = ee.ImageCollection('COPERNICUS/S1_GRD')\n    .filter(ee.Filter.eq('instrumentMode', 'IW'))\n    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))\n    .select(['VH']);\n// Collection max.  Zoom to Shanghai for an interesting visualization.\nMap.addLayer(collectionVH.max(), {min: -25, max: 0}, 'max value', false);\n\n", "environment": "[]"}, {"name": "Terrain Visualization", "code": "// Use an elevation dataset and terrain functions to create\n// a custom visualization of topography.\n\n// Load a global elevation image.\nvar elev = ee.Image('USGS/GMTED2010');\n\n// Zoom to an area of interest.\nMap.setCenter(-121.069, 50.709, 6);\n\n// Add the elevation to the map.\nMap.addLayer(elev, {}, 'elev');\n\n// Use the terrain algorithms to compute a hillshade with 8-bit values.\nvar shade = ee.Terrain.hillshade(elev);\nMap.addLayer(shade, {}, 'hillshade', false);\n\n// Create a \"sea\" variable to be used for cartographic purposes\nvar sea = elev.lte(0);\nMap.addLayer(sea.mask(sea), {palette:'000022'}, 'sea', false);\n\n// Create a custom elevation palette from hex strings.\nvar elevationPalette = ['006600', '002200', 'fff700', 'ab7634', 'c4d0ff', 'ffffff'];\n// Use these visualization parameters, customized by location.\nvar visParams = {min: 1, max: 3000, palette: elevationPalette};\n\n// Create a mosaic of the sea and the elevation data\nvar visualized = ee.ImageCollection([\n  // Mask the elevation to get only land\n  elev.mask(sea.not()).visualize(visParams),\n  // Use the sea mask directly to display sea.\n  sea.mask(sea).visualize({palette:'000022'})\n]).mosaic();\n\n// Note that the visualization image doesn't require visualization parameters.\nMap.addLayer(visualized, {}, 'elev palette', false);\n\n// Convert the visualized elevation to HSV, first converting to [0, 1] data.\nvar hsv = visualized.divide(255).rgbToHsv();\n// Select only the hue and saturation bands.\nvar hs = hsv.select(0, 1);\n// Convert the hillshade to [0, 1] data, as expected by the HSV algorithm.\nvar v = shade.divide(255);\n// Create a visualization image by converting back to RGB from HSV.\n// Note the cast to byte in order to export the image correctly.\nvar rgb = hs.addBands(v).hsvToRgb().multiply(255).byte();\nMap.addLayer(rgb, {}, 'styled');\n\n", "environment": "[]"}]}, {"name": "Feature Collection", "contents": [{"name": "Buffer", "code": "// Feature buffer example.\n// Display the area within 2 kilometers of San Francisco BART stations.\n\n// Instantiate a FeatureCollection of BART locations in Downtown San Francisco\n// (points).\nvar stations = [\n  ee.Feature(\n      ee.Geometry.Point(-122.42, 37.77), {'name': '16th St. Mission (16TH)'}),\n  ee.Feature(\n      ee.Geometry.Point(-122.42, 37.75), {'name': '24th St. Mission (24TH)'}),\n  ee.Feature(\n      ee.Geometry.Point(-122.41, 37.78),\n      {'name': 'Civic Center/UN Plaza (CIVC)'})\n];\nvar bartStations = ee.FeatureCollection(stations);\n\n// Map a function over the collection to buffer each feature.\nvar buffered = bartStations.map(function(f) {\n  return f.buffer(2000, 100); // Note that the errorMargin is set to 100.\n});\n\nMap.addLayer(buffered, {color: '800080'});\n\nMap.setCenter(-122.4, 37.7, 11);\n", "environment": "[]"}, {"name": "Computed Area Filter", "code": "// Computed area filter.\n// Find US counties smaller than 3k square kilometers in area.\n\n// Load counties from TIGER boundaries table\nvar counties = ee.FeatureCollection('TIGER/2016/Counties');\n\n// Map a function over the counties to set the area of each.\nvar countiesWithArea = counties.map(function(f) {\n  // Compute area in square meters.  Convert to hectares.\n  var areaHa = f.area().divide(100 * 100);\n\n  // A new property called 'area' will be set on each feature.\n  return f.set({area: areaHa});\n});\n\n// Filter to get only smaller counties.\nvar smallCounties = countiesWithArea.filter(ee.Filter.lt('area', 3e5));\n\nMap.addLayer(smallCounties, {color: '900000'});\n\nMap.setCenter(-119.7, 38.26, 7);\n", "environment": "[]"}, {"name": "Distance", "code": "// Collection.distance example.\n// Computes the distance to the nearest feature in a collection.\n\n// Construct a FeatureCollection from a list of geometries.\nvar fc = ee.FeatureCollection([\n  ee.Geometry.Point(-72.94411, 41.32902),\n  ee.Geometry.Point(-72.94411, 41.33402),\n  ee.Geometry.Point(-72.94411, 41.33902),\n  // The geometries do not need to be the same type.\n  ee.Geometry.LineString(\n      -72.93411, 41.30902, -72.93411, 41.31902, -72.94411, 41.31902)\n]);\n\n// Compute distance from the dfeatures, to a max of 1000 meters.\nvar distance = fc.distance(1000, 100);\n\nMap.setCenter(-72.94, 41.32, 13);\nMap.addLayer(distance, {min: 0, max: 1000, palette: ['yellow', 'red']});\nMap.addLayer(fc);\n", "environment": "[]"}, {"name": "From Earth Engine Asset", "code": "// Create a FeatureCollection from an Earth Engine Table.\n\n// Load census roads.\nvar roads = ee.FeatureCollection('TIGER/2016/Roads');\n\n// Get only interstates.\nvar interstates = roads.filter(ee.Filter.eq('rttyp', 'I'));\n\n// Get only surface roads.\nvar surfaceRoads = roads.filter(ee.Filter.eq('rttyp', 'M'));\n\n// Display the roads in different colors.\nMap.addLayer(surfaceRoads, {color: 'gray'}, 'surface roads');\nMap.addLayer(interstates, {color: 'red'}, 'interstates');\n\n", "environment": "[]"}, {"name": "From Polygons", "code": "// Create and render a feature collection from polygons.\n\n// Construct a FeatureCollection from a list of features.\nvar fc = ee.FeatureCollection([\n  // Create each feature with a geometry and properties.\n  ee.Feature(\n      ee.Geometry.Polygon({\n        coords: [[-109.05, 41], [-109.05, 37], [-102.05, 37], [-102.05, 41]],\n        geodesic: false, // The state boundaries are not geodesic.\n        maxError: 1000 // Make the error margin large; we don't need accuracy.\n      }), {name: 'Colorado', fill: 1}), // Pass properties as a dictionary.\n  ee.Feature(\n      ee.Geometry.Polygon({\n        coords: [\n          [-114.05, 37.0], [-109.05, 37.0], [-109.05, 41.0],\n          [-111.05, 41.0], [-111.05, 42.0], [-114.05, 42.0]\n        ],\n        geodesic: false,\n        maxError: 1000\n      }), {name: 'Utah', fill: 2})\n]);\n\n// Fill, then outline the polygons into a blank image.\nvar image = ee.Image()\n    .paint(fc, 'fill') // Get color from property named 'fill'\n    .paint(fc, 3, 5) // Outline using color 3, width 5.\n    .toByte();\n\nMap.addLayer(image, {\n    palette: ['000000', 'FF0000', '00FF00', '0000FF'],\n    max: 3,\n    opacity: 0.5\n});\n\nMap.setCenter(-107, 41, 6);\n", "environment": "[]"}, {"name": "Join", "code": "// Simple Join example.\n// Show parks in San Francisco within 2 kilometers of a BART station.\n\n// Load tables for BART station locations and local parks.\nvar bart = ee.FeatureCollection('GOOGLE/EE/DEMOS/bart-locations');\nvar parks = ee.FeatureCollection('GOOGLE/EE/DEMOS/sf-parks');\n\n// Create a filter to pass the left features within 2km of the right features.\nvar joinFilter = ee.Filter.withinDistance({\n  distance: 2000,\n  leftField: '.geo',\n  rightField: '.geo'\n});\n\n// Apply the join.  The leftField corresponds to the primary collection\n// and the rightField corresponds to the secondary collection.  The\n// matching condition is specified by the filter.\nvar closeParks = ee.Join.simple().apply({\n  primary: parks,\n  secondary: bart,\n  condition: joinFilter\n});\n\n// Buffer the bart stations by 2km for display purposes.\nvar bufferedBart = bart.map(function(f) { return f.buffer(2000, 100); });\nMap.setCenter(-122.45, 37.75, 13);\nMap.addLayer(bufferedBart, {color: 'b0b0b0'});\nMap.addLayer(closeParks, {color: '008000'});\n", "environment": "[]"}, {"name": "Reduce To Image", "code": "// Example of FeatureCollection.reduceToImage()\n\n// Define a feature collection with a value we want to average.\nvar fc = new ee.FeatureCollection([\n  ee.Feature(\n    ee.Geometry.Rectangle(\n      -122.4550, 37.8035,\n      -122.4781, 37.7935),\n    {'value': 0}),\n  ee.Feature(\n    ee.Geometry.Polygon([\n      [-122.4427, 37.8027],\n      [-122.4587, 37.7987],\n      [-122.4440, 37.7934]]),\n    {'value': 1})\n  ]);\n\n// Reduce the collection to an image, where each pixel\n// is the mean of the 'value' property in all features\n// intersecting that pixel.\nvar image_reduced = fc.reduceToImage(['value'], 'mean');\n\nMap.setCenter(-122.4561, 37.7983, 14);\nMap.addLayer(image_reduced, {\n  min: 0,\n  max: 1,\n  palette: ['008800', '00FF00']});\n", "environment": "[]"}]}, {"name": "Image", "contents": [{"name": "Canny Edge Detector", "code": "// Canny Edge Detector example.\n\n// Load an image and compute NDVI from it.\nvar image = ee.Image('LANDSAT/LT05/C01/T1_TOA/LT05_031034_20110619');\nvar ndvi = image.normalizedDifference(['B4','B3']);\n\n// Detect edges in the composite.\nvar canny = ee.Algorithms.CannyEdgeDetector(ndvi, 0.7);\n\n// Mask the image with itself to get rid of areas with no edges.\ncanny = canny.updateMask(canny);\n\nMap.setCenter(-101.05259, 37.93418, 13);\nMap.addLayer(ndvi, {min: 0, max: 1}, 'Landsat NDVI');\nMap.addLayer(canny, {min: 0, max: 1, palette: 'FF0000'}, 'Canny Edges');\n", "environment": "[]"}, {"name": "Center Pivot Irrigation Detector", "code": "// Center-pivot Irrigation Detector.\n//\n// Finds circles that are 500m in radius.\nMap.setCenter(-106.06, 37.71, 12);\n\n// A nice NDVI palette.\nvar palette = [\n  'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718',\n  '74A901', '66A000', '529400', '3E8601', '207401', '056201',\n  '004C00', '023B01', '012E01', '011D01', '011301'];\n\n// Just display the image with the palette.\nvar image = ee.Image('LANDSAT/LC08/C01/T1_TOA/LC08_034034_20170608');\nvar ndvi = image.normalizedDifference(['B5','B4']);\n\nMap.addLayer(ndvi, {min: 0, max: 1, palette: palette}, 'Landsat NDVI');\n\n// Find the difference between convolution with circles and squares.\n// This difference, in theory, will be strongest at the center of\n// circles in the image. This region is filled with circular farms\n// with radii on the order of 500m.\nvar farmSize = 500;  // Radius of a farm, in meters.\nvar circleKernel = ee.Kernel.circle(farmSize, 'meters');\nvar squareKernel = ee.Kernel.square(farmSize, 'meters');\nvar circles = ndvi.convolve(circleKernel);\nvar squares = ndvi.convolve(squareKernel);\nvar diff = circles.subtract(squares);\n\n// Scale by 100 and find the best fitting pixel in each neighborhood.\nvar diff = diff.abs().multiply(100).toByte();\nvar max = diff.focal_max({radius: farmSize * 1.8, units: 'meters'});\n// If a pixel isn't the local max, set it to 0.\nvar local = diff.where(diff.neq(max), 0);\nvar thresh = local.gt(2);\n\n// Here, we highlight the maximum differences as \"Kernel Peaks\"\n// and draw them in red.\nvar peaks = thresh.focal_max({kernel: circleKernel});\nMap.addLayer(peaks.updateMask(peaks), {palette: 'FF3737'}, 'Kernel Peaks');\n\n// Detect the edges of the features.  Discard the edges with lower intensity.\nvar canny = ee.Algorithms.CannyEdgeDetector(ndvi, 0);\ncanny = canny.gt(0.3);\n\n// Create a \"ring\" kernel from two circular kernels.\nvar inner = ee.Kernel.circle(farmSize - 20, 'meters', false, -1);\nvar outer = ee.Kernel.circle(farmSize + 20, 'meters', false, 1);\nvar ring = outer.add(inner, true);\n\n// Highlight the places where the feature edges best match the circle kernel.\nvar centers = canny.convolve(ring).gt(0.5).focal_max({kernel: circleKernel});\nMap.addLayer(centers.updateMask(centers), {palette: '4285FF'}, 'Ring centers');\n", "environment": "[]"}, {"name": "Clamp", "code": "// ee.Image.clamp() example.\n\n// Clamp the values of all bands in an image to lie within the specified range.\n// Values below the low value of that range are set to low value, values above\n// the high value of that range are set to the high value.\n\nvar image = ee.Image('CGIAR/SRTM90_V4');\nvar clamped = image.clamp(1000, 2000);\n\nMap.setCenter(-121.753, 46.855, 9);\nMap.addLayer(image, {min: 0, max: 4300}, 'Full stretch');\nMap.addLayer(clamped, {min: 0, max: 4300}, 'Clamped');\n", "environment": "[]"}, {"name": "Connected Pixel Count", "code": "// Image.ConnectedPixelCount example.\n\n// Split pixels of band 01 into \"bright\" (arbitrarily defined as\n// reflectance \u003e 0.3) and \"dim\". Highlight small (\u003c30 pixels)\n// standalone islands of \"bright\" or \"dim\" type.\nvar img = ee.Image('MODIS/006/MOD09GA/2012_03_09')\n              .select('sur_refl_b01')\n              .multiply(0.0001);\n\n// Create a threshold image.\nvar bright = img.gt(0.3);\n\n// Compute connected pixel counts; stop searching for connected pixels\n// once the size of the connected neighborhood reaches 30 pixels, and\n// use 8-connected rules.\nvar conn = bright.connectedPixelCount({\n  maxSize: 30,\n  eightConnected: true\n});\n\n// Make a binary image of small clusters.\nvar smallClusters = conn.lt(30);\n\nMap.setCenter(-107.24304, 35.78663, 8);\nMap.addLayer(img, {min: 0, max: 1}, 'original');\nMap.addLayer(smallClusters.updateMask(smallClusters),\n         {min: 0, max: 1, palette: 'FF0000'}, 'cc');\n", "environment": "[]"}, {"name": "Expression", "code": "// Compute Enhanced Vegetation Index (EVI) over the MODIS MOD09GA product\n// using an expression.\n\n// Load a MODIS image and apply the scaling factor.\nvar img = ee.Image('MODIS/006/MOD09GA/2012_03_09').multiply(0.0001);\n\n// Compute EVI using an expression.  The second argument is a map from\n// variable name to band name in the input image.\nvar evi = img.expression(\n    '2.5 * (nir - red) / (nir + 6 * red - 7.5 * blue + 1)',\n    {\n        red: img.select('sur_refl_b01'),    // 620-670nm, RED\n        nir: img.select('sur_refl_b02'),    // 841-876nm, NIR\n        blue: img.select('sur_refl_b03')    // 459-479nm, BLUE\n    });\n\n// Center the map.\nMap.setCenter(-94.84497, 39.01918, 8);\n\n// Display the input image and the EVI computed from it.\nMap.addLayer(img.select(['sur_refl_b01', 'sur_refl_b04', 'sur_refl_b03']),\n         {min: 0, max: 0.2}, 'MODIS bands 1/4/3');\nMap.addLayer(evi, {min: 0, max: 1}, 'EVI');\n", "environment": "[]"}, {"name": "From Name", "code": "// Display an image given its ID.\n\nvar image = ee.Image('CGIAR/SRTM90_V4');\n// Center the Map.\nMap.setCenter(-110, 40, 5);\n// Display the image.\nMap.addLayer(image, {min: 0, max: 3000}, 'SRTM');\n", "environment": "[]"}, {"name": "HSV Pan Sharpening", "code": "// HSV-based Pan-Sharpening.\n\n// Grab a sample L8 image and pull out the RGB and pan bands.\nvar image = ee.Image(ee.ImageCollection('LANDSAT/LC08/C01/T1_TOA')\n  .filterDate('2017-01-01', '2017-12-31')\n  .filterBounds(ee.Geometry.Point(-122.0808, 37.3947))\n  .sort('CLOUD_COVER')\n  .first());\n\nvar rgb = image.select('B4', 'B3', 'B2');\nvar pan = image.select('B8');\n\n// Convert to HSV, swap in the pan band, and convert back to RGB.\nvar huesat = rgb.rgbToHsv().select('hue', 'saturation');\nvar upres = ee.Image.cat(huesat, pan).hsvToRgb();\n\n// There are many fine places to look; here is one.  Comment\n// this out if you want to twiddle knobs while panning around.\nMap.setCenter(-122.0808, 37.3947, 14);\n\n// Display before and after layers using the same vis parameters.\nMap.addLayer(rgb, {max: 0.3}, 'Original');\nMap.addLayer(upres, {max: 0.3}, 'Pansharpened');\n", "environment": "[]"}, {"name": "Hillshade", "code": "// Hillshade example.  This is a demonstration of computing\n// a hillshade from terrain data and displaying multiple\n// layers based on multiple view geometries.  Hillshade\n// creation is also provided by ee.Terrain.hillshade().\n\n// Define a function to convert from degrees to radians.\nfunction radians(img) {\n  return img.toFloat().multiply(Math.PI).divide(180);\n}\n\n// Define a function to compute a hillshade from terrain data\n// for the given sun azimuth and elevation.\nfunction hillshade(az, ze, slope, aspect) {\n  // Convert angles to radians.\n  var azimuth = radians(ee.Image(az));\n  var zenith = radians(ee.Image(ze));\n  // Note that methods on images are needed to do the computation.\n  // i.e. JavaScript operators (e.g. +, -, /, *) do not work on images.\n  // The following implements:\n  // Hillshade = cos(Azimuth - Aspect) * sin(Slope) * sin(Zenith) +\n  //     cos(Zenith) * cos(Slope)\n  return azimuth.subtract(aspect).cos()\n    .multiply(slope.sin())\n    .multiply(zenith.sin())\n    .add(\n      zenith.cos().multiply(slope.cos()));\n}\n\n// Compute terrain meaasures from the SRTM DEM.\nvar terrain = ee.Algorithms.Terrain(ee.Image('CGIAR/SRTM90_V4'));\nvar slope = radians(terrain.select('slope'));\nvar aspect = radians(terrain.select('aspect'));\n\n// For loops are needed for control-flow operations on client-side\n// operations.  Here Map.addLayer() is a client operation that needs\n// to be performed in a for loop.  In general, avoid for loops\n// for any server-side operation.\nMap.setCenter(-121.767, 46.852, 11);\nfor (var i = 0; i \u003c 360; i += 60) {\n  Map.addLayer(hillshade(i, 60, slope, aspect), {}, i + ' deg');\n}\n", "environment": "[]"}, {"name": "Hough Transform", "code": "// An example finding linear features using the HoughTransform.\n\n// Load an image and compute NDVI.\nvar image = ee.Image('LANDSAT/LC08/C01/T1_TOA/LC08_033032_20170719');\nvar ndvi = image.normalizedDifference(['B5', 'B4']);\n\n// Apply a Canny edge detector.\nvar canny = ee.Algorithms.CannyEdgeDetector({\n  image: ndvi,\n  threshold: 0.4\n}).multiply(255);\n\n// Apply the Hough transform.\nvar h = ee.Algorithms.HoughTransform({\n  image: canny,\n  gridSize: 256,\n  inputThreshold: 50,\n  lineThreshold: 100\n});\n\n// Display.\nMap.setCenter(-103.80140, 40.21729, 13);\nMap.addLayer(image, {bands: ['B4', 'B3', 'B2'], max: 0.3}, 'source_image');\nMap.addLayer(canny.updateMask(canny), {min: 0, max: 1, palette: 'blue'}, 'canny');\nMap.addLayer(h.updateMask(h), {min: 0, max: 1, palette: 'red'}, 'hough');\n", "environment": "[]"}, {"name": "Landcover Cleanup", "code": "// Morphological processing of land cover.  This example\n// includes spatial smoothing (neighborhood mode) followed by\n// dilation, erosion and dilation again.  Reprojection is\n// used to force these operations to be performed at the\n// native scale of the input (rather than variable pixel\n// sizes based on zoom level).\n\n// Force projection of 500 meters/pixel, which is the native MODIS resolution.\nvar SCALE = 500;\n\n// Load a 2001 MODIS land cover image.\nvar image1 = ee.Image('MODIS/051/MCD12Q1/2001_01_01');\n// Select the classification band of interest.\nvar image2 = image1.select(['Land_Cover_Type_1']);\n// Reproject to WGS84 to force the image to be reprojected on load.\n// This is just for display purposes, to visualize the input to\n// the following operations.  The next reproject is sufficient\n// to force the computation to occur at native scale.\nvar image3 = image2.reproject('EPSG:4326', null, SCALE);\n// Smooth with a mode filter.\nvar image4 = image3.focal_mode();\n// Use erosion and dilation to get rid of small islands.\nvar image5 = image4.focal_max(3).focal_min(5).focal_max(3);\n// Reproject to force the operations to be performed at SCALE.\nvar image6 = image5.reproject('EPSG:4326', null, SCALE);\n\n// Define display parameters with appropriate colors for the MODIS\n// land cover classification image.\nvar PALETTE = [\n    'aec3d4', // water\n    '152106', '225129', '369b47', '30eb5b', '387242', // forest\n    '6a2325', 'c3aa69', 'b76031', 'd9903d', '91af40', // shrub, grass, savannah\n    '111149', // wetlands\n    'cdb33b', // croplands\n    'cc0013', // urban\n    '33280d', // crop mosaic\n    'd7cdcc', // snow and ice\n    'f7e084', // barren\n    '6f6f6f'  // tundra\n].join(',');\n\nvar vis_params = {min: 0, max: 17, palette: PALETTE};\n\n// Display each step of the computation.\nMap.setCenter(-113.41842, 40.055489, 6);\nMap.addLayer(image2, vis_params, 'IGBP classification');\nMap.addLayer(image3, vis_params, 'Reprojected');\nMap.addLayer(image4, vis_params, 'Mode');\nMap.addLayer(image5, vis_params, 'Smooth');\nMap.addLayer(image6, vis_params, 'Smooth');\n", "environment": "[]"}, {"name": "Modis Qa Bands", "code": "// Extract MODIS QA information from the \"state_1km\" QA band\n// and use it to mask out cloudy and deep ocean areas.\n//\n// QA Band information is available at:\n// https://lpdaac.usgs.gov/products/modis_products_table/mod09ga\n// Table 1: 1-kilometer State QA Descriptions (16-bit)\n\n\n/**\n * Returns an image containing just the specified QA bits.\n *\n * Args:\n *   image - The QA Image to get bits from.\n *   start - The first bit position, 0-based.\n *   end   - The last bit position, inclusive.\n *   name  - A name for the output image.\n */\nvar getQABits = function(image, start, end, newName) {\n    // Compute the bits we need to extract.\n    var pattern = 0;\n    for (var i = start; i \u003c= end; i++) {\n       pattern += Math.pow(2, i);\n    }\n    return image.select([0], [newName])\n                  .bitwiseAnd(pattern)\n                  .rightShift(start);\n};\n\n// Reference a single MODIS MOD09GA image.\nvar image = ee.Image('MODIS/006/MOD09GA/2012_10_11');\n\n// Select the QA band\nvar QA = image.select('state_1km');\n\n// Get the cloud_state bits and find cloudy areas.\nvar cloud = getQABits(QA, 0, 1, 'cloud_state')\n                    .expression(\"b(0) == 1 || b(0) == 2\");\n\n// Get the land_water_flag bits.\nvar landWaterFlag = getQABits(QA, 3, 5, 'land_water_flag');\n\n// Create a mask that filters out deep ocean and cloudy areas.\nvar mask = landWaterFlag.neq(7).and(cloud.not());\n\n// Add a map layer with the deep ocean and clouds areas masked out.\nMap.addLayer(image.updateMask(mask),\n  {\n    bands: ['sur_refl_b01', 'sur_refl_b04', 'sur_refl_b03'],\n    min: -100,\n    max: 2000\n  }, 'MOD09GA 143'\n);\n\n// Add a semi-transparent map layer that displays the clouds.\nMap.addLayer(\n    cloud.updateMask(cloud),\n    {palette: 'FFFFFF', opacity: 0.8},\n    'clouds'\n);\n", "environment": "[]"}, {"name": "Normalized Difference", "code": "// NormalizedDifference example.\n//\n// Compute Normalized Difference Vegetation Index over MOD09GA product.\n// NDVI = (NIR - RED) / (NIR + RED), where\n// RED is sur_refl_b01, 620-670nm\n// NIR is sur_refl_b02, 841-876nm\n\n// Load a MODIS image.\nvar img = ee.Image('MODIS/006/MOD09GA/2012_03_09');\n\n// Use the normalizedDifference(A, B) to compute (A - B) / (A + B)\nvar ndvi = img.normalizedDifference(['sur_refl_b02', 'sur_refl_b01']);\n\n// Make a palette: a list of hex strings.\nvar palette = ['FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718',\n               '74A901', '66A000', '529400', '3E8601', '207401', '056201',\n               '004C00', '023B01', '012E01', '011D01', '011301'];\n\n// Center the map\nMap.setCenter(-94.84497, 39.01918, 8);\n\n// Display the input image and the NDVI derived from it.\nMap.addLayer(img.select(['sur_refl_b01', 'sur_refl_b04', 'sur_refl_b03']),\n         {gain: [0.1, 0.1, 0.1]}, 'MODIS bands 1/4/3');\nMap.addLayer(ndvi, {min: 0, max: 1, palette: palette}, 'NDVI');\n", "environment": "[]"}, {"name": "Pixel Area", "code": "// Displays the decreasing area covered by a single pixel at\n// higher latitudes using the Image.pixelArea() function.\n\n// Create an image in which the value of each pixel is its area.\nvar img = ee.Image.pixelArea();\nMap.setCenter(0, 0, 3);\nMap.addLayer(img, {min: 2e8, max: 4e8, opacity: 0.85}, 'pixel area');\n", "environment": "[]"}, {"name": "Pixel Lon Lat", "code": "// Draws 60 lat/long lines per degree using the pixelLonLat() function.\n\n// Create an image in which the value of each pixel is its\n// coordinates in minutes.\nvar img = ee.Image.pixelLonLat().multiply(60.0);\n\n// Get the decimal part and check if it's less than a small delta.\nimg = img.subtract(img.floor()).lt(0.05);\n\n// The pixels less than the delta are the grid, in both directions.\nvar grid = img.select('latitude').or(img.select('longitude'));\n\n// Draw the grid.\nMap.setCenter(-122.09228, 37.42330, 12);\nMap.addLayer(grid.updateMask(grid), {palette: '008000'}, 'Graticule');\n", "environment": "[]"}, {"name": "Polynomial", "code": "// Applies a non-linear contrast enhancement to a MODIS image using\n// function -0.2 + 2.4x - 1.2x^2.\n\n// Load a MODIS image and apply the scaling factor.\nvar img = ee.Image('MODIS/006/MOD09GA/2012_03_09')\n              .select(['sur_refl_b01', 'sur_refl_b04', 'sur_refl_b03'])\n              .multiply(0.0001);\n\n// Apply the polynomial enhancement.\nvar adj = img.polynomial([-0.2, 2.4, -1.2]);\n\nMap.setCenter(-107.24304, 35.78663, 8);\nMap.addLayer(img, {min: 0, max: 1}, 'original');\nMap.addLayer(adj, {min: 0, max: 1}, 'adjusted');\n", "environment": "[]"}, {"name": "Reduce Region", "code": "// Image.reduceRegion example\n//\n// Computes a simple reduction over a region of an image.  A reduction\n// is any process that takes an arbitrary number of inputs (such as\n// all the pixels of an image in a given region) and computes one or\n// more fixed outputs.  The result is a dictionary that contains the\n// computed values, which in this example is the maximum pixel value\n// in the region.\n\n// This example shows how to print the resulting dictionary to the\n// console, which is useful when developing and debugging your\n// scripts, but in a larger workflow you might instead use the\n// Dicitionary.get() function to extract the values you need from the\n// dictionary for use as inputs to other functions.\n\n// The input image to reduce, in this case an SRTM elevation map.\nvar image = ee.Image('CGIAR/SRTM90_V4');\n\n// The region to reduce within.\nvar poly = ee.Geometry.Rectangle([-109.05, 41, -102.05, 37]);\n\n// Reduce the image within the given region, using a reducer that\n// computes the max pixel value.  We also specify the spatial\n// resolution at which to perform the computation, in this case 200\n// meters.\nvar max = image.reduceRegion({\n  reducer: ee.Reducer.max(),\n  geometry: poly,\n  scale: 200\n});\n\n// Print the result (a Dictionary) to the console.\nprint(max);\n", "environment": "[]"}, {"name": "Zero Crossing", "code": "// Mark pixels where the elevation crosses 1000m value and compare\n// that to pixels that are exactly equal to 1000m.\n\nvar elev = ee.Image('CGIAR/SRTM90_V4');\n\n// A zero-crossing is defined as any pixel where the right,\n// bottom, or diagonal bottom-right pixel has the opposite sign.\nvar image = elev.subtract(1000).zeroCrossing();\n\nMap.setCenter(-121.68148, 37.50877, 13);\nMap.addLayer(image, {min: 0, max: 1, opacity: 0.5}, 'Crossing 1000m');\n\nvar exact = elev.eq(1000);\nMap.addLayer(exact.updateMask(exact), {palette: 'red'}, 'Exactly 1000m');\n", "environment": "[]"}]}, {"name": "Image Collection", "contents": [{"name": "Animated Thumbnail", "code": "// Simple ImageCollection preview via animated GIF.\n\n// The region of interest - a planar rectangle around Australia.\nvar rect = ee.Geometry.Rectangle({\n  coords: [[110, -44], [155, -10]],\n  geodesic: false\n});\nMap.addLayer(rect);\nMap.centerObject(rect, 3);\n\n// Select MODIS vegetation composites from 2018.\nvar collection = ee.ImageCollection(\"MODIS/006/MOD13Q1\")\n  .filterDate('2018-01-01', '2019-01-01')\n  .select('NDVI');\n\n// Add the first image to the map, just as a preview.\nvar im = ee.Image(collection.first());\nMap.addLayer(im, {}, \"first image\");\n\n// Visualization parameters.\nvar args = {\n  crs: 'EPSG:3857',  // Maps Mercator\n  dimensions: '300',\n  region: rect,\n  min: -2000,\n  max: 10000,\n  palette: 'black, blanchedalmond, green, green',\n  framesPerSecond: 12,\n};\n\n// Create a video thumbnail and add it to the map.\nvar thumb = ui.Thumbnail({\n  // Specifying a collection for \"image\" animates the sequence of images.\n  image: collection,\n  params: args,\n  style: {\n    position: 'bottom-right',\n    width: '320px'\n  }});\nMap.add(thumb);\n", "environment": "[]"}, {"name": "Clipped Composite", "code": "// Composite an image collection and clip it to a boundary.\n\n// Load Landsat 7 raw imagery and filter it to April-July 2000.\nvar collection = ee.ImageCollection('LANDSAT/LE07/C01/T1')\n    .filterDate('2000-04-01', '2000-07-01');\n\n// Reduce the collection by taking the median.\nvar median = collection.median();\n\n// Load a table of state boundaries and filter.\nvar fc = ee.FeatureCollection('TIGER/2016/States')\n    .filter(ee.Filter.or(\n        ee.Filter.eq('NAME', 'Nevada'),\n        ee.Filter.eq('NAME', 'Arizona')));\n\n// Clip to the output image to the Nevada and Arizona state boundaries.\nvar clipped = median.clipToCollection(fc);\n\n// Display the result.\nMap.setCenter(-110, 40, 5);\nvar visParams = {bands: ['B3', 'B2', 'B1'], gain: [1.4, 1.4, 1.1]};\nMap.addLayer(clipped, visParams, 'clipped composite');\n", "environment": "[]"}, {"name": "Expression Map", "code": "// Map an expression over a collection.\n//\n// Computes the mean NDVI and SAVI by mapping an expression over a collection\n// and taking the mean.  This intentionally exercises both variants of\n// Image.expression.\n\n// Filter the L7 collection to a single month.\nvar collection = ee.ImageCollection('LANDSAT/LE07/C01/T1_TOA')\n    .filterDate('2002-11-01', '2002-12-01');\n\n// A function to compute NDVI.\nvar NDVI = function(image) {\n  return image.expression('float(b(\"B4\") - b(\"B3\")) / (b(\"B4\") + b(\"B3\"))');\n};\n\n// A function to compute Soil Adjusted Vegetation Index.\nvar SAVI = function(image) {\n  return image.expression(\n      '(1 + L) * float(nir - red)/ (nir + red + L)',\n      {\n        'nir': image.select('B4'),\n        'red': image.select('B3'),\n        'L': 0.2\n      });\n};\n\n// Shared visualization parameters.\nvar vis = {\n  min: 0,\n  max: 1,\n  palette: [\n      'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718',\n      '74A901', '66A000', '529400', '3E8601', '207401', '056201',\n      '004C00', '023B01', '012E01', '011D01', '011301'\n  ]\n};\n\nMap.setCenter(-93.7848, 30.3252, 11);\n\n// Map the functions over the collection, reduce to mean and display.\nMap.addLayer(collection.map(NDVI).mean(), vis, 'Mean NDVI');\nMap.addLayer(collection.map(SAVI).mean(), vis, 'Mean SAVI');\n", "environment": "[]"}, {"name": "Filtered Composite", "code": "// Filter an image collection by date and region to make a\n// median pixel composite.\n//\n// See also: ClippedComposite, which crops the output image\n// instead of filtering the input collection.\n\n// Filter to only include images intersecting Colorado or Utah.\nvar polygon = ee.Geometry.Polygon({\n  coords: [[[-109.05, 37.0], [-102.05, 37.0], [-102.05, 41.0], // Colorado\n            [-109.05, 41.0], [-111.05, 41.0], [-111.05, 42.0], // Utah\n            [-114.05, 42.0], [-114.05, 37.0], [-109.05, 37.0]]],\n  geodesic: false\n});\n\n// Create a Landsat 7 composite for Spring of 2000, and filter by\n// the bounds of the FeatureCollection.\nvar collection = ee.ImageCollection('LANDSAT/LE07/C01/T1')\n    .filterDate('2000-04-01', '2000-07-01')\n    .filterBounds(polygon);\n\n// Compute the median in each band, in each pixel.\nvar median = collection.median();\n\n// Select the red, green and blue bands.\nvar result = median.select('B3', 'B2', 'B1');\nMap.addLayer(result, {gain: [1.4, 1.4, 1.1]});\nMap.setCenter(-110, 40, 5);\n", "environment": "[]"}, {"name": "Landsat Simple Composite", "code": "// Composite 6 months of Landsat 8.\n\n// Note that the input to simpleComposite is raw data.\nvar l8_filtered = ee.ImageCollection('LANDSAT/LC08/C01/T1').filterDate(\n  '2015-1-1', '2015-7-1');\n\n// The asFloat parameter gives floating-point TOA output instead of\n// the UINT8 outputs of the default simpleComposite().\nvar composite = ee.Algorithms.Landsat.simpleComposite({\n  collection: l8_filtered,\n  asFloat: true\n});\n\n// Pick a spot with lots of clouds.\nMap.setCenter(-47.6735, -0.6344, 12);\n// Display a composite with a band combination chosen from:\n// https://landsat.usgs.gov/how-do-landsat-8-band-combinations-differ-landsat-7-or-landsat-5-satellite-data\nvar viz = {bands: ['B6', 'B5', 'B4'], max: [0.3, 0.4, 0.3]};\nMap.addLayer(composite, viz, 'ee.Algorithms.Landsat.simpleComposite');\n\n// For reference, below is the code equivalent to\n// the server-side implementation of ee.Algorithms.simpleComposite().\n\nfunction TOAComposite(collection,\n                      asFloat,\n                      percentile,\n                      cloudScoreRange,\n                      maxDepth) {\n\n  // Select a sufficient set of images, and compute TOA and cloudScore.\n  var prepared =\n      ee.Algorithms.Landsat.pathRowLimit(collection, maxDepth, 4 * maxDepth)\n                   .map(ee.Algorithms.Landsat.TOA)\n                   .map(ee.Algorithms.Landsat.simpleCloudScore);\n\n  // Determine the per-pixel cloud score threshold.\n  var cloudThreshold = prepared.reduce(ee.Reducer.min())\n                               .select('cloud_min')\n                               .add(cloudScoreRange);\n\n  // Mask out pixels above the cloud score threshold, and update the mask of\n  // the remaining pixels to be no higher than the cloud score mask.\n  function updateMask(image) {\n    var cloud = image.select('cloud');\n    var cloudMask = cloud.mask().min(cloud.lte(cloudThreshold));\n    // Drop the cloud band and QA bands.\n    image = image.select('B[0-9].*');\n    return image.mask(image.mask().min(cloudMask));\n  }\n  var masked = prepared.map(updateMask);\n\n  // Take the (mask-weighted) median (or other percentile)\n  // of the good pixels.\n  var result = masked.reduce(ee.Reducer.percentile([percentile]));\n\n  // Force the mask up to 1 if it's non-zero, to hide L7 SLC artifacts.\n  result = result.mask(result.mask().gt(0));\n\n  // Clean up the band names by removing the suffix that reduce() added.\n  var badNames = result.bandNames();\n  var goodNames = badNames.map(\n          function(x) { return ee.String(x).replace('_[^_]*$', ''); });\n  result = result.select(badNames, goodNames);\n\n  if (!asFloat) {\n    // Scale reflective bands by 255, and offset thermal bands by -100.\n    // These lists are only correct for Landsat 8; different lists are\n    // used for the other instruments.\n    var scale = [ 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 1 ];\n    var offset = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, -100 ];\n    result = result.multiply(scale).add(offset).round().uint8();\n  }\n  return result;\n}\n\n// Example of TOAComposite usage.\nvar composite_in_js = TOAComposite(l8_filtered, true, 50, 10, 40);\nMap.addLayer(\n    composite_in_js, viz,\n    'Same TOA composite implemented in Javascript', false);\n", "environment": "[]"}, {"name": "Linear Fit", "code": "// Compute the trend of nighttime lights from DMSP.\n\n// Add a band containing image date as years since 1990.\nfunction createTimeBand(img) {\n  var year = img.date().difference(ee.Date('1990-01-01'), 'year');\n  return ee.Image(year).float().addBands(img);\n}\n\n// Fit a linear trend to the nighttime lights collection.\nvar collection = ee.ImageCollection('NOAA/DMSP-OLS/CALIBRATED_LIGHTS_V4')\n    .select('avg_vis')\n    .map(createTimeBand);\nvar fit = collection.reduce(ee.Reducer.linearFit());\n\n// Display a single image\nMap.addLayer(ee.Image(collection.select('avg_vis').first()),\n         {min: 0, max: 63},\n         'stable lights first asset');\n\n// Display trend in red/blue, brightness in green.\nMap.setCenter(30, 45, 4);\nMap.addLayer(fit,\n         {min: 0, max: [0.18, 20, -0.18], bands: ['scale', 'offset', 'scale']},\n         'stable lights trend');\n", "environment": "[]"}, {"name": "Simple Cloud Score", "code": "// SimpleCloudScore, an example of computing a cloud-free composite with L8\n// by selecting the least-cloudy pixel from the collection.\n\n// A mapping from a common name to the sensor-specific bands.\nvar LC8_BANDS = ['B2',   'B3',    'B4',  'B5',  'B6',    'B7',    'B10'];\nvar STD_NAMES = ['blue', 'green', 'red', 'nir', 'swir1', 'swir2', 'temp'];\n\n// Compute a cloud score.  This expects the input image to have the common\n// band names: [\"red\", \"blue\", etc], so it can work across sensors.\nvar cloudScore = function(img) {\n  // A helper to apply an expression and linearly rescale the output.\n  var rescale = function(img, exp, thresholds) {\n    return img.expression(exp, {img: img})\n        .subtract(thresholds[0]).divide(thresholds[1] - thresholds[0]);\n  };\n\n  // Compute several indicators of cloudyness and take the minimum of them.\n  var score = ee.Image(1.0);\n  // Clouds are reasonably bright in the blue band.\n  score = score.min(rescale(img, 'img.blue', [0.1, 0.3]));\n\n  // Clouds are reasonably bright in all visible bands.\n  score = score.min(rescale(img, 'img.red + img.green + img.blue', [0.2, 0.8]));\n\n  // Clouds are reasonably bright in all infrared bands.\n  score = score.min(\n      rescale(img, 'img.nir + img.swir1 + img.swir2', [0.3, 0.8]));\n\n  // Clouds are reasonably cool in temperature.\n  score = score.min(rescale(img, 'img.temp', [300, 290]));\n\n  // However, clouds are not snow.\n  var ndsi = img.normalizedDifference(['green', 'swir1']);\n  return score.min(rescale(ndsi, 'img', [0.8, 0.6]));\n};\n\n// Filter the TOA collection to a time-range and add the cloudscore band.\nvar collection = ee.ImageCollection('LANDSAT/LC08/C01/T1_TOA')\n    .filterDate('2017-05-01', '2017-07-01')\n    .map(function(img) {\n      // Invert the cloudscore so 1 is least cloudy, and rename the band.\n      var score = cloudScore(img.select(LC8_BANDS, STD_NAMES));\n      score = ee.Image(1).subtract(score).select([0], ['cloudscore']);\n      return img.addBands(score);\n    });\n\n// Define visualization parameters for a true color image.\nvar vizParams = {bands: ['B4', 'B3', 'B2'], max: 0.4, gamma: 1.6};\nMap.setCenter(-120.24487, 37.52280, 8);\nMap.addLayer(collection.qualityMosaic('cloudscore'), vizParams);\n", "environment": "[]"}]}, {"name": "Primitive", "contents": [{"name": "Dictionary Get", "code": "// Extract values from a dictionary returned by reduceRegion.\n//\n// This example computes the mean and standard deviation of an image\n// and then stretches the image with those values.\n\nvar img = ee.Image('CGIAR/SRTM90_V4');\nvar meanReducer = ee.Reducer.mean();\nvar sigmaReducer = ee.Reducer.stdDev();\nvar region = ee.Geometry.Rectangle(9, 9, 10, 10);\nvar scale = 10000;       // 10km pixels.\n\n// Extract the mean and standard deviation properties.\n// These come back from reduceRegion in a dictionary,\n// with a key that's the name of the band it came from.\nvar mean = img.reduceRegion(meanReducer, region, scale).get('elevation');\nvar sigma = img.reduceRegion(sigmaReducer, region, scale).get('elevation');\n\n// Stretch with the stats to normalize the image so that\n// 3*sigma fits within [0:1].\nvar stretch = function(img, mean, sigma) {\n  return ee.Image(0).expression(\n    '((img - mean) / (sigma * 3)) + 0.5', {\n      'img': img,\n      'mean': ee.Image.constant(mean),\n      'sigma': ee.Image.constant(sigma)\n    });\n};\n\nMap.setCenter(9.5, 9.5, 9);\nMap.addLayer(stretch(img, mean, sigma), {min: 0, max: 1});\n", "environment": "[]"}]}, {"name": "User Interface", "contents": [{"name": "Airstrip Thumbnails", "code": "// Step through thumbnails of an image collection showing the development\n// of an airstrip developed for gold mining in the 1980's and 1990's.\nvar box = ee.Geometry.Polygon([[\n               [-62.955, 2.433], [-62.830, 2.433],\n               [-62.830, 2.559], [-62.955, 2.559]]]);\n\nvar visParams = {\n  bands: ['B3', 'B2', 'B1'],\n  min: 0,\n  max: 1200,\n  gamma: [1.1, 1.1, 1]\n};\n\nvar images = ee.ImageCollection('LANDSAT/LT05/C01/T1_SR')\n    .filterBounds(box)\n    .filterDate('1984-01-01', '1991-01-01');\n\nMap.centerObject(box);\nMap.addLayer(ee.Image(images.first()), visParams, 'Landsat 5');\nMap.addLayer(ee.Image().paint(box, 0, 1), {palette: 'FF0000'}, 'Box Outline');\n\nvar selectedIndex = 0;\nvar collectionLength = 0;\n\n// Get the total number of images asynchronously, so we know how far to step.\nimages.size().evaluate(function(length) {\n  collectionLength = length;\n});\n\n// Sets up next and previous buttons used to navigate through previews of the\n// images in the collection.\nvar prevButton = new ui.Button('Previous', null, true, {margin: '0 auto 0 0'});\nvar nextButton = new ui.Button('Next', null, false, {margin: '0 0 0 auto'});\nvar buttonPanel = new ui.Panel(\n    [prevButton, nextButton],\n    ui.Panel.Layout.Flow('horizontal'));\n\n// Build the thumbnail display panel\nvar introPanel = ui.Panel([\n  ui.Label({\n    value: 'Airstrip in Brazilian Amazon',\n    style: {fontWeight: 'bold', fontSize: '24px', margin: '10px 5px'}\n  }),\n  ui.Label('Airstrip developed for gold mining in the 1980\\'s and 1990\\'s.')\n]);\n\n// Helper function to combine two JavaScript dictionaries.\nfunction combine(a, b) {\n  var c = {};\n  for (var key in a) c[key] = a[key];\n  for (var key in b) c[key] = b[key];\n  return c;\n}\n\n// An empty thumbnail that gets filled in during the setImageByIndex callback.\nvar thumbnail = ui.Thumbnail({\n  params: combine(visParams, {\n    dimensions: '256x256',\n    region: box,\n  }),\n  style: {height: '300px', width: '300px'},\n  onClick: function(widget) {\n    // Add the whole scene to the map when the thumbnail is clicked.\n    var layer = Map.layers().get(0);\n    if (layer.get('eeObject') != thumbnail.getImage()) {\n      layer.set('eeObject', thumbnail.getImage());\n    }\n  }\n});\n\nvar imagePanel = ui.Panel([thumbnail]);\nvar dateLabel = ui.Label({style: {margin: '2px 0'}});\nvar idLabel = ui.Label({style: {margin: '2px 0'}});\nvar mainPanel = ui.Panel({\n  widgets: [introPanel, buttonPanel, imagePanel, idLabel, dateLabel],\n  style: {position: 'bottom-left', width: '330px'}\n});\nMap.add(mainPanel);\n\n// Displays the thumbnail of the image at a particular index in the collection.\nvar setImageByIndex = function(index) {\n  var image = ee.Image(images.toList(1, index).get(0));\n  thumbnail.setImage(image);\n\n  // Asynchronously update the image information.\n  image.get('system:id').evaluate(function(id) {\n    idLabel.setValue('ID: ' + id);\n  });\n  image.date().format(\"YYYY-MM-dd\").evaluate(function(date) {\n    dateLabel.setValue('Date: ' + date);\n  });\n};\n\n// Gets the index of the next/previous image in the collection and sets the\n// thumbnail to that image.  Disables the appropriate button when we hit an end.\nvar setImage = function(button, increment) {\n  if (button.getDisabled()) return;\n  setImageByIndex(selectedIndex += increment);\n  nextButton.setDisabled(selectedIndex \u003e= collectionLength - 1);\n  prevButton.setDisabled(selectedIndex \u003c= 0);\n};\n\n// Set up the next and previous buttons.\nprevButton.onClick(function(button) { setImage(button, -1); });\nnextButton.onClick(function(button) { setImage(button, 1); });\n\nsetImageByIndex(0);\n", "environment": "[]"}, {"name": "Async Inspector", "code": "// Desmontrate asynchronous updating of UI elements through evaluate().\n\n// Filter a collection to a time of interest.\nvar l8 = ee.ImageCollection('LANDSAT/LC08/C01/T1_TOA')\n    .filterDate('2014-06-01', '2015-06-01');\n\nvar ndvi = l8.map(function(image) {\n  return image.select().addBands(image.normalizedDifference(['B5', 'B4']));\n});\n\n// Nice visualization parameters for a vegetation index.\nvar vis = {min: 0, max: 1, palette: [\n  'FFFFFF', 'CE7E45', 'FCD163', '66A000', '207401',\n  '056201', '004C00', '023B01', '012E01', '011301']};\nMap.addLayer(ndvi, vis, 'NDVI');\nMap.setCenter(-94.84497, 39.01918, 8);\n\n// Create an inspector panel with a horizontal layout.\nvar inspector = ui.Panel({\n  layout: ui.Panel.Layout.flow('horizontal')\n});\n\n// Add a label to the panel.\ninspector.add(ui.Label('Click to get mean NDVI'));\n\n// Add the panel to the default map.\nMap.add(inspector);\n\n// Set the default map's cursor to a \"crosshair\".\nMap.style().set('cursor', 'crosshair');\n\n// Register a callback on the map to be invoked when the map is clicked.\nMap.onClick(function(coords) {\n  // Clear the panel and show a loading message.\n  inspector.clear();\n  inspector.style().set('shown', true);\n  inspector.add(ui.Label('Loading...', {color: 'gray'}));\n\n  // Compute the mean NDVI; a potentially long-running server operation.\n  var point = ee.Geometry.Point(coords.lon, coords.lat);\n  var temporalMean = ndvi.reduce(ee.Reducer.mean());\n  var sampledPoint = temporalMean.reduceRegion(ee.Reducer.mean(), point, 30);\n  var computedValue = sampledPoint.get('nd_mean');\n\n  // Request the value from the server and use the results in a function.\n  computedValue.evaluate(function(result) {\n    inspector.clear();\n\n    // Add a label with the results from the server.\n    inspector.add(ui.Label({\n      value: 'Mean NDVI: ' + result.toFixed(2),\n      style: {stretch: 'vertical'}\n    }));\n\n    // Add a button to hide the Panel.\n    inspector.add(ui.Button({\n      label: 'Close',\n      onClick: function() {\n        inspector.style().set('shown', false);\n      }\n    }));\n  });\n});\n", "environment": "[]"}, {"name": "Collection Slider", "code": "// Select images from a collection with a silder.\n\nvar collection = ee.ImageCollection('NOAA/DMSP-OLS/NIGHTTIME_LIGHTS')\n    .select('stable_lights')\n\n// A helper function to show the image for a given year on the default map.\nvar showLayer = function(year) {\n  Map.layers().reset();\n  var date = ee.Date.fromYMD(year, 1, 1);\n  var dateRange = ee.DateRange(date, date.advance(1, 'year'));\n  var image = collection.filterDate(dateRange).first();\n  Map.addLayer({\n    eeObject: ee.Image(image),\n    visParams: {\n      min: 0,\n      max: 63,\n      palette:['000000', 'FFFF00', 'FFA500', 'FF4500', 'FF0000']\n    },\n    name: String(year)\n  });\n};\n\n// Create a label and slider.\nvar label = ui.Label('Light Intensity for Year');\nvar slider = ui.Slider({\n  min: 1992,\n  max: 2007,\n  step: 1,\n  onChange: showLayer,\n  style: {stretch: 'horizontal'}\n});\n\n// Create a panel that contains both the slider and the label.\nvar panel = ui.Panel({\n  widgets: [label, slider],\n  layout: ui.Panel.Layout.flow('vertical'),\n  style: {\n    position: 'top-center',\n    padding: '7px'\n  }\n});\n\n// Add the panel to the map.\nMap.add(panel);\n\n// Set default values on the slider and map.\nslider.setValue(2007);\nMap.setCenter(30, 45, 4);\n", "environment": "[]"}, {"name": "Forest Change", "code": "// Demonstrates how to efficiently display a number of layers of a dataset along\n// with a legend for each layer, and some visualization controls.\n\n\n/*\n * Configure layers and locations\n */\nvar hansen = ee.Image('UMD/hansen/global_forest_change_2017_v1_5');\nvar layerProperties = {\n  'Year of Loss': {\n    name: 'lossyear',\n    visParams: {min: 0, max: 17, palette: ['yellow', 'orange', 'red']},\n    legend: [\n      {'2016': 'red'}, {'...': 'orange'}, {'2000': 'yellow'},\n      {'No loss': 'black'}, {'Water or no data': 'grey'}\n    ],\n    defaultVisibility: true\n  },\n  'Loss': {\n    name: 'loss',\n    visParams: {min: 0, max: 1, palette: ['black', 'red']},\n    legend:\n        [{'Loss': 'red'}, {'No loss': 'black'}, {'Water or no data': 'grey'}],\n    defaultVisibility: false\n  },\n  'Percent Tree Cover': {\n    name: 'treecover2000',\n    visParams: {min: 0, max: 100, palette: ['black', 'green']},\n    legend: [\n      {'75-100%': '#00ff00'}, {'50-75%': '#00aa00'}, {'25-50%': '#005500'},\n      {'0-25%': '#000000'}, {'Water or no data': '#404040'}\n    ],\n    defaultVisibility: false\n  }\n};\n\n// Some pre-set locations of interest that will be loaded into a pulldown menu.\nvar locationDict = {\n  'Deforestation in Paraguay': {lon: -60.3726, lat: -21.7416, zoom: 8},\n  'Tornado in Alabama': {lon: -87.332, lat: 33.313, zoom: 11}\n};\n\n\n/*\n * Map panel configuration\n */\n\n// Now let's do some overall layout.\n// Create a map panel.\nvar mapPanel = ui.Map();\n\n// Take all tools off the map except the zoom and mapTypeControl tools.\nmapPanel.setControlVisibility(\n    {all: false, zoomControl: true, mapTypeControl: true});\n\n// Center the map\nvar defaultLocation = locationDict['Deforestation in Paraguay'];\nmapPanel.setCenter(\n    defaultLocation.lon, defaultLocation.lat, defaultLocation.zoom);\n\n// Add these to the interface.\nui.root.widgets().reset([mapPanel]);\nui.root.setLayout(ui.Panel.Layout.flow('horizontal'));\n\n// Add layers to the map and center it.\nfor (var key in layerProperties) {\n  var layer = layerProperties[key];\n  var image = hansen.select(layer.name).visualize(layer.visParams);\n  var masked = addZeroAndWaterMask(image, hansen.select(layer.name));\n  mapPanel.add(ui.Map.Layer(masked, {}, key, layer.defaultVisibility));\n}\n\n// Draws black and gray overlays for nodata/water/zero values.\nfunction addZeroAndWaterMask(visualized, original) {\n  // Places where there is nodata or water are drawn in gray.\n  var water =\n      hansen.select('datamask').neq(1).selfMask().visualize({palette: 'gray'});\n  // Places where the underlying value is zero are drawn in black.\n  var zero = original.eq(0).selfMask().visualize({palette: 'black'});\n  // Stack the images, with the gray on top, black next, and the original below.\n  return ee.ImageCollection([visualized, zero, water]).mosaic();\n}\n\n\n/*\n * Additional component configuration\n */\n\n// Add a title and some explanatory text to a side panel.\nvar header = ui.Label('Global Forest Change', {fontSize: '36px', color: 'red'});\nvar text = ui.Label(\n    'Results from analysis of Landsat images characterizing forest extent and change.',\n    {fontSize: '11px'});\n\nvar toolPanel = ui.Panel([header, text], 'flow', {width: '300px'});\nui.root.widgets().add(toolPanel);\n\n// Create a hyperlink to an external reference.\nvar link = ui.Label(\n    'Science paper by Hansen, Potapov, Moore, Hancher et al.', {},\n    'http://science.sciencemag.org/content/342/6160/850');\nvar linkPanel = ui.Panel(\n    [ui.Label('For more information', {fontWeight: 'bold'}), link]);\ntoolPanel.add(linkPanel);\n\n// Create a layer selector pulldown.\n// The elements of the pulldown are the keys of the layerProperties dictionary.\nvar selectItems = Object.keys(layerProperties);\n\n// Define the pulldown menu.  Changing the pulldown menu changes the map layer\n// and legend.\nvar layerSelect = ui.Select({\n  items: selectItems,\n  value: selectItems[0],\n  onChange: function(selected) {\n    // Loop through the map layers and compare the selected element to the name\n    // of the layer. If they're the same, show the layer and set the\n    // corresponding legend.  Hide the others.\n    mapPanel.layers().forEach(function(element, index) {\n      element.setShown(selected == element.getName());\n    });\n    setLegend(layerProperties[selected].legend);\n  }\n});\n\n// Add the select to the toolPanel with some explanatory text.\ntoolPanel.add(ui.Label('View Different Layers', {'font-size': '24px'}));\ntoolPanel.add(layerSelect);\n\n// Create the legend.\n// Define a panel for the legend and give it a tile.\nvar legendPanel = ui.Panel({\n  style:\n      {fontWeight: 'bold', fontSize: '10px', margin: '0 0 0 8px', padding: '0'}\n});\ntoolPanel.add(legendPanel);\n\nvar legendTitle = ui.Label(\n    'Legend',\n    {fontWeight: 'bold', fontSize: '10px', margin: '0 0 4px 0', padding: '0'});\nlegendPanel.add(legendTitle);\n\n// Define an area for the legend key itself.\n// This area will be replaced every time the layer pulldown is changed.\nvar keyPanel = ui.Panel();\nlegendPanel.add(keyPanel);\n\nfunction setLegend(legend) {\n  // Loop through all the items in a layer's key property,\n  // creates the item, and adds it to the key panel.\n  keyPanel.clear();\n  for (var i = 0; i \u003c legend.length; i++) {\n    var item = legend[i];\n    var name = Object.keys(item)[0];\n    var color = item[name];\n    var colorBox = ui.Label('', {\n      backgroundColor: color,\n      // Use padding to give the box height and width.\n      padding: '8px',\n      margin: '0'\n    });\n    // Create the label with the description text.\n    var description = ui.Label(name, {margin: '0 0 4px 6px'});\n    keyPanel.add(\n        ui.Panel([colorBox, description], ui.Panel.Layout.Flow('horizontal')));\n  }\n}\n\n// Set the initial legend.\nsetLegend(layerProperties[layerSelect.getValue()].legend);\n\n// Create a visibility checkbox and an opacity slider.\n//\n// If the checkbox is clicked off, disable the layer pulldown and turn all the\n// layers off. Otherwise, enable the select, and turn on the selected layer.\nvar checkbox = ui.Checkbox({\n  label: 'Opacity',\n  value: true,\n  onChange: function(value) {\n    var selected = layerSelect.getValue();\n    // Loop through the layers in the mapPanel. For each layer,\n    // if the layer's name is the same as the name selected in the layer\n    // pulldown, set the visibility of the layer equal to the value of the\n    // checkbox. Otherwise, set the visibility to false.\n    mapPanel.layers().forEach(function(element, index) {\n      element.setShown(selected == element.getName() ? value : false);\n    });\n\n    // If the checkbox is on, the layer pulldown should be enabled, otherwise,\n    // it's disabled.\n    layerSelect.setDisabled(!value);\n  }\n});\n\n// Create an opacity slider. This tool will change the opacity for each layer.\n// That way switching to a new layer will maintain the chosen opacity.\nvar opacitySlider = ui.Slider({\n  min: 0,\n  max: 1,\n  value: 1,\n  step: 0.01,\n});\nopacitySlider.onSlide(function(value) {\n  mapPanel.layers().forEach(function(element, index) {\n    element.setOpacity(value);\n  });\n});\n\nvar viewPanel =\n    ui.Panel([checkbox, opacitySlider], ui.Panel.Layout.Flow('horizontal'));\ntoolPanel.add(viewPanel);\n\n// Create the location pulldown.\nvar locations = Object.keys(locationDict);\nvar locationSelect = ui.Select({\n  items: locations,\n  value: locations[0],\n  onChange: function(value) {\n    var location = locationDict[value];\n    mapPanel.setCenter(location.lon, location.lat, location.zoom);\n  }\n});\n\nvar locationPanel = ui.Panel([\n  ui.Label('Visit Example Locations', {'font-size': '24px'}), locationSelect\n]);\ntoolPanel.add(locationPanel);\n", "environment": "[]"}, {"name": "Landsat Explorer", "code": "// A UI to interactively filter a collection, select an individual image\n// from the results, display it with a variety of visualizations, and export it.\n\n// The namespace for our application.  All the state is kept in here.\nvar app = {};\n\n/** Creates the UI panels. */\napp.createPanels = function() {\n  /* The introduction section. */\n  app.intro = {\n    panel: ui.Panel([\n      ui.Label({\n        value: 'Landsat 8 Explorer',\n        style: {fontWeight: 'bold', fontSize: '24px', margin: '10px 5px'}\n      }),\n      ui.Label('This app allows you to filter and export images ' +\n               'from the Landsat 8 collection.')\n    ])\n  };\n\n  /* The collection filter controls. */\n  app.filters = {\n    mapCenter: ui.Checkbox({label: 'Filter to map center', value: true}),\n    startDate: ui.Textbox('YYYY-MM-DD', '2017-05-01'),\n    endDate: ui.Textbox('YYYY-MM-DD', '2017-09-01'),\n    applyButton: ui.Button('Apply filters', app.applyFilters),\n    loadingLabel: ui.Label({\n      value: 'Loading...',\n      style: {stretch: 'vertical', color: 'gray', shown: false}\n    })\n  };\n\n  /* The panel for the filter control widgets. */\n  app.filters.panel = ui.Panel({\n    widgets: [\n      ui.Label('1) Select filters', {fontWeight: 'bold'}),\n      ui.Label('Start date', app.HELPER_TEXT_STYLE), app.filters.startDate,\n      ui.Label('End date', app.HELPER_TEXT_STYLE), app.filters.endDate,\n      app.filters.mapCenter,\n      ui.Panel([\n        app.filters.applyButton,\n        app.filters.loadingLabel\n      ], ui.Panel.Layout.flow('horizontal'))\n    ],\n    style: app.SECTION_STYLE\n  });\n\n  /* The image picker section. */\n  app.picker = {\n    // Create a select with a function that reacts to the \"change\" event.\n    select: ui.Select({\n      placeholder: 'Select an image ID',\n      onChange: app.refreshMapLayer\n    }),\n    // Create a button that centers the map on a given object.\n    centerButton: ui.Button('Center on map', function() {\n      Map.centerObject(Map.layers().get(0).get('eeObject'));\n    })\n  };\n\n  /* The panel for the picker section with corresponding widgets. */\n  app.picker.panel = ui.Panel({\n    widgets: [\n      ui.Label('2) Select an image', {fontWeight: 'bold'}),\n      ui.Panel([\n        app.picker.select,\n        app.picker.centerButton\n      ], ui.Panel.Layout.flow('horizontal'))\n    ],\n    style: app.SECTION_STYLE\n  });\n\n  /* The visualization section. */\n  app.vis = {\n    label: ui.Label(),\n    // Create a select with a function that reacts to the \"change\" event.\n    select: ui.Select({\n      items: Object.keys(app.VIS_OPTIONS),\n      onChange: function() {\n        // Update the label's value with the select's description.\n        var option = app.VIS_OPTIONS[app.vis.select.getValue()];\n        app.vis.label.setValue(option.description);\n        // Refresh the map layer.\n        app.refreshMapLayer();\n      }\n    })\n  };\n\n  /* The panel for the visualization section with corresponding widgets. */\n  app.vis.panel = ui.Panel({\n    widgets: [\n      ui.Label('3) Select a visualization', {fontWeight: 'bold'}),\n      app.vis.select,\n      app.vis.label\n    ],\n    style: app.SECTION_STYLE\n  });\n\n  // Default the select to the first value.\n  app.vis.select.setValue(app.vis.select.items().get(0));\n\n  /* The export section. */\n  app.export = {\n    button: ui.Button({\n      label: 'Export the current image to Drive',\n      // React to the button's click event.\n      onClick: function() {\n        // Select the full image id.\n        var imageIdTrailer = app.picker.select.getValue();\n        var imageId = app.COLLECTION_ID + '/' + imageIdTrailer;\n        // Get the visualization options.\n        var visOption = app.VIS_OPTIONS[app.vis.select.getValue()];\n        // Export the image to Drive.\n        Export.image.toDrive({\n          image: ee.Image(imageId).select(visOption.visParams.bands),\n          description: 'L8_Export-' + imageIdTrailer,\n        });\n      }\n    })\n  };\n\n  /* The panel for the export section with corresponding widgets. */\n  app.export.panel = ui.Panel({\n    widgets: [\n      ui.Label('4) Start an export', {fontWeight: 'bold'}),\n      app.export.button\n    ],\n    style: app.SECTION_STYLE\n  });\n};\n\n/** Creates the app helper functions. */\napp.createHelpers = function() {\n  /**\n   * Enables or disables loading mode.\n   * @param {boolean} enabled Whether loading mode is enabled.\n   */\n  app.setLoadingMode = function(enabled) {\n    // Set the loading label visibility to the enabled mode.\n    app.filters.loadingLabel.style().set('shown', enabled);\n    // Set each of the widgets to the given enabled mode.\n    var loadDependentWidgets = [\n      app.vis.select,\n      app.filters.startDate,\n      app.filters.endDate,\n      app.filters.applyButton,\n      app.filters.mapCenter,\n      app.picker.select,\n      app.picker.centerButton,\n      app.export.button\n    ];\n    loadDependentWidgets.forEach(function(widget) {\n      widget.setDisabled(enabled);\n    });\n  };\n\n  /** Applies the selection filters currently selected in the UI. */\n  app.applyFilters = function() {\n    app.setLoadingMode(true);\n    var filtered = ee.ImageCollection(app.COLLECTION_ID);\n\n    // Filter bounds to the map if the checkbox is marked.\n    if (app.filters.mapCenter.getValue()) {\n      filtered = filtered.filterBounds(Map.getCenter());\n    }\n\n    // Set filter variables.\n    var start = app.filters.startDate.getValue();\n    if (start) start = ee.Date(start);\n    var end = app.filters.endDate.getValue();\n    if (end) end = ee.Date(end);\n    if (start) filtered = filtered.filterDate(start, end);\n\n    // Get the list of computed ids.\n    var computedIds = filtered\n        .limit(app.IMAGE_COUNT_LIMIT)\n        .reduceColumns(ee.Reducer.toList(), ['system:index'])\n        .get('list');\n\n    computedIds.evaluate(function(ids) {\n      // Update the image picker with the given list of ids.\n      app.setLoadingMode(false);\n      app.picker.select.items().reset(ids);\n      // Default the image picker to the first id.\n      app.picker.select.setValue(app.picker.select.items().get(0));\n    });\n  };\n\n  /** Refreshes the current map layer based on the UI widget states. */\n  app.refreshMapLayer = function() {\n    Map.clear();\n    var imageId = app.picker.select.getValue();\n    if (imageId) {\n      // If an image id is found, create an image.\n      var image = ee.Image(app.COLLECTION_ID + '/' + imageId);\n      // Add the image to the map with the corresponding visualization options.\n      var visOption = app.VIS_OPTIONS[app.vis.select.getValue()];\n      Map.addLayer(image, visOption.visParams, imageId);\n    }\n  };\n};\n\n/** Creates the app constants. */\napp.createConstants = function() {\n  app.COLLECTION_ID = 'LANDSAT/LC08/C01/T1_RT_TOA';\n  app.SECTION_STYLE = {margin: '20px 0 0 0'};\n  app.HELPER_TEXT_STYLE = {\n      margin: '8px 0 -3px 8px',\n      fontSize: '12px',\n      color: 'gray'\n  };\n  app.IMAGE_COUNT_LIMIT = 10;\n  app.VIS_OPTIONS = {\n    'False color (B7/B6/B4)': {\n      description: 'Vegetation is shades of red, urban areas are ' +\n                   'cyan blue, and soils are browns.',\n      visParams: {gamma: 1.3, min: 0, max: 0.3, bands: ['B7', 'B6', 'B4']}\n    },\n    'Natural color (B4/B3/B2)': {\n      description: 'Ground features appear in colors similar to their ' +\n                   'appearance to the human visual system.',\n      visParams: {gamma: 1.3, min: 0, max: 0.3, bands: ['B4', 'B3', 'B2']}\n    },\n    'Atmospheric (B7/B6/B5)': {\n      description: 'Coast lines and shores are well-defined. ' +\n                   'Vegetation appears blue.',\n      visParams: {gamma: 1.3, min: 0, max: 0.3, bands: ['B7', 'B6', 'B5']}\n    }\n  };\n};\n\n/** Creates the application interface. */\napp.boot = function() {\n  app.createConstants();\n  app.createHelpers();\n  app.createPanels();\n  var main = ui.Panel({\n    widgets: [\n      app.intro.panel,\n      app.filters.panel,\n      app.picker.panel,\n      app.vis.panel,\n      app.export.panel\n    ],\n    style: {width: '320px', padding: '8px'}\n  });\n  Map.setCenter(-97, 26, 9);\n  ui.root.insert(0, main);\n  app.applyFilters();\n};\n\napp.boot();\n", "environment": "[]"}, {"name": "Layer Filters", "code": "// Interactive exploration of population and elevation.\n// Allows filtering based on constraints and a popup info window.\n\n// Set up the overall structure of the app, with a control panel to the left\n// of a full-screen map.\nui.root.clear();\nvar panel = ui.Panel({style: {width: '250px'}});\nvar map = ui.Map();\nui.root.add(panel).add(map);\nmap.setCenter(120.1685, 31.2175, 8);\nmap.style().set('cursor', 'crosshair');\n\n// Define some constants.\nvar POPULATION = 'Population';\nvar ELEVATION = 'Elevation';\nvar SLOPE = 'Slope';\nvar GREATER_THAN = 'Greater than';\nvar LESS_THAN = 'Less than';\n\n// Create an empty list of filter constraints.\nvar constraints = [];\n\n// Load the WorldPop 2015 UN-adjusted population density estimates.\n// (Note that these are only available for some countries, e.g. not the US.)\nvar pop = ee.ImageCollection('WorldPop/POP')\n  .filter(ee.Filter.equals('year', 2015))\n  .filter(ee.Filter.equals('UNadj', 'yes'))\n  .mosaic();\nvar popVis = pop.where(pop.gt(0), pop.log())\n  .visualize({min:0, max:6, palette: ['0000C0', 'FFFF80', 'C00000']});\n\n// Load SRTM 30m elevation and compute local terrain slope.\nvar elevation = ee.Image('USGS/SRTMGL1_003');\nvar elevationVis = elevation.visualize({min: 0, max: 600, gamma: 2});\nvar slope = ee.Terrain.slope(elevation);\nvar slopeVis = slope.visualize({min: 0, max: 30, gamma: 2});\n\n// Create a layer selector that dictates which layer is visible on the map.\nvar select = ui.Select({\n  items: [POPULATION, ELEVATION, SLOPE],\n  value: POPULATION,\n  onChange: redraw,\n});\npanel.add(ui.Label('Display Value:')).add(select);\n\n// Check-boxes to control which layers are shown in the inspector.\npanel.add(ui.Label('Info box fields:'));\nvar popCheck = ui.Checkbox(POPULATION).setValue(true);\npanel.add(popCheck);\nvar elevationCheck = ui.Checkbox(ELEVATION).setValue(true);\npanel.add(elevationCheck);\nvar slopeCheck = ui.Checkbox(SLOPE).setValue(false);\npanel.add(slopeCheck);\n\n// Create the inspector panel, initially hiding it.\nvar inspector = ui.Panel({style: {shown: false}});\nmap.add(inspector);\n\n// Register an onClick handler that populates and shows the inspector panel.\nmap.onClick(function(coords) {\n  // Gather the image bands into a single Image that we can asynchronously sample.\n  var point = ee.Geometry.Point(coords.lon, coords.lat);\n  var sample = ee.Image.cat(pop, elevation, slope)\n      .unmask(0).sample(point, 30).first().toDictionary();\n  sample.evaluate(function(values) {\n    inspector.clear();\n\n    // Display a label that corresponds to a checked checkbox.\n    if (popCheck.getValue()) {\n      inspector.add(ui.Label('Population: ' + values.population + ' people/cell'));\n    }\n    if (elevationCheck.getValue()) {\n      inspector.add(ui.Label('Elevation: ' + values.elevation + ' meters'));\n    }\n    if (slopeCheck.getValue()) {\n      inspector.add(ui.Label('Slope: ' + values.slope + ' degrees'));\n    }\n    inspector.add(ui.Button('Close', function() {\n      inspector.style().set({shown: false});\n    }));\n    inspector.style().set({shown: true});\n  });\n});\n\n// Add a label and select to enable adding a new filter.\npanel.add(ui.Label('Filter by Value:'));\nvar constraint = ui.Select({\n  items: [POPULATION, ELEVATION, SLOPE],\n  placeholder: '[Choose a Variable...]',\n  onChange: selectConstraint,\n});\npanel.add(constraint);\n\n// Create a function that configures a new constraint.\nfunction addConstraint(name, image, defaultValue) {\n  panel.add(ui.Label('Filter by ' + name + ':'));\n  var subpanel = ui.Panel({layout: ui.Panel.Layout.flow('horizontal')});\n  // Create a greater-than / less-than selector.\n  var mode = ui.Select({\n    items: [GREATER_THAN, LESS_THAN],\n    value: GREATER_THAN,\n    onChange: redraw,\n  });\n  subpanel.add(mode);\n\n  // Create a textbox for the filter threshold.\n  var input = ui.Textbox({\n    value: defaultValue,\n    style: {width: '100px'},\n    onChange: redraw,\n  });\n  subpanel.add(input);\n  panel.add(subpanel);\n\n  // Add this constraint to the global list so we can access the\n  // constraints from the redraw() function in the future.\n  constraints.push({\n    image: image,\n    mode: mode,\n    value: input,\n  });\n  redraw();\n}\n\n// Create a function that adds a constraint of the requested type.\nfunction selectConstraint(name) {\n  if (name == POPULATION) {\n    addConstraint(name, pop, 50);\n  } else if (name == ELEVATION) {\n    addConstraint(name, elevation, 100);\n  } else if (name == SLOPE) {\n    addConstraint(name, slope, 3);\n  }\n  constraint.setValue(null);\n}\n\n// Create a function to render a map layer configured by the user inputs.\nfunction redraw() {\n  map.layers().reset();\n  var layer = select.getValue();\n  var image;\n  if (layer == ELEVATION) {\n    image = elevationVis;\n  } else if (layer == SLOPE) {\n    image = slopeVis;\n  } else if (layer == POPULATION) {\n    image = popVis;\n  }\n  for (var i = 0; i \u003c constraints.length; ++i) {\n    var constraint = constraints[i];\n    var mode = constraint.mode.getValue();\n    var value = parseFloat(constraint.value.getValue());\n    if (mode == GREATER_THAN) {\n      image = image.updateMask(constraint.image.gt(value));\n    } else {\n      image = image.updateMask(constraint.image.lt(value));\n    }\n  }\n  map.addLayer(image, {}, layer);\n}\n\n// Invoke the redraw function once at start up to initialize the map.\nredraw();\n", "environment": "[]"}, {"name": "Linked Maps", "code": "// Display a grid of linked maps, each with a different visualization.\n\n\n/*\n * Image setup\n */\n\n// Create an initial mosiac, which we'll visualize in a few different ways.\nvar image = ee.ImageCollection('COPERNICUS/S2')\n    .filterDate('2018-09-01', '2018-09-30')\n    // Scale the images to a smaller range, just for simpler visualization.\n    .map(function f(e) { return e.divide(10000); })\n    .median();\n\n// Each map has a name and some visualization parameters.\nvar MAP_PARAMS = {\n  'Natural Color (B4/B3/B2)': ['B4', 'B3', 'B2'],\n  'Land/Water (B8/B11/B4)': ['B8', 'B11', 'B4'],\n  'Color Infrared (B8/B4/B3)': ['B8', 'B4', 'B3'],\n  'Vegetation (B12/B11/B4)': ['B12', 'B12', 'B4']\n};\n\n// Shared visualization parameters for the images.\nfunction getVisualization(bands) {\n  return {gamma: 1.3, min: 0, max: 0.3, bands: bands};\n}\n\n\n/*\n * Configure maps, link them in a grid\n */\n\n// Create a map for each visualization option.\nvar maps = [];\nObject.keys(MAP_PARAMS).forEach(function(name) {\n  var map = ui.Map();\n  map.add(ui.Label(name));\n  map.addLayer(image, getVisualization(MAP_PARAMS[name]), name);\n  map.setControlVisibility(false);\n  maps.push(map);\n});\n\nvar linker = ui.Map.Linker(maps);\n\n// Enable zooming on the top-left map.\nmaps[0].setControlVisibility({zoomControl: true});\n\n// Show the scale (e.g. '500m') on the bottom-right map.\nmaps[3].setControlVisibility({scaleControl: true});\n\n// Create a grid of maps.\nvar mapGrid = ui.Panel(\n    [\n      ui.Panel([maps[0], maps[1]], null, {stretch: 'both'}),\n      ui.Panel([maps[2], maps[3]], null, {stretch: 'both'})\n    ],\n    ui.Panel.Layout.Flow('horizontal'), {stretch: 'both'});\n\n// Center the map at an interesting spot in Greece. All\n// other maps will align themselves to this parent map.\nmaps[0].setCenter(21.2712, 38.4151, 12);\n\n\n/*\n * Add a title and initialize\n */\n\n// Create a title.\nvar title = ui.Label('September 2018 Sentinel-2 Visualizations', {\n  stretch: 'horizontal',\n  textAlign: 'center',\n  fontWeight: 'bold',\n  fontSize: '24px'\n});\n\n// Add the maps and title to the ui.root.\nui.root.widgets().reset([title, mapGrid]);\nui.root.setLayout(ui.Panel.Layout.Flow('vertical'));\n", "environment": "[]"}, {"name": "Manual Legend", "code": "// Display a legend explaining the colors assigned to a MODIS land cover\n// classification image.\nvar BAND_NAME = 'Land_Cover_Type_1';\n\nvar image = ee.Image('MODIS/051/MCD12Q1/2001_01_01')\n            .select(BAND_NAME);\n\n// Create the panel for the legend items.\nvar legend = ui.Panel({\n  style: {\n    position: 'bottom-left',\n    padding: '8px 15px'\n  }\n});\n\n// Create and add the legend title.\nvar legendTitle = ui.Label({\n  value: 'MODIS Land Cover',\n  style: {\n    fontWeight: 'bold',\n    fontSize: '18px',\n    margin: '0 0 4px 0',\n    padding: '0'\n  }\n});\nlegend.add(legendTitle);\n\nvar loading = ui.Label('Loading legend...', {margin: '2px 0 4px 0'});\nlegend.add(loading);\n\n// Creates and styles 1 row of the legend.\nvar makeRow = function(color, name) {\n  // Create the label that is actually the colored box.\n  var colorBox = ui.Label({\n    style: {\n      backgroundColor: '#' + color,\n      // Use padding to give the box height and width.\n      padding: '8px',\n      margin: '0 0 4px 0'\n    }\n  });\n\n  // Create the label filled with the description text.\n  var description = ui.Label({\n    value: name,\n    style: {margin: '0 0 4px 6px'}\n  });\n\n  return ui.Panel({\n    widgets: [colorBox, description],\n    layout: ui.Panel.Layout.Flow('horizontal')\n  });\n};\n\n// Get the list of palette colors and class names from the image.\nimage.toDictionary().select([BAND_NAME + \".*\"]).evaluate(function(result) {\n  var palette = result[BAND_NAME + \"_class_palette\"];\n  var names = result[BAND_NAME + \"_class_names\"];\n  loading.style().set('shown', false);\n\n  for (var i = 0; i \u003c names.length; i++) {\n    legend.add(makeRow(palette[i], names[i]));\n  }\n  Map.addLayer(image, {min: 0, max: 17, palette: palette}, 'IGBP classification');\n});\n\n// Add the legend to the map.\nMap.setCenter(-113.41842, 40.055489, 6);\nMap.add(legend);\n", "environment": "[]"}, {"name": "Mobile Friendly UI", "code": "/**\n * Demonstrates a mobile friendly user interface with ui.root.onResize().\n */\n\n// Create the map to be reused.\nvar waterMap = ui.Map();\n\n// Add the water layer to the map.\nvar water = ee.ImageCollection('GLCF/GLS_WATER').select('water');\n\n// Water class names.\nvar classNames = ['Land', 'Water', 'Snow/ice', 'Cloud shadow', 'Cloud'];\nvar palette = ['F0E68C', '00C5FF', 'FAFAFA', '828282', 'CCCCCC'];\n\n// Fill the palette with white for the values between\n// 4 (snow) and 200 (cloud shadow).\nfunction fillPalette(times) {\n  var resultPalette = palette.slice(0, 3);\n  for (var i = 0; i \u003c times; i++) {\n    resultPalette.push('FAFAFA');\n  }\n  resultPalette.push('828282', 'CCCCCC');\n  return resultPalette;\n}\n\nvar waterVis = {\n  min: 1.0,\n  max: 201.0,\n  palette: fillPalette(200 - 4 - 1),\n};\n\nwaterMap.addLayer(water, waterVis, 'Water');\n\n// Create the main panel with different sections.\nvar uiComponents = {};\nuiComponents.initialize = function(mobileStyle) {\n  // The introduction section.\n  uiComponents.intro = {\n    panel: ui.Panel({\n      widgets: [\n        ui.Label({\n          value: 'Landsat Global Inland Water',\n          style: {\n            fontWeight: 'bold',\n            fontSize: mobileStyle ? '22px' : '20px',\n            margin: '10px 5px',\n            textAlign: 'center',\n          }\n        }),\n        ui.Label({\n          value: 'The Global Inland Water dataset shows inland surface ' +\n              'water bodies, including fresh and saline lakes, ' +\n              'rivers, and reservoirs.',\n          style: {\n            fontSize: mobileStyle ? '18px' : '14px',\n          }\n        }),\n        ui.Label({\n          value: 'From the GLS 2000 epoch, 3,650,723 km2 of inland water ' +\n              'were identified, around three quarters of which were ' +\n              'in North America and Asia. Boreal forests and tundra ' +\n              'hold the largest portion of inland water, about 40% of ' +\n              'the global total. The data exhibits strong linear ' +\n              'correlation with both the MODIS dataset as well as 30-m ' +\n              'resolution datasets over the United States and Canada. ' +\n              'Residual errors were due primarily to the seasonality ' +\n              'of water cover, snow and ice, and residual clouds.',\n          style: {\n            fontSize: mobileStyle ? '18px' : '14px',\n          }\n        }),\n        ui.Button({\n          label: 'Close',\n          style: {position: 'bottom-right', shown: mobileStyle ? true : false},\n          // React to the button's click event.\n          onClick: function() {\n            ui.root.widgets().add(uiComponents.legend);\n            waterMap.remove(uiComponents.intro.panel);\n          }\n        })\n      ]\n    }),\n\n    // A Learn More button for mobile screens.\n    learnMoreButton: ui.Button({\n      label: 'Learn More',\n      style: {\n        position: 'top-left',\n        padding: '0',\n      },\n      // React to the button's click event.\n      onClick: function() {\n        ui.root.widgets().remove(uiComponents.legend);\n        waterMap.add(uiComponents.intro.panel);\n      }\n    }),\n  };\n\n  // Legend title.\n  uiComponents.legendTitle = ui.Label({\n    value: 'Water Class',\n    style: {\n      fontWeight: 'bold',\n      fontSize: mobileStyle ? '18px' : '16px',\n      margin: '50px 0 6px 0',\n      padding: '0'\n    }\n  });\n\n  // Legend panel\n  uiComponents.legend = ui.Panel({\n    style: mobileStyle ? {position: 'bottom-left', padding: '10px'} : {\n      fontWeight: 'bold',\n      fontSize: '10px',\n      margin: '0 0 10px 12px',\n      padding: '0'\n    }\n  });\n\n  if (!mobileStyle) {\n    uiComponents.legend.add(uiComponents.legendTitle);\n  }\n\n  // Creates and styles 1 row of the legend.\n  var makeLegendRow = function(name, color, mobileStyle) {\n    // Create the label that is actually the colored box.\n    var colorBox = ui.Label({\n      style: {\n        backgroundColor: '#' + color,\n        // Use padding to give the box height and width.\n        padding: mobileStyle ? '10px' : '8px',\n        margin: '0 0 4px 0',\n        border: 'solid 0.5px',\n      }\n    });\n\n    // Create the label filled with the description text.\n    var description = ui.Label({\n      value: name,\n      style: {margin: '0 0 4px 6px', fontSize: mobileStyle ? '16px' : '12px'},\n    });\n\n    return ui.Panel({\n      widgets: [colorBox, description],\n      layout: ui.Panel.Layout.Flow('horizontal')\n    });\n  };\n\n  for (var i = 0; i \u003c classNames.length; i++) {\n    uiComponents.legend.add(makeLegendRow(classNames[i], palette[i], mobileStyle));\n  }\n};\n\n// The function that configures different devices according to screen sizes.\nfunction configLayout(deviceInfo) {\n  ui.root.clear();\n  if (!deviceInfo.is_desktop || deviceInfo.width \u003c 900) {\n    // Configuration for mobile screen.\n    uiComponents.initialize(true);\n    waterMap.setControlVisibility(false);\n    waterMap.setCenter(20, 30, 3);\n\n    // Add \"learn more\" button if it hasn't been added to the map.\n    if (waterMap.widgets().length() \u003c 1) {\n      waterMap.add(uiComponents.intro.learnMoreButton);\n    }\n    ui.root.widgets().reset([waterMap, uiComponents.legend]);\n    ui.root.setLayout(ui.Panel.Layout.absolute());\n  } else {\n    // Web page configuration.\n    uiComponents.initialize(false);\n    waterMap.setControlVisibility(true);\n    waterMap.setCenter(20, 30, 2);\n\n    // Remove button if it has been added to the map.\n    if (waterMap.widgets().length() \u003e 0) {\n      waterMap.widgets().reset();\n    }\n\n    var mainPanel = ui.Panel({\n      widgets: [\n        uiComponents.intro.panel,\n        uiComponents.legend,\n      ],\n      style: {width: '320px', padding: '8px'}\n    });\n    ui.root.widgets().reset([mainPanel, waterMap]);\n    ui.root.setLayout(ui.Panel.Layout.flow('horizontal'));\n  }\n}\n\nui.root.onResize(configLayout);\n", "environment": "[]"}, {"name": "Mosaic Editor", "code": "// This script allows you to interactively explore the effects\n// of mosaicking different Landsat 8 TOA images using ee.Reducer.median().\n\n\n/*\n * Style defaults\n */\n\nvar colors = {'cyan': '#24C1E0', 'transparent': '#11ffee00', 'gray': '#F8F9FA'};\n\nvar TITLE_STYLE = {\n  fontWeight: '100',\n  fontSize: '32px',\n  padding: '10px',\n  color: '#616161',\n  backgroundColor: colors.transparent,\n};\n\nvar PARAGRAPH_STYLE = {\n  fontSize: '14px',\n  fontWeight: '50',\n  color: '#9E9E9E',\n  padding: '8px',\n  backgroundColor: colors.transparent,\n};\n\nvar LABEL_STYLE = {\n  fontWeight: '50',\n  textAlign: 'center',\n  fontSize: '11px',\n  backgroundColor: colors.transparent,\n};\n\nvar THUMBNAIL_WIDTH = 128;\n\nvar BORDER_STYLE = '4px solid rgba(97, 97, 97, 0.05)';\n\n\n/*\n * Collection display defaults\n */\n\n// Landsat 8 TOA\nvar COLLECTION_ID = 'LANDSAT/LC08/C01/T1_TOA';\nvar START_DATE = '2017-01-01';\nvar END_DATE = '2018-01-01';\nvar VIZ_PARAMS = {bands: ['B4', 'B3', 'B2'], min: 0, max: 0.4, gamma: 1.5};\n\nvar BASE_COLLECTION = ee.ImageCollection(COLLECTION_ID)\n                          .filter(ee.Filter.lte('CLOUD_COVER', 50))\n                          .filterDate(START_DATE, END_DATE);\n\n// Max number of images to use when generating a mosaic.\nvar MAX_MOSAIC_SIZE = 20;\n\n\n/*\n * Side panel setup\n */\n\n/**\n * Return the main side panel, populated with title and app description.\n */\nfunction makeSidePanel() {\n  // Create the base side panel, into which other widgets will be added\n  var mainPanel = ui.Panel({\n    layout: ui.Panel.Layout.flow('vertical', true),\n    style: {\n      stretch: 'horizontal',\n      height: '100%',\n      width: '550px',\n      backgroundColor: colors.gray,\n      border: BORDER_STYLE,\n    }\n  });\n\n  // Add the app title to the side panel\n  var titleLabel = ui.Label('Collection Mosaic Editor', TITLE_STYLE);\n  mainPanel.add(titleLabel);\n\n  // Add the app description to the main panel\n  var descriptionText =\n      'This app allows you to interactively explore the effects of ' +\n      'mosaicking different Landsat 8 TOA images using ee.Reducer.median(). ' +\n      'To change which tiles are included in the mosaick, check or uncheck ' +\n      'the thumbnails. To mosaic another area, pan/zoom and click on the map.';\n  var descriptionLabel = ui.Label(descriptionText, PARAGRAPH_STYLE);\n  mainPanel.add(descriptionLabel);\n\n  return mainPanel;\n}\n\n\n/*\n * Thumbnail setup\n */\n\n/**\n * Return the grid panel where thumbnails will be added.\n */\nfunction makeThumbnailGrid() {\n  return ui.Panel({\n    layout: ui.Panel.Layout.flow('horizontal', true),\n    style: {\n      stretch: 'vertical',\n      backgroundColor: colors.transparent,\n    }\n  });\n}\n\n/**\n * Return a panel containing the thumbnail and label for an image with\n * the given ID and geometry.\n * @param {string} id The id of the image from which to make the thumbnail.\n * @param {Function} onChangeFunc The function to call when thumbnail is checked/unchecked.\n */\nfunction makeThumbnail(id, onChangeFunc) {\n  var thumbnailContainer = ui.Panel({\n    layout: ui.Panel.Layout.flow('vertical'),\n    style: {\n      backgroundColor: colors.transparent,\n      border: BORDER_STYLE,\n      padding: '4px',\n      margin: '5px',\n    },\n  });\n\n  // Add an image label to the thumbnail container.\n  var idPieces = id.split('/');\n  var shortImageId = idPieces[idPieces.length - 1];\n  var imageLabel = ui.Label(shortImageId, LABEL_STYLE);\n  thumbnailContainer.add(imageLabel);\n\n  // Add the thumbnail itself to the container\n  var thumbnail = ui.Thumbnail({\n    image: ee.Image(id).visualize(VIZ_PARAMS),\n    params: {dimensions: THUMBNAIL_WIDTH, crs: 'EPSG:3857', format: 'jpg'},\n    style: {\n      width: THUMBNAIL_WIDTH + 'px',\n      maxHeight: THUMBNAIL_WIDTH + 25 + 'px',\n      backgroundColor: colors.transparent,\n    }\n  });\n  thumbnailContainer.add(thumbnail);\n\n  // Add the checkbox to specify which thumbnails to include in the mosaic.\n  var checkbox = ui.Checkbox('Include', true, onChangeFunc, false, LABEL_STYLE);\n  thumbnailContainer.add(checkbox);\n\n  return thumbnailContainer;\n}\n\n\n/*\n * Map panel setup\n */\n\n/** Returns a ui.Map with some UI configuration in place */\nfunction makeMapPanel() {\n  var map = ui.Map();\n  // Add an informational label\n  map.add(ui.Label('Click the map to compute a mosaic at that location'));\n  map.style().set('cursor', 'crosshair');\n  // Don't show the layer list for this app.\n  map.setControlVisibility({layerList: false});\n  return map;\n}\n\n\n/*\n * Helper methods\n */\n\n/**\n * Recomputes a mosaic with the supplied IDs and adds it to the mapPanel.\n */\nfunction updateMosaic(ids, mapPanel) {\n  if (ids.length === 0) {\n    mapPanel.layers().set(0, ee.Image());\n    return;\n  }\n  var mosaickedImage = ee.ImageCollection(ids).median();\n  mapPanel.layers().set(0, mosaickedImage.visualize(VIZ_PARAMS));\n}\n\n\n/**\n * Given a thumbnailGrid widget, determines which thumbnails have been selected\n * by the user to include in a new mosaic.\n */\nfunction findSelectedThumbnails(thumbnailGrid) {\n  var thumbs = thumbnailGrid.widgets();\n  var ids = [];\n  thumbs.forEach(function f(e) {\n    var id = e.widgets().get(0).getValue();\n    var checked = e.widgets().get(2).getValue();\n    if (checked) {\n      ids.push(COLLECTION_ID + '/' + id);\n    }\n  });\n  return ids;\n}\n\n/**\n * Updates the mapPanel and thumbnailGrid widgets when a new bounding box has\n * been chosen on the map.\n */\nfunction updateUI(geometry, mapPanel, thumbnailGrid) {\n  var images = BASE_COLLECTION.filterBounds(geometry);\n  var first = ee.Image(images.first());\n  images = images.filterBounds(first.geometry().centroid());\n\n  // Repopulate the thumbnail grid with new thumbnails\n  thumbnailGrid.clear();\n  images.limit(MAX_MOSAIC_SIZE)\n      .aggregate_array('system:id')\n      .evaluate(function(ids) {\n        // Sometimes there are no images where the user has clicked.\n        if (ids === undefined) {\n          return;\n        }\n\n        // Define the function to be called when thumbnails are clicked or\n        // unclicked.\n        var remosaicFunc = function() {\n          var ids = findSelectedThumbnails(thumbnailGrid);\n          updateMosaic(ids, mapPanel);\n        };\n\n        ids.forEach(function(id) {\n          var thumb = makeThumbnail(id, remosaicFunc);\n          thumbnailGrid.add(thumb);\n        });\n\n        // Recompute the mosaic from the new image IDs and add to the mapPanel.\n        updateMosaic(ids, mapPanel);\n\n        // Center the map to the new mosaic\n        mapPanel.centerObject(first);\n      });\n}\n\n\n/*\n * Main app initialization\n */\n\n// Clear the default UI since we're adding our own side and map panels.\nui.root.clear();\n\n// Create the app's two panels and add them to the ui.root\nvar sidePanel = makeSidePanel();\nvar mapPanel = makeMapPanel();\n\n// Use a SplitPanel so it's possible to resize the two panels.\nui.root.add(ui.SplitPanel(sidePanel, mapPanel));\n\n// Add the thumbnail grid to the side panel\nvar thumbnailGrid = makeThumbnailGrid();\nsidePanel.add(thumbnailGrid);\n\n// Add a click event to the map panel.\nmapPanel.onClick(function(coords) {\n  var point = ee.Geometry.Point(coords.lon, coords.lat);\n  var dot = ui.Map.Layer(point, {color: colors.cyan});\n  point.evaluate(function(geometryBbox) {\n    updateUI(geometryBbox, mapPanel, thumbnailGrid);\n  });\n  // Set the dot to 1 so it's visible on top of the mosaic.\n  mapPanel.layers().set(1, dot);\n});\n\n// Launch the app with an initial point pre-selected\nvar initGeometry = ee.Geometry.Point([-79.91, 43.62]);\nmapPanel.centerObject(initGeometry);\nupdateUI(initGeometry, mapPanel, thumbnailGrid);\n", "environment": "[]"}, {"name": "Ocean Timeseries Investigator", "code": "// A simple tool for charting MODIS ocean surface temperature.\n\n\n/*\n * Map layer configuration\n */\n\n// Compute the mean sea surface temperature (SST) value for each pixel by\n// averaging MODIS Aqua data for one year.\nvar modisOceanColor = ee.ImageCollection('NASA/OCEANDATA/MODIS-Aqua/L3SMI');\nvar sst =\n    modisOceanColor.select(['sst']).filterDate('2017-01-01', '2018-01-01');\n\nvar vis = {min: 0, max: 30, palette: 'navy,blue,aqua'};\nvar composite = sst.mean().visualize(vis);\nvar compositeLayer = ui.Map.Layer(composite).setName('SST Composite');\n\n// Create the main map and set the SST layer.\nvar mapPanel = ui.Map();\nvar layers = mapPanel.layers();\nlayers.add(compositeLayer, '2017 Composite');\n\n\n/*\n * Panel setup\n */\n\n// Create a panel to hold title, intro text, chart and legend components.\nvar inspectorPanel = ui.Panel({style: {width: '30%'}});\n\n// Create an intro panel with labels.\nvar intro = ui.Panel([\n  ui.Label({\n    value: 'MODIS Ocean Temperature - Time Series Inspector',\n    style: {fontSize: '20px', fontWeight: 'bold'}\n  }),\n  ui.Label('Click a location to see its time series of ocean temperatures.')\n]);\ninspectorPanel.add(intro);\n\n// Create panels to hold lon/lat values.\nvar lon = ui.Label();\nvar lat = ui.Label();\ninspectorPanel.add(ui.Panel([lon, lat], ui.Panel.Layout.flow('horizontal')));\n\n// Add placeholders for the chart and legend.\ninspectorPanel.add(ui.Label('[Chart]'));\ninspectorPanel.add(ui.Label('[Legend]'));\n\n\n/*\n * Chart setup\n */\n\n// Generates a new time series chart of SST for the given coordinates.\nvar generateChart = function (coords) {\n  // Update the lon/lat panel with values from the click event.\n  lon.setValue('lon: ' + coords.lon.toFixed(2));\n  lat.setValue('lat: ' + coords.lat.toFixed(2));\n\n  // Add a dot for the point clicked on.\n  var point = ee.Geometry.Point(coords.lon, coords.lat);\n  var dot = ui.Map.Layer(point, {color: '000000'}, 'clicked location');\n  // Add the dot as the second layer, so it shows up on top of the composite.\n  mapPanel.layers().set(1, dot);\n\n  // Make a chart from the time series.\n  var sstChart = ui.Chart.image.series(sst, point, ee.Reducer.mean(), 500);\n\n  // Customize the chart.\n  sstChart.setOptions({\n    title: 'Sea surface temp: time series',\n    vAxis: {title: 'Temp (C)'},\n    hAxis: {title: 'Date', format: 'MM-yy', gridlines: {count: 7}},\n    series: {\n      0: {\n        color: 'blue',\n        lineWidth: 0,\n        pointsVisible: true,\n        pointSize: 2,\n      },\n    },\n    legend: {position: 'right'},\n  });\n  // Add the chart at a fixed position, so that new charts overwrite older ones.\n  inspectorPanel.widgets().set(2, sstChart);\n};\n\n\n/*\n * Legend setup\n */\n\n// Creates a color bar thumbnail image for use in legend from the given color\n// palette.\nfunction makeColorBarParams(palette) {\n  return {\n    bbox: [0, 0, 1, 0.1],\n    dimensions: '100x10',\n    format: 'png',\n    min: 0,\n    max: 1,\n    palette: palette,\n  };\n}\n\n// Create the color bar for the legend.\nvar colorBar = ui.Thumbnail({\n  image: ee.Image.pixelLonLat().select(0),\n  params: makeColorBarParams(vis.palette),\n  style: {stretch: 'horizontal', margin: '0px 8px', maxHeight: '24px'},\n});\n\n// Create a panel with three numbers for the legend.\nvar legendLabels = ui.Panel({\n  widgets: [\n    ui.Label(vis.min, {margin: '4px 8px'}),\n    ui.Label(\n        (vis.max / 2),\n        {margin: '4px 8px', textAlign: 'center', stretch: 'horizontal'}),\n    ui.Label(vis.max, {margin: '4px 8px'})\n  ],\n  layout: ui.Panel.Layout.flow('horizontal')\n});\n\nvar legendTitle = ui.Label({\n  value: 'Map Legend: median 2017 ocean temp (C)',\n  style: {fontWeight: 'bold'}\n});\n\nvar legendPanel = ui.Panel([legendTitle, colorBar, legendLabels]);\ninspectorPanel.widgets().set(3, legendPanel);\n\n/*\n * Map setup\n */\n\n// Register a callback on the default map to be invoked when the map is clicked.\nmapPanel.onClick(generateChart);\n\n// Configure the map.\nmapPanel.style().set('cursor', 'crosshair');\n\n\n// Initialize with a test point.\nvar initialPoint = ee.Geometry.Point(-19.155, 22.313);\nmapPanel.centerObject(initialPoint, 4);\n\n\n/*\n * Initialize the app\n */\n\n// Replace the root with a SplitPanel that contains the inspector and map.\nui.root.clear();\nui.root.add(ui.SplitPanel(inspectorPanel, mapPanel));\n\ngenerateChart({\n  lon: initialPoint.coordinates().get(0).getInfo(),\n  lat: initialPoint.coordinates().get(1).getInfo()\n});\n", "environment": "[]"}, {"name": "Population Explorer", "code": "// Displays global population density and population totals by country in\n// chart or table form.\n\n\n/*\n * Data sources\n */\n\n// The GHSL global population density dataset for 2015.\nvar ghslPop = ee.Image('JRC/GHSL/P2016/POP_GPW_GLOBE_V1/2015');\n\n// Country boundary data with associated precomputed population totals.\n// These are USDOS LSIB boundaries simplified somewhat for visualization.\nvar countries = ee.FeatureCollection(\n    'projects/google/examples/population-explorer/LSIB_SIMPLE-with-GHSL_POP');\n\n\n/*\n * Visualization and styling\n */\n\n// Constants used to visualize the data on the map.\nvar POPULATION_STYLE = {\n  min: 0,\n  max: 1,\n  palette: ['lightyellow', 'steelblue', 'darkblue']\n};\nvar POPULATION_VIS_MAX_VALUE = 1200;\nvar POPULATION_VIS_NONLINEARITY = 4;\nvar COUNTRIES_STYLE = {color: '26458d', fillColor: '00000000'};\nvar HIGHLIGHT_STYLE = {color: '8856a7', fillColor: '8856a7C0'};\n\n// Apply a non-linear stretch to the population data for visualization.\nfunction colorStretch(image) {\n  return image.divide(POPULATION_VIS_MAX_VALUE)\n      .pow(1 / POPULATION_VIS_NONLINEARITY);\n}\n\n// Inverts the nonlinear stretch we apply to the population data for\n// visualization, so that we can back out values to display in the legend.\n// This uses ordinary JavaScript math functions, rather than Earth Engine\n// functions, since we're going to call it from JS to compute label values.\nfunction undoColorStretch(val) {\n  return Math.pow(val, POPULATION_VIS_NONLINEARITY) * POPULATION_VIS_MAX_VALUE;\n}\n\n// Configure our map with a minimal set of controls.\nMap.setControlVisibility(false);\nMap.setControlVisibility({scaleControl: true, zoomControl: true});\nMap.style().set({cursor: 'crosshair'});\nMap.setCenter(0, 20, 3);\n\n// Add our two base layers to the map: global population density and countries.\nMap.addLayer(colorStretch(ghslPop.unmask(0).updateMask(1)), POPULATION_STYLE);\nMap.addLayer(countries.style(COUNTRIES_STYLE));\n\n// Create the application title bar.\nMap.add(ui.Label(\n    'Global Population Explorer', {fontWeight: 'bold', fontSize: '24px'}));\n\n\n/*\n * The chart panel in the bottom-right\n */\n\n// A list of points the user has clicked on, as [lon,lat] tuples.\nvar selectedPoints = [];\n\n// Returns the list of countries the user has selected.\nfunction getSelectedCountries() {\n  return countries.filterBounds(ee.Geometry.MultiPoint(selectedPoints));\n}\n\n// Makes a bar chart of the given FeatureCollection of countries by name.\nfunction makeResultsBarChart(countries) {\n  var chart = ui.Chart.feature.byFeature(countries, 'Name');\n  chart.setChartType('BarChart');\n  chart.setOptions({\n    title: 'Population Comparison',\n    vAxis: {title: null},\n    hAxis: {title: 'Approximate 2015 Population', minValue: 0}\n  });\n  chart.style().set({stretch: 'both'});\n  return chart;\n}\n\n// Makes a table of the given FeatureCollection of countries by name.\nfunction makeResultsTable(countries) {\n  var table = ui.Chart.feature.byFeature(countries, 'Name');\n  table.setChartType('Table');\n  table.setOptions({allowHtml: true, pageSize: 5});\n  table.style().set({stretch: 'both'});\n  return table;\n}\n\n// Updates the map overlay using the currently-selected countries.\nfunction updateOverlay() {\n  var overlay = getSelectedCountries().style(HIGHLIGHT_STYLE);\n  Map.layers().set(2, ui.Map.Layer(overlay));\n}\n\n// Updates the chart using the currently-selected charting function,\nfunction updateChart() {\n  var chartBuilder = chartTypeToggleButton.value;\n  var chart = chartBuilder(getSelectedCountries());\n  resultsPanel.clear().add(chart).add(buttonPanel);\n}\n\n// Clears the set of selected points and resets the overlay and results\n// panel to their default state.\nfunction clearResults() {\n  selectedPoints = [];\n  Map.layers().remove(Map.layers().get(2));\n  var instructionsLabel = ui.Label('Select regions to compare population.');\n  resultsPanel.widgets().reset([instructionsLabel]);\n}\n\n// Register a click handler for the map that adds the clicked point to the\n// list and updates the map overlay and chart accordingly.\nfunction handleMapClick(location) {\n  selectedPoints.push([location.lon, location.lat]);\n  updateOverlay();\n  updateChart();\n}\nMap.onClick(handleMapClick);\n\n// A button widget that toggles (or cycles) between states.\n// To construct a ToggleButton, supply an array of objects describing\n// the desired states, each with 'label' and 'value' properties.\nfunction ToggleButton(states, onClick) {\n  var index = 0;\n  var button = ui.Button(states[index].label);\n  button.value = states[index].value;\n  button.onClick(function() {\n    index = ++index % states.length;\n    button.setLabel(states[index].label);\n    button.value = states[index].value;\n    onClick();\n  });\n  return button;\n}\n\n// Our chart type toggle button: the button text is the opposite of the\n// current state, since you click the button to switch states.\nvar chartTypeToggleButton = ToggleButton(\n    [\n      {\n        label: 'Display results as table',\n        value: makeResultsBarChart,\n      },\n      {\n        label: 'Display results as chart',\n        value: makeResultsTable,\n      }\n    ],\n    updateChart);\n\n// A panel containing the two buttons .\nvar buttonPanel = ui.Panel(\n    [ui.Button('Clear results', clearResults), chartTypeToggleButton],\n    ui.Panel.Layout.Flow('horizontal'), {margin: '0 0 0 auto', width: '500px'});\n\nvar resultsPanel = ui.Panel({style: {position: 'bottom-right'}});\nMap.add(resultsPanel);\nclearResults();\n\n\n/*\n * The legend panel in the bottom-left\n */\n\n// A color bar widget. Makes a horizontal color bar to display the given\n// color palette.\nfunction ColorBar(palette) {\n  return ui.Thumbnail({\n    image: ee.Image.pixelLonLat().select(0),\n    params: {\n      bbox: [0, 0, 1, 0.1],\n      dimensions: '100x10',\n      format: 'png',\n      min: 0,\n      max: 1,\n      palette: palette,\n    },\n    style: {stretch: 'horizontal', margin: '0px 8px'},\n  });\n}\n\n// Returns our labeled legend, with a color bar and three labels representing\n// the minimum, middle, and maximum values.\nfunction makeLegend() {\n  var labelPanel = ui.Panel(\n      [\n        ui.Label(Math.round(undoColorStretch(0)), {margin: '4px 8px'}),\n        ui.Label(\n            Math.round(undoColorStretch(0.5)),\n            {margin: '4px 8px', textAlign: 'center', stretch: 'horizontal'}),\n        ui.Label(Math.round(undoColorStretch(1)), {margin: '4px 8px'})\n      ],\n      ui.Panel.Layout.flow('horizontal'));\n  return ui.Panel([ColorBar(POPULATION_STYLE.palette), labelPanel]);\n}\n\n// Styling for the legend title.\nvar LEGEND_TITLE_STYLE = {\n  fontSize: '20px',\n  fontWeight: 'bold',\n  stretch: 'horizontal',\n  textAlign: 'center',\n  margin: '4px',\n};\n\n// Styling for the legend footnotes.\nvar LEGEND_FOOTNOTE_STYLE = {\n  fontSize: '10px',\n  stretch: 'horizontal',\n  textAlign: 'center',\n  margin: '4px',\n};\n\n// Assemble the legend panel.\nMap.add(ui.Panel(\n    [\n      ui.Label('Population Density', LEGEND_TITLE_STYLE), makeLegend(),\n      ui.Label(\n          '(thousands of people per square kilometer)', LEGEND_FOOTNOTE_STYLE),\n      ui.Label(\n          'Source: Global Human Settlement Layer (JRC)', LEGEND_FOOTNOTE_STYLE),\n      ui.Label('Country boundaries source: USDOS LSIB', LEGEND_FOOTNOTE_STYLE)\n    ],\n    ui.Panel.Layout.flow('vertical'),\n    {width: '230px', position: 'bottom-left'}));\n", "environment": "[]"}, {"name": "Split Panel", "code": "// Demonstrates before/after imagery comparison with a variety of dates.\n\n\n/*\n * Configure the imagery\n */\n\n// These Sentinel-1 images track the major flooding in Myanmar during the 2018\n// monsoon season: https://www.bbc.com/news/world-asia-44962585\nvar images = {\n  '2018-07-21': getWeeklySentinelComposite('2018-07-21'),\n  '2018-07-28': getWeeklySentinelComposite('2018-07-28'),\n  '2018-08-18': getWeeklySentinelComposite('2018-08-18'),\n  '2018-09-15': getWeeklySentinelComposite('2018-09-15'),\n};\n\n// Composite the Sentinel-1 ImageCollection for 7 days (inclusive) after the\n// given date.\nfunction getWeeklySentinelComposite(date) {\n  var date = ee.Date(date);\n  // Only include the VV polarization, for consistent compositing.\n  var polarization = 'VV';\n  var sentinel1 = ee.ImageCollection('COPERNICUS/S1_GRD')\n                      .filterDate(date, date.advance(1, 'week'))\n                      .filter(ee.Filter.listContains(\n                          'transmitterReceiverPolarisation', polarization))\n                      .filter(ee.Filter.eq('instrumentMode', 'IW'))\n                      .select(polarization)\n                      .mean();\n  return sentinel1.visualize({min: -25, max: 0, palette: ['aqua', 'black']});\n}\n\n\n/*\n * Set up the maps and control widgets\n */\n\n// Create the left map, and have it display layer 0.\nvar leftMap = ui.Map();\nleftMap.setControlVisibility(false);\nvar leftSelector = addLayerSelector(leftMap, 0, 'top-left');\n\n// Create the right map, and have it display layer 1.\nvar rightMap = ui.Map();\nrightMap.setControlVisibility(false);\nvar rightSelector = addLayerSelector(rightMap, 1, 'top-right');\n\n// Adds a layer selection widget to the given map, to allow users to change\n// which image is displayed in the associated map.\nfunction addLayerSelector(mapToChange, defaultValue, position) {\n  var label = ui.Label('Choose an image to visualize');\n\n  // This function changes the given map to show the selected image.\n  function updateMap(selection) {\n    mapToChange.layers().set(0, ui.Map.Layer(images[selection]));\n  }\n\n  // Configure a selection dropdown to allow the user to choose between images,\n  // and set the map to update when a user makes a selection.\n  var select = ui.Select({items: Object.keys(images), onChange: updateMap});\n  select.setValue(Object.keys(images)[defaultValue], true);\n\n  var controlPanel =\n      ui.Panel({widgets: [label, select], style: {position: position}});\n\n  mapToChange.add(controlPanel);\n}\n\n\n/*\n * Tie everything together\n */\n\n// Create a SplitPanel to hold the adjacent, linked maps.\nvar splitPanel = ui.SplitPanel({\n  firstPanel: leftMap,\n  secondPanel: rightMap,\n  wipe: true,\n  style: {stretch: 'both'}\n});\n\n// Set the SplitPanel as the only thing in the UI root.\nui.root.widgets().reset([splitPanel]);\nvar linker = ui.Map.Linker([leftMap, rightMap]);\nleftMap.setCenter(96.7846, 17.6623, 12);\n", "environment": "[]"}, {"name": "Two Chart Inspector", "code": "// Adds two charts next to the map to interactively display a\n// time-series of NDVI and reflectance for each click on the map.\n\n// Filter collection to dates of interest.\nvar l8 = ee.ImageCollection('LANDSAT/LC08/C01/T1_TOA')\n    .filterDate('2016-06-01', '2017-06-01');\n\n// Create two collections to sample from, one for each plot.\nvar rgb = l8.select(['B4', 'B3', 'B2']);\nvar ndvi = l8.map(function(image) {\n  return image.select().addBands(image.normalizedDifference(['B5', 'B4']));\n});\n\nvar vis = {min: 0, max: 1, palette: [\n  'FFFFFF', 'CE7E45', 'FCD163', '66A000', '207401',\n  '056201', '004C00', '023B01', '012E01', '011301'\n]};\nMap.addLayer(ndvi, vis, 'NDVI');\nMap.setCenter(-94.84497, 39.01918, 8);\n\n// Create a panel to hold our widgets.\nvar panel = ui.Panel();\npanel.style().set('width', '300px');\n\n// Create an intro panel with labels.\nvar intro = ui.Panel([\n  ui.Label({\n    value: 'Two Chart Inspector',\n    style: {fontSize: '20px', fontWeight: 'bold'}\n  }),\n  ui.Label('Click a point on the map to inspect.')\n]);\npanel.add(intro);\n\n// Create panels to hold lon/lat values.\nvar lon = ui.Label();\nvar lat = ui.Label();\npanel.add(ui.Panel([lon, lat], ui.Panel.Layout.flow('horizontal')));\n\n// Register a callback on the default map to be invoked when the map is clicked.\nMap.onClick(function(coords) {\n  // Update the lon/lat panel with values from the click event.\n  lon.setValue('lon: ' + coords.lon.toFixed(2)),\n  lat.setValue('lat: ' + coords.lat.toFixed(2));\n\n  // Add a red dot for the point clicked on.\n  var point = ee.Geometry.Point(coords.lon, coords.lat);\n  var dot = ui.Map.Layer(point, {color: 'FF0000'});\n  Map.layers().set(1, dot);\n\n  // Create an NDVI chart.\n  var ndviChart = ui.Chart.image.series(ndvi, point, ee.Reducer.mean(), 500);\n  ndviChart.setOptions({\n    title: 'NDVI Over Time',\n    vAxis: {title: 'NDVI'},\n    hAxis: {title: 'date', format: 'MM-yy', gridlines: {count: 7}},\n  });\n  panel.widgets().set(2, ndviChart);\n\n  // Create an RGB spectrum chart.\n  var rgbChart = ui.Chart.image.series(rgb, point)\n      .setOptions({\n        title: 'RGB Reflectance Over Time',\n        vAxis: {title: 'band value'},\n        hAxis: {title: 'date', format: 'MM-yy', gridlines: {count: 7}},\n      });\n   panel.widgets().set(3, rgbChart);\n});\n\nMap.style().set('cursor', 'crosshair');\n\n// Add the panel to the ui.root.\nui.root.insert(0, panel);\n", "environment": "[]"}, {"name": "Zoom Box", "code": "// Compute the trend of nighttime lights from DMSP.\n\n// Add a band containing image date as years since 1991.\nfunction createTimeBand(img) {\n  var year = ee.Date(img.get('system:time_start')).get('year').subtract(1991);\n  return ee.Image(year).byte().addBands(img);\n}\n\n// Fit a linear trend to the nighttime lights collection.\nvar collection = ee.ImageCollection('NOAA/DMSP-OLS/NIGHTTIME_LIGHTS')\n    .select('stable_lights')\n    .map(createTimeBand);\nvar fit = collection.reduce(ee.Reducer.linearFit());\n\n// Display trend in red/blue, brightness in green.\nvar visParams = {min: 0, max: [0.18, 20, -0.18], bands: ['scale', 'offset', 'scale']};\nMap.addLayer(fit, visParams);\n\nMap.style().set('cursor', 'crosshair');\n\n// Create a map to be used as the zoom box.\nvar zoomBox = ui.Map({style: {stretch: 'both', shown: false}})\n    .setControlVisibility(false);\nzoomBox.addLayer(fit, visParams);\n\n// Update the center of the zoom box map when the base map is clicked.\nMap.onClick(function(coords) {\n  centerZoomBox(coords.lon, coords.lat);\n});\n\nvar centerZoomBox = function(lon, lat) {\n  instructions.style().set('shown', false);\n  zoomBox.style().set('shown', true);\n  zoomBox.setCenter(lon, lat, 8);\n  var bounds = zoomBox.getBounds();\n  var w = bounds[0], e = bounds [2];\n  var n = bounds[1], s = bounds [3];\n  var outline = ee.Geometry.MultiLineString([\n    [[w, s], [w, n]],\n    [[e, s], [e, n]],\n    [[w, s], [e, s]],\n    [[w, n], [e, n]],\n  ]);\n  var layer = ui.Map.Layer(outline, {color: 'FFFFFF'}, 'Zoom Box Bounds');\n  Map.layers().set(1, layer);\n};\n\n// Add a label and the zoom box map to the default map.\nvar instructions = ui.Label('Click the map to see an area in detail.', {\n  stretch: 'both',\n  textAlign: 'center',\n  backgroundColor: '#d3d3d3'\n});\nvar panel = ui.Panel({\n  widgets: [zoomBox, instructions],\n  style: {\n    position: 'top-right',\n    height: '300px',\n    width: '300px',\n  }\n});\nMap.add(ui.Label('Night Light Trends'));\nMap.add(panel);\n", "environment": "[]"}]}]}